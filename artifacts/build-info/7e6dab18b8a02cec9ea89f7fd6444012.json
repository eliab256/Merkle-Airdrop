{
	"id": "7e6dab18b8a02cec9ea89f7fd6444012",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/MerkleAirdrop.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract MerkleAirdrop {\r\n    using SafeERC20 for IERC20;\r\n    error MerkleAirdrop__MerkleProofNotValid();\r\n    error MerkleAirdrop__AlreadyClaimed();\r\n\r\n    event Claim(address account, uint256 amount);\r\n    // some list of addresses\r\n    address[] public claimers;\r\n    bytes32 private immutable i_markleRoot;\r\n    IERC20 private immutable i_airdropToken;\r\n    mapping(address => bool) public s_hasClaimed;\r\n\r\n    constructor(bytes32 _markleRoot, IERC20 _airdropToken){\r\n        i_markleRoot = _markleRoot;\r\n        i_airdropToken = _airdropToken;\r\n    }\r\n\r\n    function claim(address _account, uint256 _amount, bytes32[] calldata markleProof) external {\r\n        if(s_hasClaimed[_account]){ \r\n            revert MerkleAirdrop__AlreadyClaimed();\r\n        }\r\n        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(_account, _amount))));\r\n        if(!MerkleProof.verify(markleProof, i_markleRoot, leaf)) {\r\n            revert MerkleAirdrop__MerkleProofNotValid();\r\n        }\r\n        s_hasClaimed[_account] = true;\r\n        emit Claim(_account, _amount);\r\n        i_airdropToken.safeTransfer(_account, _amount);\r\n    }\r\n\r\n    function getMerkleRoot() external view returns (bytes32){\r\n        return i_markleRoot;\r\n    }\r\n\r\n    function getAirdroptoken() external view returns (IERC20){\r\n        return i_airdropToken;\r\n    }\r\n\r\n}"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/Hashes.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity >=0.4.16;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n"
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"IERC1363": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"approveAndCall(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"approveAndCall(address,uint256,bytes)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `spender`.",
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferAndCall(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferAndCall(address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFromAndCall(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFromAndCall(address,address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							}
						},
						"title": "IERC1363",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"approveAndCall(address,uint256)": "3177029f",
							"approveAndCall(address,uint256,bytes)": "cae9ca51",
							"balanceOf(address)": "70a08231",
							"supportsInterface(bytes4)": "01ffc9a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAndCall(address,uint256)": "1296ee62",
							"transferAndCall(address,uint256,bytes)": "4000aea0",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromAndCall(address,address,uint256)": "d8fbe994",
							"transferFromAndCall(address,address,uint256,bytes)": "c1d34b89"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xa2d847c6ad19f5b8ac7c6f4c462bb4c1fd76307cb17478c49743354cf122f77f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb88894b8d6c2967694114eceba85a4dd40d7adea390e20e766657cb6d5d4be\",\"dweb:/ipfs/QmQQVNAzL8PnhUCYzSvSoiEzuqNtEroBmyBgqCJ9hbKJ5B\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xa2d847c6ad19f5b8ac7c6f4c462bb4c1fd76307cb17478c49743354cf122f77f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb88894b8d6c2967694114eceba85a4dd40d7adea390e20e766657cb6d5d4be\",\"dweb:/ipfs/QmQQVNAzL8PnhUCYzSvSoiEzuqNtEroBmyBgqCJ9hbKJ5B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa2646970667358221220d7f3cdc0ecbdfe18d86f99bf447008135de95c66086e32364c65cbfe390d63fb64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220d7f3cdc0ecbdfe18d86f99bf447008135de95c66086e32364c65cbfe390d63fb64736f6c634300081e0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 RETURN 0xCD 0xC0 EOFCREATE 0xBD INVALID XOR 0xD8 PUSH16 0x99BF447008135DE95C66086E32364C65 0xCB INVALID CODECOPY 0xD PUSH4 0xFB64736F PUSH13 0x634300081E0033000000000000 ",
							"sourceMap": "698:9376:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220d7f3cdc0ecbdfe18d86f99bf447008135de95c66086e32364c65cbfe390d63fb64736f6c634300081e0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 RETURN 0xCD 0xC0 EOFCREATE 0xBD INVALID XOR 0xD8 PUSH16 0x99BF447008135DE95C66086E32364C65 0xCB INVALID CODECOPY 0xD PUSH4 0xFB64736F PUSH13 0x634300081E0033000000000000 ",
							"sourceMap": "698:9376:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite",
								"transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)": "infinite",
								"trySafeTransfer(contract IERC20,address,uint256)": "infinite",
								"trySafeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d7f3cdc0ecbdfe18d86f99bf447008135de95c66086e32364c65cbfe390d63fb64736f6c634300081e0033",
									".code": [
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/cryptography/Hashes.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/MerkleAirdrop.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xa2d847c6ad19f5b8ac7c6f4c462bb4c1fd76307cb17478c49743354cf122f77f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb88894b8d6c2967694114eceba85a4dd40d7adea390e20e766657cb6d5d4be\",\"dweb:/ipfs/QmQQVNAzL8PnhUCYzSvSoiEzuqNtEroBmyBgqCJ9hbKJ5B\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/Hashes.sol": {
				"Hashes": {
					"abi": [],
					"devdoc": {
						"details": "Library of standard hash functions. _Available since v5.1._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa2646970667358221220f6fab178832239d8a31b8a7f941b9768efbd7edc90efb67a15a1a8b5ab8f694964736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220f6fab178832239d8a31b8a7f941b9768efbd7edc90efb67a15a1a8b5ab8f694964736f6c634300081e0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 STATICCALL 0xB1 PUSH25 0x832239D8A31B8A7F941B9768EFBD7EDC90EFB67A15A1A8B5AB DUP16 PUSH10 0x4964736F6C634300081E STOP CALLER ",
							"sourceMap": "221:811:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220f6fab178832239d8a31b8a7f941b9768efbd7edc90efb67a15a1a8b5ab8f694964736f6c634300081e0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 STATICCALL 0xB1 PUSH25 0x832239D8A31B8A7F941B9768EFBD7EDC90EFB67A15A1A8B5AB DUP16 PUSH10 0x4964736F6C634300081E STOP CALLER ",
							"sourceMap": "221:811:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"commutativeKeccak256(bytes32,bytes32)": "infinite",
								"efficientKeccak256(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f6fab178832239d8a31b8a7f941b9768efbd7edc90efb67a15a1a8b5ab8f694964736f6c634300081e0033",
									".code": [
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/cryptography/Hashes.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/MerkleAirdrop.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [
						{
							"inputs": [],
							"name": "MerkleProofInvalidMultiproof",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.",
						"errors": {
							"MerkleProofInvalidMultiproof()": [
								{
									"details": "The multiproof provided is not valid."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa264697066735822122050597cccc6b65dd121991deb8d5e83cd1362e1d7152a7d910ee2b3a6dfd512df64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122050597cccc6b65dd121991deb8d5e83cd1362e1d7152a7d910ee2b3a6dfd512df64736f6c634300081e0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP MSIZE PUSH29 0xCCC6B65DD121991DEB8D5E83CD1362E1D7152A7D910EE2B3A6DFD512DF PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "1353:22982:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122050597cccc6b65dd121991deb8d5e83cd1362e1d7152a7d910ee2b3a6dfd512df64736f6c634300081e0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP MSIZE PUSH29 0xCCC6B65DD121991DEB8D5E83CD1362E1D7152A7D910EE2B3A6DFD512DF PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "1353:22982:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32)": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32)": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122050597cccc6b65dd121991deb8d5e83cd1362e1d7152a7d910ee2b3a6dfd512df64736f6c634300081e0033",
									".code": [
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/cryptography/Hashes.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/MerkleAirdrop.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/MerkleAirdrop.sol": {
				"MerkleAirdrop": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_markleRoot",
									"type": "bytes32"
								},
								{
									"internalType": "contract IERC20",
									"name": "_airdropToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "MerkleAirdrop__AlreadyClaimed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MerkleAirdrop__MerkleProofNotValid",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Claim",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "markleProof",
									"type": "bytes32[]"
								}
							],
							"name": "claim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "claimers",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAirdroptoken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getMerkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "s_hasClaimed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/MerkleAirdrop.sol\":242:1584  contract MerkleAirdrop {... */\n  mstore(0x40, 0xc0)\n    /* \"src/MerkleAirdrop.sol\":658:798  constructor(bytes32 _markleRoot, IERC20 _airdropToken){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"src/MerkleAirdrop.sol\":738:749  _markleRoot */\n  dup2\n    /* \"src/MerkleAirdrop.sol\":723:749  i_markleRoot = _markleRoot */\n  0x80\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"src/MerkleAirdrop.sol\":777:790  _airdropToken */\n  dup1\n    /* \"src/MerkleAirdrop.sol\":760:790  i_airdropToken = _airdropToken */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xa0\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"src/MerkleAirdrop.sol\":658:798  constructor(bytes32 _markleRoot, IERC20 _airdropToken){... */\n  pop\n  pop\n    /* \"src/MerkleAirdrop.sol\":242:1584  contract MerkleAirdrop {... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  0x00\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:411   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":400:405   */\n  dup2\n    /* \"#utility.yul\":389:405   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:411   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":417:539   */\ntag_11:\n    /* \"#utility.yul\":490:514   */\n  tag_24\n    /* \"#utility.yul\":508:513   */\n  dup2\n    /* \"#utility.yul\":490:514   */\n  tag_10\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":483:488   */\n  dup2\n    /* \"#utility.yul\":480:515   */\n  eq\n    /* \"#utility.yul\":470:533   */\n  tag_25\n  jumpi\n    /* \"#utility.yul\":529:530   */\n  0x00\n    /* \"#utility.yul\":526:527   */\n  0x00\n    /* \"#utility.yul\":519:531   */\n  revert\n    /* \"#utility.yul\":470:533   */\ntag_25:\n    /* \"#utility.yul\":417:539   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":545:688   */\ntag_12:\n    /* \"#utility.yul\":602:607   */\n  0x00\n    /* \"#utility.yul\":633:639   */\n  dup2\n    /* \"#utility.yul\":627:640   */\n  mload\n    /* \"#utility.yul\":618:640   */\n  swap1\n  pop\n    /* \"#utility.yul\":649:682   */\n  tag_27\n    /* \"#utility.yul\":676:681   */\n  dup2\n    /* \"#utility.yul\":649:682   */\n  tag_11\n  jump\t// in\ntag_27:\n    /* \"#utility.yul\":545:688   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":694:820   */\ntag_13:\n    /* \"#utility.yul\":731:738   */\n  0x00\n    /* \"#utility.yul\":771:813   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":764:769   */\n  dup3\n    /* \"#utility.yul\":760:814   */\n  and\n    /* \"#utility.yul\":749:814   */\n  swap1\n  pop\n    /* \"#utility.yul\":694:820   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":826:922   */\ntag_14:\n    /* \"#utility.yul\":863:870   */\n  0x00\n    /* \"#utility.yul\":892:916   */\n  tag_30\n    /* \"#utility.yul\":910:915   */\n  dup3\n    /* \"#utility.yul\":892:916   */\n  tag_13\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":881:916   */\n  swap1\n  pop\n    /* \"#utility.yul\":826:922   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":928:1038   */\ntag_15:\n    /* \"#utility.yul\":979:986   */\n  0x00\n    /* \"#utility.yul\":1008:1032   */\n  tag_32\n    /* \"#utility.yul\":1026:1031   */\n  dup3\n    /* \"#utility.yul\":1008:1032   */\n  tag_14\n  jump\t// in\ntag_32:\n    /* \"#utility.yul\":997:1032   */\n  swap1\n  pop\n    /* \"#utility.yul\":928:1038   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1044:1194   */\ntag_16:\n    /* \"#utility.yul\":1131:1169   */\n  tag_34\n    /* \"#utility.yul\":1163:1168   */\n  dup2\n    /* \"#utility.yul\":1131:1169   */\n  tag_15\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":1124:1129   */\n  dup2\n    /* \"#utility.yul\":1121:1170   */\n  eq\n    /* \"#utility.yul\":1111:1188   */\n  tag_35\n  jumpi\n    /* \"#utility.yul\":1184:1185   */\n  0x00\n    /* \"#utility.yul\":1181:1182   */\n  0x00\n    /* \"#utility.yul\":1174:1186   */\n  revert\n    /* \"#utility.yul\":1111:1188   */\ntag_35:\n    /* \"#utility.yul\":1044:1194   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1200:1371   */\ntag_17:\n    /* \"#utility.yul\":1271:1276   */\n  0x00\n    /* \"#utility.yul\":1302:1308   */\n  dup2\n    /* \"#utility.yul\":1296:1309   */\n  mload\n    /* \"#utility.yul\":1287:1309   */\n  swap1\n  pop\n    /* \"#utility.yul\":1318:1365   */\n  tag_37\n    /* \"#utility.yul\":1359:1364   */\n  dup2\n    /* \"#utility.yul\":1318:1365   */\n  tag_16\n  jump\t// in\ntag_37:\n    /* \"#utility.yul\":1200:1371   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1377:1912   */\ntag_3:\n    /* \"#utility.yul\":1470:1476   */\n  0x00\n    /* \"#utility.yul\":1478:1484   */\n  0x00\n    /* \"#utility.yul\":1527:1529   */\n  0x40\n    /* \"#utility.yul\":1515:1524   */\n  dup4\n    /* \"#utility.yul\":1506:1513   */\n  dup6\n    /* \"#utility.yul\":1502:1525   */\n  sub\n    /* \"#utility.yul\":1498:1530   */\n  slt\n    /* \"#utility.yul\":1495:1614   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1533:1612   */\n  tag_40\n  tag_8\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1495:1614   */\ntag_39:\n    /* \"#utility.yul\":1653:1654   */\n  0x00\n    /* \"#utility.yul\":1678:1742   */\n  tag_41\n    /* \"#utility.yul\":1734:1741   */\n  dup6\n    /* \"#utility.yul\":1725:1731   */\n  dup3\n    /* \"#utility.yul\":1714:1723   */\n  dup7\n    /* \"#utility.yul\":1710:1732   */\n  add\n    /* \"#utility.yul\":1678:1742   */\n  tag_12\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1668:1742   */\n  swap3\n  pop\n    /* \"#utility.yul\":1624:1752   */\n  pop\n    /* \"#utility.yul\":1791:1793   */\n  0x20\n    /* \"#utility.yul\":1817:1895   */\n  tag_42\n    /* \"#utility.yul\":1887:1894   */\n  dup6\n    /* \"#utility.yul\":1878:1884   */\n  dup3\n    /* \"#utility.yul\":1867:1876   */\n  dup7\n    /* \"#utility.yul\":1863:1885   */\n  add\n    /* \"#utility.yul\":1817:1895   */\n  tag_17\n  jump\t// in\ntag_42:\n    /* \"#utility.yul\":1807:1895   */\n  swap2\n  pop\n    /* \"#utility.yul\":1762:1905   */\n  pop\n    /* \"#utility.yul\":1377:1912   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"src/MerkleAirdrop.sol\":242:1584  contract MerkleAirdrop {... */\ntag_6:\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xa7c043501f1df2d72a05841133f37ab6c14315034593e4d14429a2cdafe45a7d\")\n  0x00\n  assignImmutable(\"0x7eec76cce4896d02227f0eb4f41a5c901d1a0e9a77ef024c8024ff3e2e1f7280\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"src/MerkleAirdrop.sol\":242:1584  contract MerkleAirdrop {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x3d13f874\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x49590657\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4a5aae37\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x5d70fa3c\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x99ae559d\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"src/MerkleAirdrop.sol\":806:1372  function claim(address _account, uint256 _amount, bytes32[] calldata markleProof) external {... */\n    tag_3:\n      tag_8\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_9\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_9:\n      tag_11\n      jump\t// in\n    tag_8:\n      stop\n        /* \"src/MerkleAirdrop.sol\":1380:1474  function getMerkleRoot() external view returns (bytes32){... */\n    tag_4:\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      mload(0x40)\n      tag_14\n      swap2\n      swap1\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/MerkleAirdrop.sol\":605:649  mapping(address => bool) public s_hasClaimed */\n    tag_5:\n      tag_16\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      tag_19\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/MerkleAirdrop.sol\":1482:1579  function getAirdroptoken() external view returns (IERC20){... */\n    tag_6:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_24\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/MerkleAirdrop.sol\":482:507  address[] public claimers */\n    tag_7:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/MerkleAirdrop.sol\":806:1372  function claim(address _account, uint256 _amount, bytes32[] calldata markleProof) external {... */\n    tag_11:\n        /* \"src/MerkleAirdrop.sol\":911:923  s_hasClaimed */\n      0x01\n        /* \"src/MerkleAirdrop.sol\":911:933  s_hasClaimed[_account] */\n      0x00\n        /* \"src/MerkleAirdrop.sol\":924:932  _account */\n      dup6\n        /* \"src/MerkleAirdrop.sol\":911:933  s_hasClaimed[_account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"src/MerkleAirdrop.sol\":908:1000  if(s_hasClaimed[_account]){ ... */\n      iszero\n      tag_33\n      jumpi\n        /* \"src/MerkleAirdrop.sol\":957:988  MerkleAirdrop__AlreadyClaimed() */\n      mload(0x40)\n      0x1ac2170b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/MerkleAirdrop.sol\":908:1000  if(s_hasClaimed[_account]){ ... */\n    tag_33:\n        /* \"src/MerkleAirdrop.sol\":1010:1022  bytes32 leaf */\n      0x00\n        /* \"src/MerkleAirdrop.sol\":1069:1077  _account */\n      dup5\n        /* \"src/MerkleAirdrop.sol\":1079:1086  _amount */\n      dup5\n        /* \"src/MerkleAirdrop.sol\":1058:1087  abi.encode(_account, _amount) */\n      add(0x20, mload(0x40))\n      tag_34\n      swap3\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/MerkleAirdrop.sol\":1048:1088  keccak256(abi.encode(_account, _amount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/MerkleAirdrop.sol\":1035:1089  bytes.concat(keccak256(abi.encode(_account, _amount))) */\n      add(0x20, mload(0x40))\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/MerkleAirdrop.sol\":1025:1090  keccak256(bytes.concat(keccak256(abi.encode(_account, _amount)))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/MerkleAirdrop.sol\":1010:1090  bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(_account, _amount)))) */\n      swap1\n      pop\n        /* \"src/MerkleAirdrop.sol\":1105:1156  MerkleProof.verify(markleProof, i_markleRoot, leaf) */\n      tag_38\n        /* \"src/MerkleAirdrop.sol\":1124:1135  markleProof */\n      dup4\n      dup4\n        /* \"src/MerkleAirdrop.sol\":1105:1156  MerkleProof.verify(markleProof, i_markleRoot, leaf) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      dup2\n      dup5\n      add\n      mstore\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      swap1\n      pop\n      dup1\n      dup4\n      add\n      swap3\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"src/MerkleAirdrop.sol\":1137:1149  i_markleRoot */\n      immutable(\"0x7eec76cce4896d02227f0eb4f41a5c901d1a0e9a77ef024c8024ff3e2e1f7280\")\n        /* \"src/MerkleAirdrop.sol\":1151:1155  leaf */\n      dup4\n        /* \"src/MerkleAirdrop.sol\":1105:1123  MerkleProof.verify */\n      tag_39\n        /* \"src/MerkleAirdrop.sol\":1105:1156  MerkleProof.verify(markleProof, i_markleRoot, leaf) */\n      jump\t// in\n    tag_38:\n        /* \"src/MerkleAirdrop.sol\":1101:1228  if(!MerkleProof.verify(markleProof, i_markleRoot, leaf)) {... */\n      tag_40\n      jumpi\n        /* \"src/MerkleAirdrop.sol\":1180:1216  MerkleAirdrop__MerkleProofNotValid() */\n      mload(0x40)\n      0xaa894afb00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/MerkleAirdrop.sol\":1101:1228  if(!MerkleProof.verify(markleProof, i_markleRoot, leaf)) {... */\n    tag_40:\n        /* \"src/MerkleAirdrop.sol\":1263:1267  true */\n      0x01\n        /* \"src/MerkleAirdrop.sol\":1238:1250  s_hasClaimed */\n      dup1\n        /* \"src/MerkleAirdrop.sol\":1238:1260  s_hasClaimed[_account] */\n      0x00\n        /* \"src/MerkleAirdrop.sol\":1251:1259  _account */\n      dup8\n        /* \"src/MerkleAirdrop.sol\":1238:1260  s_hasClaimed[_account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"src/MerkleAirdrop.sol\":1238:1267  s_hasClaimed[_account] = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"src/MerkleAirdrop.sol\":1283:1307  Claim(_account, _amount) */\n      0x47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4\n        /* \"src/MerkleAirdrop.sol\":1289:1297  _account */\n      dup6\n        /* \"src/MerkleAirdrop.sol\":1299:1306  _amount */\n      dup6\n        /* \"src/MerkleAirdrop.sol\":1283:1307  Claim(_account, _amount) */\n      mload(0x40)\n      tag_41\n      swap3\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"src/MerkleAirdrop.sol\":1318:1364  i_airdropToken.safeTransfer(_account, _amount) */\n      tag_42\n        /* \"src/MerkleAirdrop.sol\":1346:1354  _account */\n      dup6\n        /* \"src/MerkleAirdrop.sol\":1356:1363  _amount */\n      dup6\n        /* \"src/MerkleAirdrop.sol\":1318:1332  i_airdropToken */\n      immutable(\"0xa7c043501f1df2d72a05841133f37ab6c14315034593e4d14429a2cdafe45a7d\")\n        /* \"src/MerkleAirdrop.sol\":1318:1345  i_airdropToken.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_43\n      swap1\n        /* \"src/MerkleAirdrop.sol\":1318:1364  i_airdropToken.safeTransfer(_account, _amount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_42:\n        /* \"src/MerkleAirdrop.sol\":897:1372  {... */\n      pop\n        /* \"src/MerkleAirdrop.sol\":806:1372  function claim(address _account, uint256 _amount, bytes32[] calldata markleProof) external {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/MerkleAirdrop.sol\":1380:1474  function getMerkleRoot() external view returns (bytes32){... */\n    tag_13:\n        /* \"src/MerkleAirdrop.sol\":1428:1435  bytes32 */\n      0x00\n        /* \"src/MerkleAirdrop.sol\":1454:1466  i_markleRoot */\n      immutable(\"0x7eec76cce4896d02227f0eb4f41a5c901d1a0e9a77ef024c8024ff3e2e1f7280\")\n        /* \"src/MerkleAirdrop.sol\":1447:1466  return i_markleRoot */\n      swap1\n      pop\n        /* \"src/MerkleAirdrop.sol\":1380:1474  function getMerkleRoot() external view returns (bytes32){... */\n      swap1\n      jump\t// out\n        /* \"src/MerkleAirdrop.sol\":605:649  mapping(address => bool) public s_hasClaimed */\n    tag_19:\n      mstore(0x20, 0x01)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"src/MerkleAirdrop.sol\":1482:1579  function getAirdroptoken() external view returns (IERC20){... */\n    tag_23:\n        /* \"src/MerkleAirdrop.sol\":1532:1538  IERC20 */\n      0x00\n        /* \"src/MerkleAirdrop.sol\":1557:1571  i_airdropToken */\n      immutable(\"0xa7c043501f1df2d72a05841133f37ab6c14315034593e4d14429a2cdafe45a7d\")\n        /* \"src/MerkleAirdrop.sol\":1550:1571  return i_airdropToken */\n      swap1\n      pop\n        /* \"src/MerkleAirdrop.sol\":1482:1579  function getAirdroptoken() external view returns (IERC20){... */\n      swap1\n      jump\t// out\n        /* \"src/MerkleAirdrop.sol\":482:507  address[] public claimers */\n    tag_29:\n      0x00\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1902:2056  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n    tag_39:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1993:1997  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2045:2049  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2016:2041  processProof(proof, leaf) */\n      tag_49\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2029:2034  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2036:2040  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2016:2028  processProof */\n      tag_50\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2016:2041  processProof(proof, leaf) */\n      jump\t// in\n    tag_49:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2016:2049  processProof(proof, leaf) == root */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2009:2049  return processProof(proof, leaf) == root */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1902:2056  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_43:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1301:1372  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      tag_52\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1321:1326  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1343:1348  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1343:1357  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1360:1362  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1364:1369  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      add(0x24, mload(0x40))\n      tag_53\n      swap3\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap2\n      pop\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1301:1320  _callOptionalReturn */\n      tag_54\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1301:1372  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      jump\t// in\n    tag_52:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2457:2765  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_50:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2540:2547  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2559:2579  bytes32 computedHash */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2582:2586  leaf */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2559:2586  bytes32 computedHash = leaf */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2601:2610  uint256 i */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2613:2614  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2601:2614  uint256 i = 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2620:2625  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2620:2632  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2616:2617  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2616:2632  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_57\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2668:2719  Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      tag_59\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2696:2708  computedHash */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2710:2715  proof */\n      dup7\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2716:2717  i */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2710:2718  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_60\n      jumpi\n      tag_61\n      tag_62\n      jump\t// in\n    tag_61:\n    tag_60:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2668:2695  Hashes.commutativeKeccak256 */\n      tag_63\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2668:2719  Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      jump\t// in\n    tag_59:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2653:2719  computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2634:2637  i++ */\n      dup1\n      dup1\n      0x01\n      add\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_56)\n    tag_57:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2746:2758  computedHash */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2739:2758  return computedHash */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2457:2765  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_54:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8450:8468  uint256 returnSize */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8478:8497  uint256 returnValue */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8616:8620  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8613:8614  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8606:8610  data */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8600:8611  mload(data) */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8593:8597  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8587:8591  data */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8583:8598  add(data, 0x20) */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8580:8581  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8573:8578  token */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8566:8571  gas() */\n      gas\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8561:8621  call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20) */\n      call\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8673:8680  success */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8663:8839  if iszero(success) {... */\n      tag_65\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8717:8721  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8711:8722  mload(0x40) */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8762:8778  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8759:8760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8754:8757  ptr */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8739:8779  returndatacopy(ptr, 0, returndatasize()) */\n      returndatacopy\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8808:8824  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8803:8806  ptr */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8796:8825  revert(ptr, returndatasize()) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8663:8839  if iszero(success) {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8866:8882  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8852:8882  returnSize := returndatasize() */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8916:8917  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8910:8918  mload(0) */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8895:8918  returnValue := mload(0) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8532:8928  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8956:8957  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:8952  returnSize */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:8957  returnSize == 0 */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      tag_66\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9009:9010  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8994:9005  returnValue */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8994:9010  returnValue != 1 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      jump(tag_67)\n    tag_66:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8990:8991  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8968:8973  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8986  address(token).code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8991  address(token).code.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_67:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n      iszero\n      tag_68\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9066:9071  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      0x5274afe700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_69\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n    tag_68:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8440:9090  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":504:671  function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":579:586  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":609:610  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":605:606  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":605:610  a < b */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      tag_71\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":640:664  efficientKeccak256(b, a) */\n      tag_72\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":659:660  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":662:663  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":640:658  efficientKeccak256 */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":640:664  efficientKeccak256(b, a) */\n      jump\t// in\n    tag_72:\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      jump(tag_74)\n    tag_71:\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":613:637  efficientKeccak256(a, b) */\n      tag_75\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":632:633  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":635:636  b */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":613:631  efficientKeccak256 */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":613:637  efficientKeccak256(a, b) */\n      jump\t// in\n    tag_75:\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n    tag_74:\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":598:664  return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":504:671  function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":791:1030  function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":864:877  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":941:942  a */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":935:939  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":928:943  mstore(0x00, a) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":969:970  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":963:967  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":956:971  mstore(0x20, b) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":1009:1013  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":1003:1007  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":993:1014  keccak256(0x00, 0x40) */\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":984:1014  value := keccak256(0x00, 0x40) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":791:1030  function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_78:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      0x00\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_79:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      0x00\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_80:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_81:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_110\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_80\n      jump\t// in\n    tag_110:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_82:\n        /* \"#utility.yul\":641:665   */\n      tag_112\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_81\n      jump\t// in\n    tag_112:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_113\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      0x00\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_113:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_83:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_115\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_82\n      jump\t// in\n    tag_115:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:918   */\n    tag_84:\n        /* \"#utility.yul\":878:885   */\n      0x00\n        /* \"#utility.yul\":907:912   */\n      dup2\n        /* \"#utility.yul\":896:912   */\n      swap1\n      pop\n        /* \"#utility.yul\":841:918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1046   */\n    tag_85:\n        /* \"#utility.yul\":997:1021   */\n      tag_118\n        /* \"#utility.yul\":1015:1020   */\n      dup2\n        /* \"#utility.yul\":997:1021   */\n      tag_84\n      jump\t// in\n    tag_118:\n        /* \"#utility.yul\":990:995   */\n      dup2\n        /* \"#utility.yul\":987:1022   */\n      eq\n        /* \"#utility.yul\":977:1040   */\n      tag_119\n      jumpi\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1033:1034   */\n      0x00\n        /* \"#utility.yul\":1026:1038   */\n      revert\n        /* \"#utility.yul\":977:1040   */\n    tag_119:\n        /* \"#utility.yul\":924:1046   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1191   */\n    tag_86:\n        /* \"#utility.yul\":1098:1103   */\n      0x00\n        /* \"#utility.yul\":1136:1142   */\n      dup2\n        /* \"#utility.yul\":1123:1143   */\n      calldataload\n        /* \"#utility.yul\":1114:1143   */\n      swap1\n      pop\n        /* \"#utility.yul\":1152:1185   */\n      tag_121\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1152:1185   */\n      tag_85\n      jump\t// in\n    tag_121:\n        /* \"#utility.yul\":1052:1191   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1197:1314   */\n    tag_87:\n        /* \"#utility.yul\":1306:1307   */\n      0x00\n        /* \"#utility.yul\":1303:1304   */\n      0x00\n        /* \"#utility.yul\":1296:1308   */\n      revert\n        /* \"#utility.yul\":1320:1437   */\n    tag_88:\n        /* \"#utility.yul\":1429:1430   */\n      0x00\n        /* \"#utility.yul\":1426:1427   */\n      0x00\n        /* \"#utility.yul\":1419:1431   */\n      revert\n        /* \"#utility.yul\":1443:1560   */\n    tag_89:\n        /* \"#utility.yul\":1552:1553   */\n      0x00\n        /* \"#utility.yul\":1549:1550   */\n      0x00\n        /* \"#utility.yul\":1542:1554   */\n      revert\n        /* \"#utility.yul\":1583:2151   */\n    tag_90:\n        /* \"#utility.yul\":1656:1664   */\n      0x00\n        /* \"#utility.yul\":1666:1672   */\n      0x00\n        /* \"#utility.yul\":1716:1719   */\n      dup4\n        /* \"#utility.yul\":1709:1713   */\n      0x1f\n        /* \"#utility.yul\":1701:1707   */\n      dup5\n        /* \"#utility.yul\":1697:1714   */\n      add\n        /* \"#utility.yul\":1693:1720   */\n      slt\n        /* \"#utility.yul\":1683:1805   */\n      tag_126\n      jumpi\n        /* \"#utility.yul\":1724:1803   */\n      tag_127\n      tag_87\n      jump\t// in\n    tag_127:\n        /* \"#utility.yul\":1683:1805   */\n    tag_126:\n        /* \"#utility.yul\":1837:1843   */\n      dup3\n        /* \"#utility.yul\":1824:1844   */\n      calldataload\n        /* \"#utility.yul\":1814:1844   */\n      swap1\n      pop\n        /* \"#utility.yul\":1867:1885   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1859:1865   */\n      dup2\n        /* \"#utility.yul\":1856:1886   */\n      gt\n        /* \"#utility.yul\":1853:1970   */\n      iszero\n      tag_128\n      jumpi\n        /* \"#utility.yul\":1889:1968   */\n      tag_129\n      tag_88\n      jump\t// in\n    tag_129:\n        /* \"#utility.yul\":1853:1970   */\n    tag_128:\n        /* \"#utility.yul\":2003:2007   */\n      0x20\n        /* \"#utility.yul\":1995:2001   */\n      dup4\n        /* \"#utility.yul\":1991:2008   */\n      add\n        /* \"#utility.yul\":1979:2008   */\n      swap2\n      pop\n        /* \"#utility.yul\":2057:2060   */\n      dup4\n        /* \"#utility.yul\":2049:2053   */\n      0x20\n        /* \"#utility.yul\":2041:2047   */\n      dup3\n        /* \"#utility.yul\":2037:2054   */\n      mul\n        /* \"#utility.yul\":2027:2035   */\n      dup4\n        /* \"#utility.yul\":2023:2055   */\n      add\n        /* \"#utility.yul\":2020:2061   */\n      gt\n        /* \"#utility.yul\":2017:2145   */\n      iszero\n      tag_130\n      jumpi\n        /* \"#utility.yul\":2064:2143   */\n      tag_131\n      tag_89\n      jump\t// in\n    tag_131:\n        /* \"#utility.yul\":2017:2145   */\n    tag_130:\n        /* \"#utility.yul\":1583:2151   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2157:3006   */\n    tag_10:\n        /* \"#utility.yul\":2261:2267   */\n      0x00\n        /* \"#utility.yul\":2269:2275   */\n      0x00\n        /* \"#utility.yul\":2277:2283   */\n      0x00\n        /* \"#utility.yul\":2285:2291   */\n      0x00\n        /* \"#utility.yul\":2334:2336   */\n      0x60\n        /* \"#utility.yul\":2322:2331   */\n      dup6\n        /* \"#utility.yul\":2313:2320   */\n      dup8\n        /* \"#utility.yul\":2309:2332   */\n      sub\n        /* \"#utility.yul\":2305:2337   */\n      slt\n        /* \"#utility.yul\":2302:2421   */\n      iszero\n      tag_133\n      jumpi\n        /* \"#utility.yul\":2340:2419   */\n      tag_134\n      tag_78\n      jump\t// in\n    tag_134:\n        /* \"#utility.yul\":2302:2421   */\n    tag_133:\n        /* \"#utility.yul\":2460:2461   */\n      0x00\n        /* \"#utility.yul\":2485:2538   */\n      tag_135\n        /* \"#utility.yul\":2530:2537   */\n      dup8\n        /* \"#utility.yul\":2521:2527   */\n      dup3\n        /* \"#utility.yul\":2510:2519   */\n      dup9\n        /* \"#utility.yul\":2506:2528   */\n      add\n        /* \"#utility.yul\":2485:2538   */\n      tag_83\n      jump\t// in\n    tag_135:\n        /* \"#utility.yul\":2475:2538   */\n      swap5\n      pop\n        /* \"#utility.yul\":2431:2548   */\n      pop\n        /* \"#utility.yul\":2587:2589   */\n      0x20\n        /* \"#utility.yul\":2613:2666   */\n      tag_136\n        /* \"#utility.yul\":2658:2665   */\n      dup8\n        /* \"#utility.yul\":2649:2655   */\n      dup3\n        /* \"#utility.yul\":2638:2647   */\n      dup9\n        /* \"#utility.yul\":2634:2656   */\n      add\n        /* \"#utility.yul\":2613:2666   */\n      tag_86\n      jump\t// in\n    tag_136:\n        /* \"#utility.yul\":2603:2666   */\n      swap4\n      pop\n        /* \"#utility.yul\":2558:2676   */\n      pop\n        /* \"#utility.yul\":2743:2745   */\n      0x40\n        /* \"#utility.yul\":2732:2741   */\n      dup6\n        /* \"#utility.yul\":2728:2746   */\n      add\n        /* \"#utility.yul\":2715:2747   */\n      calldataload\n        /* \"#utility.yul\":2774:2792   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2766:2772   */\n      dup2\n        /* \"#utility.yul\":2763:2793   */\n      gt\n        /* \"#utility.yul\":2760:2877   */\n      iszero\n      tag_137\n      jumpi\n        /* \"#utility.yul\":2796:2875   */\n      tag_138\n      tag_79\n      jump\t// in\n    tag_138:\n        /* \"#utility.yul\":2760:2877   */\n    tag_137:\n        /* \"#utility.yul\":2909:2989   */\n      tag_139\n        /* \"#utility.yul\":2981:2988   */\n      dup8\n        /* \"#utility.yul\":2972:2978   */\n      dup3\n        /* \"#utility.yul\":2961:2970   */\n      dup9\n        /* \"#utility.yul\":2957:2979   */\n      add\n        /* \"#utility.yul\":2909:2989   */\n      tag_90\n      jump\t// in\n    tag_139:\n        /* \"#utility.yul\":2891:2989   */\n      swap3\n      pop\n      swap3\n      pop\n        /* \"#utility.yul\":2686:2999   */\n      pop\n        /* \"#utility.yul\":2157:3006   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3012:3089   */\n    tag_91:\n        /* \"#utility.yul\":3049:3056   */\n      0x00\n        /* \"#utility.yul\":3078:3083   */\n      dup2\n        /* \"#utility.yul\":3067:3083   */\n      swap1\n      pop\n        /* \"#utility.yul\":3012:3089   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3095:3213   */\n    tag_92:\n        /* \"#utility.yul\":3182:3206   */\n      tag_142\n        /* \"#utility.yul\":3200:3205   */\n      dup2\n        /* \"#utility.yul\":3182:3206   */\n      tag_91\n      jump\t// in\n    tag_142:\n        /* \"#utility.yul\":3177:3180   */\n      dup3\n        /* \"#utility.yul\":3170:3207   */\n      mstore\n        /* \"#utility.yul\":3095:3213   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3219:3441   */\n    tag_15:\n        /* \"#utility.yul\":3312:3316   */\n      0x00\n        /* \"#utility.yul\":3350:3352   */\n      0x20\n        /* \"#utility.yul\":3339:3348   */\n      dup3\n        /* \"#utility.yul\":3335:3353   */\n      add\n        /* \"#utility.yul\":3327:3353   */\n      swap1\n      pop\n        /* \"#utility.yul\":3363:3434   */\n      tag_144\n        /* \"#utility.yul\":3431:3432   */\n      0x00\n        /* \"#utility.yul\":3420:3429   */\n      dup4\n        /* \"#utility.yul\":3416:3433   */\n      add\n        /* \"#utility.yul\":3407:3413   */\n      dup5\n        /* \"#utility.yul\":3363:3434   */\n      tag_92\n      jump\t// in\n    tag_144:\n        /* \"#utility.yul\":3219:3441   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3447:3776   */\n    tag_18:\n        /* \"#utility.yul\":3506:3512   */\n      0x00\n        /* \"#utility.yul\":3555:3557   */\n      0x20\n        /* \"#utility.yul\":3543:3552   */\n      dup3\n        /* \"#utility.yul\":3534:3541   */\n      dup5\n        /* \"#utility.yul\":3530:3553   */\n      sub\n        /* \"#utility.yul\":3526:3558   */\n      slt\n        /* \"#utility.yul\":3523:3642   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":3561:3640   */\n      tag_147\n      tag_78\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":3523:3642   */\n    tag_146:\n        /* \"#utility.yul\":3681:3682   */\n      0x00\n        /* \"#utility.yul\":3706:3759   */\n      tag_148\n        /* \"#utility.yul\":3751:3758   */\n      dup5\n        /* \"#utility.yul\":3742:3748   */\n      dup3\n        /* \"#utility.yul\":3731:3740   */\n      dup6\n        /* \"#utility.yul\":3727:3749   */\n      add\n        /* \"#utility.yul\":3706:3759   */\n      tag_83\n      jump\t// in\n    tag_148:\n        /* \"#utility.yul\":3696:3759   */\n      swap2\n      pop\n        /* \"#utility.yul\":3652:3769   */\n      pop\n        /* \"#utility.yul\":3447:3776   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3782:3872   */\n    tag_93:\n        /* \"#utility.yul\":3816:3823   */\n      0x00\n        /* \"#utility.yul\":3859:3864   */\n      dup2\n        /* \"#utility.yul\":3852:3865   */\n      iszero\n        /* \"#utility.yul\":3845:3866   */\n      iszero\n        /* \"#utility.yul\":3834:3866   */\n      swap1\n      pop\n        /* \"#utility.yul\":3782:3872   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3878:3987   */\n    tag_94:\n        /* \"#utility.yul\":3959:3980   */\n      tag_151\n        /* \"#utility.yul\":3974:3979   */\n      dup2\n        /* \"#utility.yul\":3959:3980   */\n      tag_93\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":3954:3957   */\n      dup3\n        /* \"#utility.yul\":3947:3981   */\n      mstore\n        /* \"#utility.yul\":3878:3987   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3993:4203   */\n    tag_21:\n        /* \"#utility.yul\":4080:4084   */\n      0x00\n        /* \"#utility.yul\":4118:4120   */\n      0x20\n        /* \"#utility.yul\":4107:4116   */\n      dup3\n        /* \"#utility.yul\":4103:4121   */\n      add\n        /* \"#utility.yul\":4095:4121   */\n      swap1\n      pop\n        /* \"#utility.yul\":4131:4196   */\n      tag_153\n        /* \"#utility.yul\":4193:4194   */\n      0x00\n        /* \"#utility.yul\":4182:4191   */\n      dup4\n        /* \"#utility.yul\":4178:4195   */\n      add\n        /* \"#utility.yul\":4169:4175   */\n      dup5\n        /* \"#utility.yul\":4131:4196   */\n      tag_94\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":3993:4203   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4209:4269   */\n    tag_95:\n        /* \"#utility.yul\":4237:4240   */\n      0x00\n        /* \"#utility.yul\":4258:4263   */\n      dup2\n        /* \"#utility.yul\":4251:4263   */\n      swap1\n      pop\n        /* \"#utility.yul\":4209:4269   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4275:4417   */\n    tag_96:\n        /* \"#utility.yul\":4325:4334   */\n      0x00\n        /* \"#utility.yul\":4358:4411   */\n      tag_156\n        /* \"#utility.yul\":4376:4410   */\n      tag_157\n        /* \"#utility.yul\":4385:4409   */\n      tag_158\n        /* \"#utility.yul\":4403:4408   */\n      dup5\n        /* \"#utility.yul\":4385:4409   */\n      tag_80\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":4376:4410   */\n      tag_95\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":4358:4411   */\n      tag_80\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":4345:4411   */\n      swap1\n      pop\n        /* \"#utility.yul\":4275:4417   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4423:4549   */\n    tag_97:\n        /* \"#utility.yul\":4473:4482   */\n      0x00\n        /* \"#utility.yul\":4506:4543   */\n      tag_160\n        /* \"#utility.yul\":4537:4542   */\n      dup3\n        /* \"#utility.yul\":4506:4543   */\n      tag_96\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":4493:4543   */\n      swap1\n      pop\n        /* \"#utility.yul\":4423:4549   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4555:4695   */\n    tag_98:\n        /* \"#utility.yul\":4619:4628   */\n      0x00\n        /* \"#utility.yul\":4652:4689   */\n      tag_162\n        /* \"#utility.yul\":4683:4688   */\n      dup3\n        /* \"#utility.yul\":4652:4689   */\n      tag_97\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":4639:4689   */\n      swap1\n      pop\n        /* \"#utility.yul\":4555:4695   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4701:4860   */\n    tag_99:\n        /* \"#utility.yul\":4802:4853   */\n      tag_164\n        /* \"#utility.yul\":4847:4852   */\n      dup2\n        /* \"#utility.yul\":4802:4853   */\n      tag_98\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":4797:4800   */\n      dup3\n        /* \"#utility.yul\":4790:4854   */\n      mstore\n        /* \"#utility.yul\":4701:4860   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4866:5116   */\n    tag_25:\n        /* \"#utility.yul\":4973:4977   */\n      0x00\n        /* \"#utility.yul\":5011:5013   */\n      0x20\n        /* \"#utility.yul\":5000:5009   */\n      dup3\n        /* \"#utility.yul\":4996:5014   */\n      add\n        /* \"#utility.yul\":4988:5014   */\n      swap1\n      pop\n        /* \"#utility.yul\":5024:5109   */\n      tag_166\n        /* \"#utility.yul\":5106:5107   */\n      0x00\n        /* \"#utility.yul\":5095:5104   */\n      dup4\n        /* \"#utility.yul\":5091:5108   */\n      add\n        /* \"#utility.yul\":5082:5088   */\n      dup5\n        /* \"#utility.yul\":5024:5109   */\n      tag_99\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":4866:5116   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5122:5451   */\n    tag_28:\n        /* \"#utility.yul\":5181:5187   */\n      0x00\n        /* \"#utility.yul\":5230:5232   */\n      0x20\n        /* \"#utility.yul\":5218:5227   */\n      dup3\n        /* \"#utility.yul\":5209:5216   */\n      dup5\n        /* \"#utility.yul\":5205:5228   */\n      sub\n        /* \"#utility.yul\":5201:5233   */\n      slt\n        /* \"#utility.yul\":5198:5317   */\n      iszero\n      tag_168\n      jumpi\n        /* \"#utility.yul\":5236:5315   */\n      tag_169\n      tag_78\n      jump\t// in\n    tag_169:\n        /* \"#utility.yul\":5198:5317   */\n    tag_168:\n        /* \"#utility.yul\":5356:5357   */\n      0x00\n        /* \"#utility.yul\":5381:5434   */\n      tag_170\n        /* \"#utility.yul\":5426:5433   */\n      dup5\n        /* \"#utility.yul\":5417:5423   */\n      dup3\n        /* \"#utility.yul\":5406:5415   */\n      dup6\n        /* \"#utility.yul\":5402:5424   */\n      add\n        /* \"#utility.yul\":5381:5434   */\n      tag_86\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":5371:5434   */\n      swap2\n      pop\n        /* \"#utility.yul\":5327:5444   */\n      pop\n        /* \"#utility.yul\":5122:5451   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5457:5575   */\n    tag_100:\n        /* \"#utility.yul\":5544:5568   */\n      tag_172\n        /* \"#utility.yul\":5562:5567   */\n      dup2\n        /* \"#utility.yul\":5544:5568   */\n      tag_81\n      jump\t// in\n    tag_172:\n        /* \"#utility.yul\":5539:5542   */\n      dup3\n        /* \"#utility.yul\":5532:5569   */\n      mstore\n        /* \"#utility.yul\":5457:5575   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5581:5803   */\n    tag_31:\n        /* \"#utility.yul\":5674:5678   */\n      0x00\n        /* \"#utility.yul\":5712:5714   */\n      0x20\n        /* \"#utility.yul\":5701:5710   */\n      dup3\n        /* \"#utility.yul\":5697:5715   */\n      add\n        /* \"#utility.yul\":5689:5715   */\n      swap1\n      pop\n        /* \"#utility.yul\":5725:5796   */\n      tag_174\n        /* \"#utility.yul\":5793:5794   */\n      0x00\n        /* \"#utility.yul\":5782:5791   */\n      dup4\n        /* \"#utility.yul\":5778:5795   */\n      add\n        /* \"#utility.yul\":5769:5775   */\n      dup5\n        /* \"#utility.yul\":5725:5796   */\n      tag_100\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":5581:5803   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5809:5927   */\n    tag_101:\n        /* \"#utility.yul\":5896:5920   */\n      tag_176\n        /* \"#utility.yul\":5914:5919   */\n      dup2\n        /* \"#utility.yul\":5896:5920   */\n      tag_84\n      jump\t// in\n    tag_176:\n        /* \"#utility.yul\":5891:5894   */\n      dup3\n        /* \"#utility.yul\":5884:5921   */\n      mstore\n        /* \"#utility.yul\":5809:5927   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5933:6265   */\n    tag_35:\n        /* \"#utility.yul\":6054:6058   */\n      0x00\n        /* \"#utility.yul\":6092:6094   */\n      0x40\n        /* \"#utility.yul\":6081:6090   */\n      dup3\n        /* \"#utility.yul\":6077:6095   */\n      add\n        /* \"#utility.yul\":6069:6095   */\n      swap1\n      pop\n        /* \"#utility.yul\":6105:6176   */\n      tag_178\n        /* \"#utility.yul\":6173:6174   */\n      0x00\n        /* \"#utility.yul\":6162:6171   */\n      dup4\n        /* \"#utility.yul\":6158:6175   */\n      add\n        /* \"#utility.yul\":6149:6155   */\n      dup6\n        /* \"#utility.yul\":6105:6176   */\n      tag_100\n      jump\t// in\n    tag_178:\n        /* \"#utility.yul\":6186:6258   */\n      tag_179\n        /* \"#utility.yul\":6254:6256   */\n      0x20\n        /* \"#utility.yul\":6243:6252   */\n      dup4\n        /* \"#utility.yul\":6239:6257   */\n      add\n        /* \"#utility.yul\":6230:6236   */\n      dup5\n        /* \"#utility.yul\":6186:6258   */\n      tag_101\n      jump\t// in\n    tag_179:\n        /* \"#utility.yul\":5933:6265   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6271:6350   */\n    tag_102:\n        /* \"#utility.yul\":6310:6317   */\n      0x00\n        /* \"#utility.yul\":6339:6344   */\n      dup2\n        /* \"#utility.yul\":6328:6344   */\n      swap1\n      pop\n        /* \"#utility.yul\":6271:6350   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6356:6513   */\n    tag_103:\n        /* \"#utility.yul\":6461:6506   */\n      tag_182\n        /* \"#utility.yul\":6481:6505   */\n      tag_183\n        /* \"#utility.yul\":6499:6504   */\n      dup3\n        /* \"#utility.yul\":6481:6505   */\n      tag_91\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":6461:6506   */\n      tag_102\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":6456:6459   */\n      dup3\n        /* \"#utility.yul\":6449:6507   */\n      mstore\n        /* \"#utility.yul\":6356:6513   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6519:6775   */\n    tag_37:\n        /* \"#utility.yul\":6631:6634   */\n      0x00\n        /* \"#utility.yul\":6646:6721   */\n      tag_185\n        /* \"#utility.yul\":6717:6720   */\n      dup3\n        /* \"#utility.yul\":6708:6714   */\n      dup5\n        /* \"#utility.yul\":6646:6721   */\n      tag_103\n      jump\t// in\n    tag_185:\n        /* \"#utility.yul\":6746:6748   */\n      0x20\n        /* \"#utility.yul\":6741:6744   */\n      dup3\n        /* \"#utility.yul\":6737:6749   */\n      add\n        /* \"#utility.yul\":6730:6749   */\n      swap2\n      pop\n        /* \"#utility.yul\":6766:6769   */\n      dup2\n        /* \"#utility.yul\":6759:6769   */\n      swap1\n      pop\n        /* \"#utility.yul\":6519:6775   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6781:6961   */\n    tag_62:\n        /* \"#utility.yul\":6829:6906   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6826:6827   */\n      0x00\n        /* \"#utility.yul\":6819:6907   */\n      mstore\n        /* \"#utility.yul\":6926:6930   */\n      0x32\n        /* \"#utility.yul\":6923:6924   */\n      0x04\n        /* \"#utility.yul\":6916:6931   */\n      mstore\n        /* \"#utility.yul\":6950:6954   */\n      0x24\n        /* \"#utility.yul\":6947:6948   */\n      0x00\n        /* \"#utility.yul\":6940:6955   */\n      revert\n\n    auxdata: 0xa26469706673582212202309e96629ac95efe75618452771002e02ff5bc35dedcdc6591d71e6a34bfd3664736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1806": {
									"entryPoint": null,
									"id": 1806,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_t_bytes32_fromMemory": {
									"entryPoint": 151,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_contract$_IERC20_$167_fromMemory": {
									"entryPoint": 258,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_contract$_IERC20_$167_fromMemory": {
									"entryPoint": 278,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 202,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 120,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_contract$_IERC20_$167": {
									"entryPoint": 219,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 171,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 116,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 129,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_contract$_IERC20_$167": {
									"entryPoint": 236,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:1915:9",
										"nodeType": "YulBlock",
										"src": "0:1915:9",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:9",
													"nodeType": "YulBlock",
													"src": "47:35:9",
													"statements": [
														{
															"nativeSrc": "57:19:9",
															"nodeType": "YulAssignment",
															"src": "57:19:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:9",
																		"nodeType": "YulLiteral",
																		"src": "73:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:9"
																},
																"nativeSrc": "67:9:9",
																"nodeType": "YulFunctionCall",
																"src": "67:9:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:9"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:9",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:9",
														"nodeType": "YulTypedName",
														"src": "40:6:9",
														"type": ""
													}
												],
												"src": "7:75:9"
											},
											{
												"body": {
													"nativeSrc": "177:28:9",
													"nodeType": "YulBlock",
													"src": "177:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:9",
																		"nodeType": "YulLiteral",
																		"src": "194:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:9",
																		"nodeType": "YulLiteral",
																		"src": "197:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:9"
																},
																"nativeSrc": "187:12:9",
																"nodeType": "YulFunctionCall",
																"src": "187:12:9"
															},
															"nativeSrc": "187:12:9",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:9"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:9",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:9"
											},
											{
												"body": {
													"nativeSrc": "300:28:9",
													"nodeType": "YulBlock",
													"src": "300:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:9",
																		"nodeType": "YulLiteral",
																		"src": "317:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:9",
																		"nodeType": "YulLiteral",
																		"src": "320:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:9"
																},
																"nativeSrc": "310:12:9",
																"nodeType": "YulFunctionCall",
																"src": "310:12:9"
															},
															"nativeSrc": "310:12:9",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:9"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:9",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:9"
											},
											{
												"body": {
													"nativeSrc": "379:32:9",
													"nodeType": "YulBlock",
													"src": "379:32:9",
													"statements": [
														{
															"nativeSrc": "389:16:9",
															"nodeType": "YulAssignment",
															"src": "389:16:9",
															"value": {
																"name": "value",
																"nativeSrc": "400:5:9",
																"nodeType": "YulIdentifier",
																"src": "400:5:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nativeSrc": "334:77:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:9",
														"nodeType": "YulTypedName",
														"src": "361:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:9",
														"nodeType": "YulTypedName",
														"src": "371:7:9",
														"type": ""
													}
												],
												"src": "334:77:9"
											},
											{
												"body": {
													"nativeSrc": "460:79:9",
													"nodeType": "YulBlock",
													"src": "460:79:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "517:16:9",
																"nodeType": "YulBlock",
																"src": "517:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "526:1:9",
																					"nodeType": "YulLiteral",
																					"src": "526:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "529:1:9",
																					"nodeType": "YulLiteral",
																					"src": "529:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "519:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "519:6:9"
																			},
																			"nativeSrc": "519:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "519:12:9"
																		},
																		"nativeSrc": "519:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "519:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "483:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "483:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "508:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "508:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nativeSrc": "490:17:9",
																					"nodeType": "YulIdentifier",
																					"src": "490:17:9"
																				},
																				"nativeSrc": "490:24:9",
																				"nodeType": "YulFunctionCall",
																				"src": "490:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "480:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "480:2:9"
																		},
																		"nativeSrc": "480:35:9",
																		"nodeType": "YulFunctionCall",
																		"src": "480:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "473:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "473:6:9"
																},
																"nativeSrc": "473:43:9",
																"nodeType": "YulFunctionCall",
																"src": "473:43:9"
															},
															"nativeSrc": "470:63:9",
															"nodeType": "YulIf",
															"src": "470:63:9"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nativeSrc": "417:122:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "453:5:9",
														"nodeType": "YulTypedName",
														"src": "453:5:9",
														"type": ""
													}
												],
												"src": "417:122:9"
											},
											{
												"body": {
													"nativeSrc": "608:80:9",
													"nodeType": "YulBlock",
													"src": "608:80:9",
													"statements": [
														{
															"nativeSrc": "618:22:9",
															"nodeType": "YulAssignment",
															"src": "618:22:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "633:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "633:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "627:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "627:5:9"
																},
																"nativeSrc": "627:13:9",
																"nodeType": "YulFunctionCall",
																"src": "627:13:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "618:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "618:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "676:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "676:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nativeSrc": "649:26:9",
																	"nodeType": "YulIdentifier",
																	"src": "649:26:9"
																},
																"nativeSrc": "649:33:9",
																"nodeType": "YulFunctionCall",
																"src": "649:33:9"
															},
															"nativeSrc": "649:33:9",
															"nodeType": "YulExpressionStatement",
															"src": "649:33:9"
														}
													]
												},
												"name": "abi_decode_t_bytes32_fromMemory",
												"nativeSrc": "545:143:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "586:6:9",
														"nodeType": "YulTypedName",
														"src": "586:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "594:3:9",
														"nodeType": "YulTypedName",
														"src": "594:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "602:5:9",
														"nodeType": "YulTypedName",
														"src": "602:5:9",
														"type": ""
													}
												],
												"src": "545:143:9"
											},
											{
												"body": {
													"nativeSrc": "739:81:9",
													"nodeType": "YulBlock",
													"src": "739:81:9",
													"statements": [
														{
															"nativeSrc": "749:65:9",
															"nodeType": "YulAssignment",
															"src": "749:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "764:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "764:5:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "771:42:9",
																		"nodeType": "YulLiteral",
																		"src": "771:42:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "760:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "760:3:9"
																},
																"nativeSrc": "760:54:9",
																"nodeType": "YulFunctionCall",
																"src": "760:54:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "749:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "749:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "694:126:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "721:5:9",
														"nodeType": "YulTypedName",
														"src": "721:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "731:7:9",
														"nodeType": "YulTypedName",
														"src": "731:7:9",
														"type": ""
													}
												],
												"src": "694:126:9"
											},
											{
												"body": {
													"nativeSrc": "871:51:9",
													"nodeType": "YulBlock",
													"src": "871:51:9",
													"statements": [
														{
															"nativeSrc": "881:35:9",
															"nodeType": "YulAssignment",
															"src": "881:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "910:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "910:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "892:17:9",
																	"nodeType": "YulIdentifier",
																	"src": "892:17:9"
																},
																"nativeSrc": "892:24:9",
																"nodeType": "YulFunctionCall",
																"src": "892:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "881:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "881:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "826:96:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "853:5:9",
														"nodeType": "YulTypedName",
														"src": "853:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "863:7:9",
														"nodeType": "YulTypedName",
														"src": "863:7:9",
														"type": ""
													}
												],
												"src": "826:96:9"
											},
											{
												"body": {
													"nativeSrc": "987:51:9",
													"nodeType": "YulBlock",
													"src": "987:51:9",
													"statements": [
														{
															"nativeSrc": "997:35:9",
															"nodeType": "YulAssignment",
															"src": "997:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1026:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "1026:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_address",
																	"nativeSrc": "1008:17:9",
																	"nodeType": "YulIdentifier",
																	"src": "1008:17:9"
																},
																"nativeSrc": "1008:24:9",
																"nodeType": "YulFunctionCall",
																"src": "1008:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "997:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "997:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_contract$_IERC20_$167",
												"nativeSrc": "928:110:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "969:5:9",
														"nodeType": "YulTypedName",
														"src": "969:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "979:7:9",
														"nodeType": "YulTypedName",
														"src": "979:7:9",
														"type": ""
													}
												],
												"src": "928:110:9"
											},
											{
												"body": {
													"nativeSrc": "1101:93:9",
													"nodeType": "YulBlock",
													"src": "1101:93:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "1172:16:9",
																"nodeType": "YulBlock",
																"src": "1172:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1181:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1181:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1184:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1184:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1174:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "1174:6:9"
																			},
																			"nativeSrc": "1174:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1174:12:9"
																		},
																		"nativeSrc": "1174:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1174:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1124:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "1124:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1163:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "1163:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_contract$_IERC20_$167",
																					"nativeSrc": "1131:31:9",
																					"nodeType": "YulIdentifier",
																					"src": "1131:31:9"
																				},
																				"nativeSrc": "1131:38:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1131:38:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1121:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "1121:2:9"
																		},
																		"nativeSrc": "1121:49:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1121:49:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1114:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1114:6:9"
																},
																"nativeSrc": "1114:57:9",
																"nodeType": "YulFunctionCall",
																"src": "1114:57:9"
															},
															"nativeSrc": "1111:77:9",
															"nodeType": "YulIf",
															"src": "1111:77:9"
														}
													]
												},
												"name": "validator_revert_t_contract$_IERC20_$167",
												"nativeSrc": "1044:150:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1094:5:9",
														"nodeType": "YulTypedName",
														"src": "1094:5:9",
														"type": ""
													}
												],
												"src": "1044:150:9"
											},
											{
												"body": {
													"nativeSrc": "1277:94:9",
													"nodeType": "YulBlock",
													"src": "1277:94:9",
													"statements": [
														{
															"nativeSrc": "1287:22:9",
															"nodeType": "YulAssignment",
															"src": "1287:22:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1302:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "1302:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1296:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "1296:5:9"
																},
																"nativeSrc": "1296:13:9",
																"nodeType": "YulFunctionCall",
																"src": "1296:13:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1287:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "1287:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1359:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "1359:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_contract$_IERC20_$167",
																	"nativeSrc": "1318:40:9",
																	"nodeType": "YulIdentifier",
																	"src": "1318:40:9"
																},
																"nativeSrc": "1318:47:9",
																"nodeType": "YulFunctionCall",
																"src": "1318:47:9"
															},
															"nativeSrc": "1318:47:9",
															"nodeType": "YulExpressionStatement",
															"src": "1318:47:9"
														}
													]
												},
												"name": "abi_decode_t_contract$_IERC20_$167_fromMemory",
												"nativeSrc": "1200:171:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1255:6:9",
														"nodeType": "YulTypedName",
														"src": "1255:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1263:3:9",
														"nodeType": "YulTypedName",
														"src": "1263:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1271:5:9",
														"nodeType": "YulTypedName",
														"src": "1271:5:9",
														"type": ""
													}
												],
												"src": "1200:171:9"
											},
											{
												"body": {
													"nativeSrc": "1485:427:9",
													"nodeType": "YulBlock",
													"src": "1485:427:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "1531:83:9",
																"nodeType": "YulBlock",
																"src": "1531:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "1533:77:9",
																				"nodeType": "YulIdentifier",
																				"src": "1533:77:9"
																			},
																			"nativeSrc": "1533:79:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1533:79:9"
																		},
																		"nativeSrc": "1533:79:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1533:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1506:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "1506:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1515:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "1515:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1502:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1502:3:9"
																		},
																		"nativeSrc": "1502:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1502:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1527:2:9",
																		"nodeType": "YulLiteral",
																		"src": "1527:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1498:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1498:3:9"
																},
																"nativeSrc": "1498:32:9",
																"nodeType": "YulFunctionCall",
																"src": "1498:32:9"
															},
															"nativeSrc": "1495:119:9",
															"nodeType": "YulIf",
															"src": "1495:119:9"
														},
														{
															"nativeSrc": "1624:128:9",
															"nodeType": "YulBlock",
															"src": "1624:128:9",
															"statements": [
																{
																	"nativeSrc": "1639:15:9",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1639:15:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1653:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1653:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1643:6:9",
																			"nodeType": "YulTypedName",
																			"src": "1643:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1668:74:9",
																	"nodeType": "YulAssignment",
																	"src": "1668:74:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1714:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "1714:9:9"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1725:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "1725:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1710:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "1710:3:9"
																				},
																				"nativeSrc": "1710:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1710:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1734:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "1734:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32_fromMemory",
																			"nativeSrc": "1678:31:9",
																			"nodeType": "YulIdentifier",
																			"src": "1678:31:9"
																		},
																		"nativeSrc": "1678:64:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1678:64:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1668:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "1668:6:9"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "1762:143:9",
															"nodeType": "YulBlock",
															"src": "1762:143:9",
															"statements": [
																{
																	"nativeSrc": "1777:16:9",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1777:16:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1791:2:9",
																		"nodeType": "YulLiteral",
																		"src": "1791:2:9",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1781:6:9",
																			"nodeType": "YulTypedName",
																			"src": "1781:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1807:88:9",
																	"nodeType": "YulAssignment",
																	"src": "1807:88:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1867:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "1867:9:9"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1878:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "1878:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1863:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "1863:3:9"
																				},
																				"nativeSrc": "1863:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1863:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1887:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "1887:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_contract$_IERC20_$167_fromMemory",
																			"nativeSrc": "1817:45:9",
																			"nodeType": "YulIdentifier",
																			"src": "1817:45:9"
																		},
																		"nativeSrc": "1817:78:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1817:78:9"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "1807:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "1807:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_contract$_IERC20_$167_fromMemory",
												"nativeSrc": "1377:535:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1447:9:9",
														"nodeType": "YulTypedName",
														"src": "1447:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1458:7:9",
														"nodeType": "YulTypedName",
														"src": "1458:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1470:6:9",
														"nodeType": "YulTypedName",
														"src": "1470:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1478:6:9",
														"nodeType": "YulTypedName",
														"src": "1478:6:9",
														"type": ""
													}
												],
												"src": "1377:535:9"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_IERC20_$167(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_IERC20_$167(value) {\n        if iszero(eq(value, cleanup_t_contract$_IERC20_$167(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_IERC20_$167_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_contract$_IERC20_$167(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_contract$_IERC20_$167_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_contract$_IERC20_$167_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561000f575f5ffd5b50604051610adb380380610adb83398181016040528101906100319190610116565b81608081815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050610154565b5f5ffd5b5f819050919050565b61008a81610078565b8114610094575f5ffd5b50565b5f815190506100a581610081565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100d4826100ab565b9050919050565b5f6100e5826100ca565b9050919050565b6100f5816100db565b81146100ff575f5ffd5b50565b5f81519050610110816100ec565b92915050565b5f5f6040838503121561012c5761012b610074565b5b5f61013985828601610097565b925050602061014a85828601610102565b9150509250929050565b60805160a0516109586101835f395f818161031901526103ab01525f818161022a015261036701526109585ff3fe608060405234801561000f575f5ffd5b5060043610610055575f3560e01c80633d13f8741461005957806349590657146100755780634a5aae37146100935780635d70fa3c146100c357806399ae559d146100e1575b5f5ffd5b610073600480360381019061006e91906106be565b610111565b005b61007d610364565b60405161008a9190610747565b60405180910390f35b6100ad60048036038101906100a89190610760565b61038b565b6040516100ba91906107a5565b60405180910390f35b6100cb6103a8565b6040516100d89190610819565b60405180910390f35b6100fb60048036038101906100f69190610832565b6103cf565b604051610108919061086c565b60405180910390f35b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610192576040517f1ac2170b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f84846040516020016101a6929190610894565b604051602081830303815290604052805190602001206040516020016101cc91906108db565b60405160208183030381529060405280519060200120905061024f8383808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f820116905080830192505050505050507f000000000000000000000000000000000000000000000000000000000000000083610409565b610285576040517faa894afb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055507f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4858560405161030a929190610894565b60405180910390a161035d85857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661041f9092919063ffffffff16565b5050505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b6001602052805f5260405f205f915054906101000a900460ff1681565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f81815481106103dd575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f82610415858461049e565b1490509392505050565b610499838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610452929190610894565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104ef565b505050565b5f5f8290505f5f90505b84518110156104e4576104d5828683815181106104c8576104c76108f5565b5b602002602001015161058a565b915080806001019150506104a8565b508091505092915050565b5f5f60205f8451602086015f885af18061050e576040513d5f823e3d81fd5b3d92505f519150505f8214610527576001811415610542565b5f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561058457836040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161057b919061086c565b60405180910390fd5b50505050565b5f8183106105a15761059c82846105b4565b6105ac565b6105ab83836105b4565b5b905092915050565b5f825f528160205260405f20905092915050565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105f9826105d0565b9050919050565b610609816105ef565b8114610613575f5ffd5b50565b5f8135905061062481610600565b92915050565b5f819050919050565b61063c8161062a565b8114610646575f5ffd5b50565b5f8135905061065781610633565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261067e5761067d61065d565b5b8235905067ffffffffffffffff81111561069b5761069a610661565b5b6020830191508360208202830111156106b7576106b6610665565b5b9250929050565b5f5f5f5f606085870312156106d6576106d56105c8565b5b5f6106e387828801610616565b94505060206106f487828801610649565b935050604085013567ffffffffffffffff811115610715576107146105cc565b5b61072187828801610669565b925092505092959194509250565b5f819050919050565b6107418161072f565b82525050565b5f60208201905061075a5f830184610738565b92915050565b5f60208284031215610775576107746105c8565b5b5f61078284828501610616565b91505092915050565b5f8115159050919050565b61079f8161078b565b82525050565b5f6020820190506107b85f830184610796565b92915050565b5f819050919050565b5f6107e16107dc6107d7846105d0565b6107be565b6105d0565b9050919050565b5f6107f2826107c7565b9050919050565b5f610803826107e8565b9050919050565b610813816107f9565b82525050565b5f60208201905061082c5f83018461080a565b92915050565b5f60208284031215610847576108466105c8565b5b5f61085484828501610649565b91505092915050565b610866816105ef565b82525050565b5f60208201905061087f5f83018461085d565b92915050565b61088e8161062a565b82525050565b5f6040820190506108a75f83018561085d565b6108b46020830184610885565b9392505050565b5f819050919050565b6108d56108d08261072f565b6108bb565b82525050565b5f6108e682846108c4565b60208201915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212202309e96629ac95efe75618452771002e02ff5bc35dedcdc6591d71e6a34bfd3664736f6c634300081e0033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xADB CODESIZE SUB DUP1 PUSH2 0xADB DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x31 SWAP2 SWAP1 PUSH2 0x116 JUMP JUMPDEST DUP2 PUSH1 0x80 DUP2 DUP2 MSTORE POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP PUSH2 0x154 JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8A DUP2 PUSH2 0x78 JUMP JUMPDEST DUP2 EQ PUSH2 0x94 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0xA5 DUP2 PUSH2 0x81 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xD4 DUP3 PUSH2 0xAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xE5 DUP3 PUSH2 0xCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF5 DUP2 PUSH2 0xDB JUMP JUMPDEST DUP2 EQ PUSH2 0xFF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x110 DUP2 PUSH2 0xEC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12C JUMPI PUSH2 0x12B PUSH2 0x74 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x139 DUP6 DUP3 DUP7 ADD PUSH2 0x97 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x14A DUP6 DUP3 DUP7 ADD PUSH2 0x102 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x958 PUSH2 0x183 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x319 ADD MSTORE PUSH2 0x3AB ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x22A ADD MSTORE PUSH2 0x367 ADD MSTORE PUSH2 0x958 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3D13F874 EQ PUSH2 0x59 JUMPI DUP1 PUSH4 0x49590657 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x4A5AAE37 EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0x5D70FA3C EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x99AE559D EQ PUSH2 0xE1 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x73 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6E SWAP2 SWAP1 PUSH2 0x6BE JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7D PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8A SWAP2 SWAP1 PUSH2 0x747 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x760 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0x7A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCB PUSH2 0x3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0x819 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x832 JUMP JUMPDEST PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108 SWAP2 SWAP1 PUSH2 0x86C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x192 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1AC2170B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A6 SWAP3 SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CC SWAP2 SWAP1 PUSH2 0x8DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x24F DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH32 0x0 DUP4 PUSH2 0x409 JUMP JUMPDEST PUSH2 0x285 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAA894AFB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x30A SWAP3 SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x35D DUP6 DUP6 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x41F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3DD JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x415 DUP6 DUP5 PUSH2 0x49E JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x499 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x452 SWAP3 SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4EF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH0 DUP3 SWAP1 POP PUSH0 PUSH0 SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x4E4 JUMPI PUSH2 0x4D5 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C8 JUMPI PUSH2 0x4C7 PUSH2 0x8F5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x58A JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4A8 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 PUSH0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH0 DUP9 GAS CALL DUP1 PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST RETURNDATASIZE SWAP3 POP PUSH0 MLOAD SWAP2 POP POP PUSH0 DUP3 EQ PUSH2 0x527 JUMPI PUSH1 0x1 DUP2 EQ ISZERO PUSH2 0x542 JUMP JUMPDEST PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x584 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57B SWAP2 SWAP1 PUSH2 0x86C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x5A1 JUMPI PUSH2 0x59C DUP3 DUP5 PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST PUSH2 0x5AB DUP4 DUP4 PUSH2 0x5B4 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x5F9 DUP3 PUSH2 0x5D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x609 DUP2 PUSH2 0x5EF JUMP JUMPDEST DUP2 EQ PUSH2 0x613 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x624 DUP2 PUSH2 0x600 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x63C DUP2 PUSH2 0x62A JUMP JUMPDEST DUP2 EQ PUSH2 0x646 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x657 DUP2 PUSH2 0x633 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x67E JUMPI PUSH2 0x67D PUSH2 0x65D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x69B JUMPI PUSH2 0x69A PUSH2 0x661 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x6B7 JUMPI PUSH2 0x6B6 PUSH2 0x665 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6D6 JUMPI PUSH2 0x6D5 PUSH2 0x5C8 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x6E3 DUP8 DUP3 DUP9 ADD PUSH2 0x616 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x6F4 DUP8 DUP3 DUP9 ADD PUSH2 0x649 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x715 JUMPI PUSH2 0x714 PUSH2 0x5CC JUMP JUMPDEST JUMPDEST PUSH2 0x721 DUP8 DUP3 DUP9 ADD PUSH2 0x669 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x741 DUP2 PUSH2 0x72F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x75A PUSH0 DUP4 ADD DUP5 PUSH2 0x738 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x775 JUMPI PUSH2 0x774 PUSH2 0x5C8 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x782 DUP5 DUP3 DUP6 ADD PUSH2 0x616 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x79F DUP2 PUSH2 0x78B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7B8 PUSH0 DUP4 ADD DUP5 PUSH2 0x796 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x7E1 PUSH2 0x7DC PUSH2 0x7D7 DUP5 PUSH2 0x5D0 JUMP JUMPDEST PUSH2 0x7BE JUMP JUMPDEST PUSH2 0x5D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x7F2 DUP3 PUSH2 0x7C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x803 DUP3 PUSH2 0x7E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x813 DUP2 PUSH2 0x7F9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x82C PUSH0 DUP4 ADD DUP5 PUSH2 0x80A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x847 JUMPI PUSH2 0x846 PUSH2 0x5C8 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x854 DUP5 DUP3 DUP6 ADD PUSH2 0x649 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x866 DUP2 PUSH2 0x5EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x87F PUSH0 DUP4 ADD DUP5 PUSH2 0x85D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x88E DUP2 PUSH2 0x62A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x8A7 PUSH0 DUP4 ADD DUP6 PUSH2 0x85D JUMP JUMPDEST PUSH2 0x8B4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x885 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8D5 PUSH2 0x8D0 DUP3 PUSH2 0x72F JUMP JUMPDEST PUSH2 0x8BB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x8E6 DUP3 DUP5 PUSH2 0x8C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 MULMOD 0xE9 PUSH7 0x29AC95EFE75618 GASLIMIT 0x27 PUSH18 0x2E02FF5BC35DEDCDC6591D71E6A34BFD36 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "242:1342:8:-:0;;;658:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;738:11;723:26;;;;;;777:13;760:30;;;;;;;;;;658:140;;242:1342;;88:117:9;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:143::-;602:5;633:6;627:13;618:22;;649:33;676:5;649:33;:::i;:::-;545:143;;;;:::o;694:126::-;731:7;771:42;764:5;760:54;749:65;;694:126;;;:::o;826:96::-;863:7;892:24;910:5;892:24;:::i;:::-;881:35;;826:96;;;:::o;928:110::-;979:7;1008:24;1026:5;1008:24;:::i;:::-;997:35;;928:110;;;:::o;1044:150::-;1131:38;1163:5;1131:38;:::i;:::-;1124:5;1121:49;1111:77;;1184:1;1181;1174:12;1111:77;1044:150;:::o;1200:171::-;1271:5;1302:6;1296:13;1287:22;;1318:47;1359:5;1318:47;:::i;:::-;1200:171;;;;:::o;1377:535::-;1470:6;1478;1527:2;1515:9;1506:7;1502:23;1498:32;1495:119;;;1533:79;;:::i;:::-;1495:119;1653:1;1678:64;1734:7;1725:6;1714:9;1710:22;1678:64;:::i;:::-;1668:74;;1624:128;1791:2;1817:78;1887:7;1878:6;1867:9;1863:22;1817:78;:::i;:::-;1807:88;;1762:143;1377:535;;;;;:::o;242:1342:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_callOptionalReturn_589": {
									"entryPoint": 1263,
									"id": 589,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@claim_1871": {
									"entryPoint": 273,
									"id": 1871,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@claimers_1780": {
									"entryPoint": 975,
									"id": 1780,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@commutativeKeccak256_658": {
									"entryPoint": 1418,
									"id": 658,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@efficientKeccak256_670": {
									"entryPoint": 1460,
									"id": 670,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getAirdroptoken_1888": {
									"entryPoint": 936,
									"id": 1888,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getMerkleRoot_1879": {
									"entryPoint": 868,
									"id": 1879,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@processProof_741": {
									"entryPoint": 1182,
									"id": 741,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@s_hasClaimed_1789": {
									"entryPoint": 907,
									"id": 1789,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransfer_212": {
									"entryPoint": 1055,
									"id": 212,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@verify_700": {
									"entryPoint": 1033,
									"id": 700,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 1558,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 1641,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_t_uint256": {
									"entryPoint": 1609,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1888,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 1726,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 2098,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 2141,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 1942,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 1848,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack": {
									"entryPoint": 2244,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_IERC20_$167_to_t_address_fromStack": {
									"entryPoint": 2058,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 2181,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 2267,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 2156,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 2196,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 1957,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": 1863,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$167__to_t_address__fromStack_reversed": {
									"entryPoint": 2073,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 1519,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 1931,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 1839,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1488,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1578,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IERC20_$167_to_t_address": {
									"entryPoint": 2041,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 2024,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 1991,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 1982,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"leftAlign_t_bytes32": {
									"entryPoint": 2235,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 2293,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490": {
									"entryPoint": 1633,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 1629,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
									"entryPoint": 1637,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 1484,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1480,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 1536,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 1587,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:6964:9",
										"nodeType": "YulBlock",
										"src": "0:6964:9",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:9",
													"nodeType": "YulBlock",
													"src": "47:35:9",
													"statements": [
														{
															"nativeSrc": "57:19:9",
															"nodeType": "YulAssignment",
															"src": "57:19:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:9",
																		"nodeType": "YulLiteral",
																		"src": "73:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:9"
																},
																"nativeSrc": "67:9:9",
																"nodeType": "YulFunctionCall",
																"src": "67:9:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:9"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:9",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:9",
														"nodeType": "YulTypedName",
														"src": "40:6:9",
														"type": ""
													}
												],
												"src": "7:75:9"
											},
											{
												"body": {
													"nativeSrc": "177:28:9",
													"nodeType": "YulBlock",
													"src": "177:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:9",
																		"nodeType": "YulLiteral",
																		"src": "194:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:9",
																		"nodeType": "YulLiteral",
																		"src": "197:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:9"
																},
																"nativeSrc": "187:12:9",
																"nodeType": "YulFunctionCall",
																"src": "187:12:9"
															},
															"nativeSrc": "187:12:9",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:9"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:9",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:9"
											},
											{
												"body": {
													"nativeSrc": "300:28:9",
													"nodeType": "YulBlock",
													"src": "300:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:9",
																		"nodeType": "YulLiteral",
																		"src": "317:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:9",
																		"nodeType": "YulLiteral",
																		"src": "320:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:9"
																},
																"nativeSrc": "310:12:9",
																"nodeType": "YulFunctionCall",
																"src": "310:12:9"
															},
															"nativeSrc": "310:12:9",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:9"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:9",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:9"
											},
											{
												"body": {
													"nativeSrc": "379:81:9",
													"nodeType": "YulBlock",
													"src": "379:81:9",
													"statements": [
														{
															"nativeSrc": "389:65:9",
															"nodeType": "YulAssignment",
															"src": "389:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:9",
																		"nodeType": "YulLiteral",
																		"src": "411:42:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:9"
																},
																"nativeSrc": "400:54:9",
																"nodeType": "YulFunctionCall",
																"src": "400:54:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:9",
														"nodeType": "YulTypedName",
														"src": "361:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:9",
														"nodeType": "YulTypedName",
														"src": "371:7:9",
														"type": ""
													}
												],
												"src": "334:126:9"
											},
											{
												"body": {
													"nativeSrc": "511:51:9",
													"nodeType": "YulBlock",
													"src": "511:51:9",
													"statements": [
														{
															"nativeSrc": "521:35:9",
															"nodeType": "YulAssignment",
															"src": "521:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:9",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:9"
																},
																"nativeSrc": "532:24:9",
																"nodeType": "YulFunctionCall",
																"src": "532:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:9",
														"nodeType": "YulTypedName",
														"src": "493:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:9",
														"nodeType": "YulTypedName",
														"src": "503:7:9",
														"type": ""
													}
												],
												"src": "466:96:9"
											},
											{
												"body": {
													"nativeSrc": "611:79:9",
													"nodeType": "YulBlock",
													"src": "611:79:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:9",
																"nodeType": "YulBlock",
																"src": "668:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:9",
																					"nodeType": "YulLiteral",
																					"src": "677:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:9",
																					"nodeType": "YulLiteral",
																					"src": "680:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:9"
																			},
																			"nativeSrc": "670:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:9"
																		},
																		"nativeSrc": "670:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:9",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:9"
																				},
																				"nativeSrc": "641:24:9",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:9"
																		},
																		"nativeSrc": "631:35:9",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:9"
																},
																"nativeSrc": "624:43:9",
																"nodeType": "YulFunctionCall",
																"src": "624:43:9"
															},
															"nativeSrc": "621:63:9",
															"nodeType": "YulIf",
															"src": "621:63:9"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:9",
														"nodeType": "YulTypedName",
														"src": "604:5:9",
														"type": ""
													}
												],
												"src": "568:122:9"
											},
											{
												"body": {
													"nativeSrc": "748:87:9",
													"nodeType": "YulBlock",
													"src": "748:87:9",
													"statements": [
														{
															"nativeSrc": "758:29:9",
															"nodeType": "YulAssignment",
															"src": "758:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "780:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "767:12:9",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:9"
																},
																"nativeSrc": "767:20:9",
																"nodeType": "YulFunctionCall",
																"src": "767:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "758:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "823:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "796:26:9",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:9"
																},
																"nativeSrc": "796:33:9",
																"nodeType": "YulFunctionCall",
																"src": "796:33:9"
															},
															"nativeSrc": "796:33:9",
															"nodeType": "YulExpressionStatement",
															"src": "796:33:9"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "696:139:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "726:6:9",
														"nodeType": "YulTypedName",
														"src": "726:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "734:3:9",
														"nodeType": "YulTypedName",
														"src": "734:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "742:5:9",
														"nodeType": "YulTypedName",
														"src": "742:5:9",
														"type": ""
													}
												],
												"src": "696:139:9"
											},
											{
												"body": {
													"nativeSrc": "886:32:9",
													"nodeType": "YulBlock",
													"src": "886:32:9",
													"statements": [
														{
															"nativeSrc": "896:16:9",
															"nodeType": "YulAssignment",
															"src": "896:16:9",
															"value": {
																"name": "value",
																"nativeSrc": "907:5:9",
																"nodeType": "YulIdentifier",
																"src": "907:5:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "896:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "896:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "841:77:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "868:5:9",
														"nodeType": "YulTypedName",
														"src": "868:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "878:7:9",
														"nodeType": "YulTypedName",
														"src": "878:7:9",
														"type": ""
													}
												],
												"src": "841:77:9"
											},
											{
												"body": {
													"nativeSrc": "967:79:9",
													"nodeType": "YulBlock",
													"src": "967:79:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "1024:16:9",
																"nodeType": "YulBlock",
																"src": "1024:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1033:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1036:1:9",
																					"nodeType": "YulLiteral",
																					"src": "1036:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1026:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:9"
																			},
																			"nativeSrc": "1026:12:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1026:12:9"
																		},
																		"nativeSrc": "1026:12:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1026:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "990:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "990:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1015:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "1015:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "997:17:9",
																					"nodeType": "YulIdentifier",
																					"src": "997:17:9"
																				},
																				"nativeSrc": "997:24:9",
																				"nodeType": "YulFunctionCall",
																				"src": "997:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "987:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "987:2:9"
																		},
																		"nativeSrc": "987:35:9",
																		"nodeType": "YulFunctionCall",
																		"src": "987:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "980:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "980:6:9"
																},
																"nativeSrc": "980:43:9",
																"nodeType": "YulFunctionCall",
																"src": "980:43:9"
															},
															"nativeSrc": "977:63:9",
															"nodeType": "YulIf",
															"src": "977:63:9"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "924:122:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "960:5:9",
														"nodeType": "YulTypedName",
														"src": "960:5:9",
														"type": ""
													}
												],
												"src": "924:122:9"
											},
											{
												"body": {
													"nativeSrc": "1104:87:9",
													"nodeType": "YulBlock",
													"src": "1104:87:9",
													"statements": [
														{
															"nativeSrc": "1114:29:9",
															"nodeType": "YulAssignment",
															"src": "1114:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1136:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "1136:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1123:12:9",
																	"nodeType": "YulIdentifier",
																	"src": "1123:12:9"
																},
																"nativeSrc": "1123:20:9",
																"nodeType": "YulFunctionCall",
																"src": "1123:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1114:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "1114:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1179:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "1152:26:9",
																	"nodeType": "YulIdentifier",
																	"src": "1152:26:9"
																},
																"nativeSrc": "1152:33:9",
																"nodeType": "YulFunctionCall",
																"src": "1152:33:9"
															},
															"nativeSrc": "1152:33:9",
															"nodeType": "YulExpressionStatement",
															"src": "1152:33:9"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "1052:139:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1082:6:9",
														"nodeType": "YulTypedName",
														"src": "1082:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1090:3:9",
														"nodeType": "YulTypedName",
														"src": "1090:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1098:5:9",
														"nodeType": "YulTypedName",
														"src": "1098:5:9",
														"type": ""
													}
												],
												"src": "1052:139:9"
											},
											{
												"body": {
													"nativeSrc": "1286:28:9",
													"nodeType": "YulBlock",
													"src": "1286:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1303:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1303:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1306:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1306:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1296:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1296:6:9"
																},
																"nativeSrc": "1296:12:9",
																"nodeType": "YulFunctionCall",
																"src": "1296:12:9"
															},
															"nativeSrc": "1296:12:9",
															"nodeType": "YulExpressionStatement",
															"src": "1296:12:9"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nativeSrc": "1197:117:9",
												"nodeType": "YulFunctionDefinition",
												"src": "1197:117:9"
											},
											{
												"body": {
													"nativeSrc": "1409:28:9",
													"nodeType": "YulBlock",
													"src": "1409:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1426:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1426:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1429:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1429:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1419:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1419:6:9"
																},
																"nativeSrc": "1419:12:9",
																"nodeType": "YulFunctionCall",
																"src": "1419:12:9"
															},
															"nativeSrc": "1419:12:9",
															"nodeType": "YulExpressionStatement",
															"src": "1419:12:9"
														}
													]
												},
												"name": "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
												"nativeSrc": "1320:117:9",
												"nodeType": "YulFunctionDefinition",
												"src": "1320:117:9"
											},
											{
												"body": {
													"nativeSrc": "1532:28:9",
													"nodeType": "YulBlock",
													"src": "1532:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1549:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1549:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1552:1:9",
																		"nodeType": "YulLiteral",
																		"src": "1552:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1542:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1542:6:9"
																},
																"nativeSrc": "1542:12:9",
																"nodeType": "YulFunctionCall",
																"src": "1542:12:9"
															},
															"nativeSrc": "1542:12:9",
															"nodeType": "YulExpressionStatement",
															"src": "1542:12:9"
														}
													]
												},
												"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
												"nativeSrc": "1443:117:9",
												"nodeType": "YulFunctionDefinition",
												"src": "1443:117:9"
											},
											{
												"body": {
													"nativeSrc": "1673:478:9",
													"nodeType": "YulBlock",
													"src": "1673:478:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "1722:83:9",
																"nodeType": "YulBlock",
																"src": "1722:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nativeSrc": "1724:77:9",
																				"nodeType": "YulIdentifier",
																				"src": "1724:77:9"
																			},
																			"nativeSrc": "1724:79:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1724:79:9"
																		},
																		"nativeSrc": "1724:79:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1724:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "1701:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "1701:6:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1709:4:9",
																						"nodeType": "YulLiteral",
																						"src": "1709:4:9",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1697:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "1697:3:9"
																				},
																				"nativeSrc": "1697:17:9",
																				"nodeType": "YulFunctionCall",
																				"src": "1697:17:9"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "1716:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "1716:3:9"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "1693:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "1693:3:9"
																		},
																		"nativeSrc": "1693:27:9",
																		"nodeType": "YulFunctionCall",
																		"src": "1693:27:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1686:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1686:6:9"
																},
																"nativeSrc": "1686:35:9",
																"nodeType": "YulFunctionCall",
																"src": "1686:35:9"
															},
															"nativeSrc": "1683:122:9",
															"nodeType": "YulIf",
															"src": "1683:122:9"
														},
														{
															"nativeSrc": "1814:30:9",
															"nodeType": "YulAssignment",
															"src": "1814:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1837:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "1837:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1824:12:9",
																	"nodeType": "YulIdentifier",
																	"src": "1824:12:9"
																},
																"nativeSrc": "1824:20:9",
																"nodeType": "YulFunctionCall",
																"src": "1824:20:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1814:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "1814:6:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1887:83:9",
																"nodeType": "YulBlock",
																"src": "1887:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
																				"nativeSrc": "1889:77:9",
																				"nodeType": "YulIdentifier",
																				"src": "1889:77:9"
																			},
																			"nativeSrc": "1889:79:9",
																			"nodeType": "YulFunctionCall",
																			"src": "1889:79:9"
																		},
																		"nativeSrc": "1889:79:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "1889:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "1859:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "1859:6:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1867:18:9",
																		"nodeType": "YulLiteral",
																		"src": "1867:18:9",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1856:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "1856:2:9"
																},
																"nativeSrc": "1856:30:9",
																"nodeType": "YulFunctionCall",
																"src": "1856:30:9"
															},
															"nativeSrc": "1853:117:9",
															"nodeType": "YulIf",
															"src": "1853:117:9"
														},
														{
															"nativeSrc": "1979:29:9",
															"nodeType": "YulAssignment",
															"src": "1979:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1995:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "1995:6:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2003:4:9",
																		"nodeType": "YulLiteral",
																		"src": "2003:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1991:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "1991:3:9"
																},
																"nativeSrc": "1991:17:9",
																"nodeType": "YulFunctionCall",
																"src": "1991:17:9"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nativeSrc": "1979:8:9",
																	"nodeType": "YulIdentifier",
																	"src": "1979:8:9"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2062:83:9",
																"nodeType": "YulBlock",
																"src": "2062:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
																				"nativeSrc": "2064:77:9",
																				"nodeType": "YulIdentifier",
																				"src": "2064:77:9"
																			},
																			"nativeSrc": "2064:79:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2064:79:9"
																		},
																		"nativeSrc": "2064:79:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2064:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "arrayPos",
																				"nativeSrc": "2027:8:9",
																				"nodeType": "YulIdentifier",
																				"src": "2027:8:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nativeSrc": "2041:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "2041:6:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2049:4:9",
																						"nodeType": "YulLiteral",
																						"src": "2049:4:9",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "2037:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "2037:3:9"
																				},
																				"nativeSrc": "2037:17:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2037:17:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2023:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2023:3:9"
																		},
																		"nativeSrc": "2023:32:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2023:32:9"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "2057:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "2057:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2020:2:9",
																	"nodeType": "YulIdentifier",
																	"src": "2020:2:9"
																},
																"nativeSrc": "2020:41:9",
																"nodeType": "YulFunctionCall",
																"src": "2020:41:9"
															},
															"nativeSrc": "2017:128:9",
															"nodeType": "YulIf",
															"src": "2017:128:9"
														}
													]
												},
												"name": "abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr",
												"nativeSrc": "1583:568:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1640:6:9",
														"nodeType": "YulTypedName",
														"src": "1640:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1648:3:9",
														"nodeType": "YulTypedName",
														"src": "1648:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nativeSrc": "1656:8:9",
														"nodeType": "YulTypedName",
														"src": "1656:8:9",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "1666:6:9",
														"nodeType": "YulTypedName",
														"src": "1666:6:9",
														"type": ""
													}
												],
												"src": "1583:568:9"
											},
											{
												"body": {
													"nativeSrc": "2292:714:9",
													"nodeType": "YulBlock",
													"src": "2292:714:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "2338:83:9",
																"nodeType": "YulBlock",
																"src": "2338:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2340:77:9",
																				"nodeType": "YulIdentifier",
																				"src": "2340:77:9"
																			},
																			"nativeSrc": "2340:79:9",
																			"nodeType": "YulFunctionCall",
																			"src": "2340:79:9"
																		},
																		"nativeSrc": "2340:79:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "2340:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2313:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "2313:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2322:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "2322:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2309:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2309:3:9"
																		},
																		"nativeSrc": "2309:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2309:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2334:2:9",
																		"nodeType": "YulLiteral",
																		"src": "2334:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2305:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "2305:3:9"
																},
																"nativeSrc": "2305:32:9",
																"nodeType": "YulFunctionCall",
																"src": "2305:32:9"
															},
															"nativeSrc": "2302:119:9",
															"nodeType": "YulIf",
															"src": "2302:119:9"
														},
														{
															"nativeSrc": "2431:117:9",
															"nodeType": "YulBlock",
															"src": "2431:117:9",
															"statements": [
																{
																	"nativeSrc": "2446:15:9",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2446:15:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2460:1:9",
																		"nodeType": "YulLiteral",
																		"src": "2460:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2450:6:9",
																			"nodeType": "YulTypedName",
																			"src": "2450:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2475:63:9",
																	"nodeType": "YulAssignment",
																	"src": "2475:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2510:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "2510:9:9"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2521:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "2521:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2506:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "2506:3:9"
																				},
																				"nativeSrc": "2506:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2506:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2530:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "2530:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "2485:20:9",
																			"nodeType": "YulIdentifier",
																			"src": "2485:20:9"
																		},
																		"nativeSrc": "2485:53:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2485:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2475:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "2475:6:9"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "2558:118:9",
															"nodeType": "YulBlock",
															"src": "2558:118:9",
															"statements": [
																{
																	"nativeSrc": "2573:16:9",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2573:16:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2587:2:9",
																		"nodeType": "YulLiteral",
																		"src": "2587:2:9",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2577:6:9",
																			"nodeType": "YulTypedName",
																			"src": "2577:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2603:63:9",
																	"nodeType": "YulAssignment",
																	"src": "2603:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2638:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "2638:9:9"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2649:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "2649:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2634:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "2634:3:9"
																				},
																				"nativeSrc": "2634:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2634:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2658:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "2658:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2613:20:9",
																			"nodeType": "YulIdentifier",
																			"src": "2613:20:9"
																		},
																		"nativeSrc": "2613:53:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2613:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "2603:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "2603:6:9"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "2686:313:9",
															"nodeType": "YulBlock",
															"src": "2686:313:9",
															"statements": [
																{
																	"nativeSrc": "2701:46:9",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2701:46:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2732:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "2732:9:9"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2743:2:9",
																						"nodeType": "YulLiteral",
																						"src": "2743:2:9",
																						"type": "",
																						"value": "64"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2728:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "2728:3:9"
																				},
																				"nativeSrc": "2728:18:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2728:18:9"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nativeSrc": "2715:12:9",
																			"nodeType": "YulIdentifier",
																			"src": "2715:12:9"
																		},
																		"nativeSrc": "2715:32:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2715:32:9"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2705:6:9",
																			"nodeType": "YulTypedName",
																			"src": "2705:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nativeSrc": "2794:83:9",
																		"nodeType": "YulBlock",
																		"src": "2794:83:9",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nativeSrc": "2796:77:9",
																						"nodeType": "YulIdentifier",
																						"src": "2796:77:9"
																					},
																					"nativeSrc": "2796:79:9",
																					"nodeType": "YulFunctionCall",
																					"src": "2796:79:9"
																				},
																				"nativeSrc": "2796:79:9",
																				"nodeType": "YulExpressionStatement",
																				"src": "2796:79:9"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "2766:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "2766:6:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2774:18:9",
																				"nodeType": "YulLiteral",
																				"src": "2774:18:9",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "2763:2:9",
																			"nodeType": "YulIdentifier",
																			"src": "2763:2:9"
																		},
																		"nativeSrc": "2763:30:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2763:30:9"
																	},
																	"nativeSrc": "2760:117:9",
																	"nodeType": "YulIf",
																	"src": "2760:117:9"
																},
																{
																	"nativeSrc": "2891:98:9",
																	"nodeType": "YulAssignment",
																	"src": "2891:98:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2961:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "2961:9:9"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2972:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "2972:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2957:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "2957:3:9"
																				},
																				"nativeSrc": "2957:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "2957:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2981:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "2981:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr",
																			"nativeSrc": "2909:47:9",
																			"nodeType": "YulIdentifier",
																			"src": "2909:47:9"
																		},
																		"nativeSrc": "2909:80:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2909:80:9"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "2891:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "2891:6:9"
																		},
																		{
																			"name": "value3",
																			"nativeSrc": "2899:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "2899:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr",
												"nativeSrc": "2157:849:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2238:9:9",
														"nodeType": "YulTypedName",
														"src": "2238:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2249:7:9",
														"nodeType": "YulTypedName",
														"src": "2249:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2261:6:9",
														"nodeType": "YulTypedName",
														"src": "2261:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2269:6:9",
														"nodeType": "YulTypedName",
														"src": "2269:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "2277:6:9",
														"nodeType": "YulTypedName",
														"src": "2277:6:9",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "2285:6:9",
														"nodeType": "YulTypedName",
														"src": "2285:6:9",
														"type": ""
													}
												],
												"src": "2157:849:9"
											},
											{
												"body": {
													"nativeSrc": "3057:32:9",
													"nodeType": "YulBlock",
													"src": "3057:32:9",
													"statements": [
														{
															"nativeSrc": "3067:16:9",
															"nodeType": "YulAssignment",
															"src": "3067:16:9",
															"value": {
																"name": "value",
																"nativeSrc": "3078:5:9",
																"nodeType": "YulIdentifier",
																"src": "3078:5:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "3067:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "3067:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nativeSrc": "3012:77:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3039:5:9",
														"nodeType": "YulTypedName",
														"src": "3039:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "3049:7:9",
														"nodeType": "YulTypedName",
														"src": "3049:7:9",
														"type": ""
													}
												],
												"src": "3012:77:9"
											},
											{
												"body": {
													"nativeSrc": "3160:53:9",
													"nodeType": "YulBlock",
													"src": "3160:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3177:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "3177:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3200:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "3200:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nativeSrc": "3182:17:9",
																			"nodeType": "YulIdentifier",
																			"src": "3182:17:9"
																		},
																		"nativeSrc": "3182:24:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3182:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3170:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3170:6:9"
																},
																"nativeSrc": "3170:37:9",
																"nodeType": "YulFunctionCall",
																"src": "3170:37:9"
															},
															"nativeSrc": "3170:37:9",
															"nodeType": "YulExpressionStatement",
															"src": "3170:37:9"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "3095:118:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3148:5:9",
														"nodeType": "YulTypedName",
														"src": "3148:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3155:3:9",
														"nodeType": "YulTypedName",
														"src": "3155:3:9",
														"type": ""
													}
												],
												"src": "3095:118:9"
											},
											{
												"body": {
													"nativeSrc": "3317:124:9",
													"nodeType": "YulBlock",
													"src": "3317:124:9",
													"statements": [
														{
															"nativeSrc": "3327:26:9",
															"nodeType": "YulAssignment",
															"src": "3327:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3339:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "3339:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3350:2:9",
																		"nodeType": "YulLiteral",
																		"src": "3350:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3335:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "3335:3:9"
																},
																"nativeSrc": "3335:18:9",
																"nodeType": "YulFunctionCall",
																"src": "3335:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3327:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "3327:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3407:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "3407:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3420:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "3420:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3431:1:9",
																				"nodeType": "YulLiteral",
																				"src": "3431:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3416:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "3416:3:9"
																		},
																		"nativeSrc": "3416:17:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3416:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "3363:43:9",
																	"nodeType": "YulIdentifier",
																	"src": "3363:43:9"
																},
																"nativeSrc": "3363:71:9",
																"nodeType": "YulFunctionCall",
																"src": "3363:71:9"
															},
															"nativeSrc": "3363:71:9",
															"nodeType": "YulExpressionStatement",
															"src": "3363:71:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "3219:222:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3289:9:9",
														"nodeType": "YulTypedName",
														"src": "3289:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3301:6:9",
														"nodeType": "YulTypedName",
														"src": "3301:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3312:4:9",
														"nodeType": "YulTypedName",
														"src": "3312:4:9",
														"type": ""
													}
												],
												"src": "3219:222:9"
											},
											{
												"body": {
													"nativeSrc": "3513:263:9",
													"nodeType": "YulBlock",
													"src": "3513:263:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "3559:83:9",
																"nodeType": "YulBlock",
																"src": "3559:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3561:77:9",
																				"nodeType": "YulIdentifier",
																				"src": "3561:77:9"
																			},
																			"nativeSrc": "3561:79:9",
																			"nodeType": "YulFunctionCall",
																			"src": "3561:79:9"
																		},
																		"nativeSrc": "3561:79:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "3561:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3534:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "3534:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3543:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "3543:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3530:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "3530:3:9"
																		},
																		"nativeSrc": "3530:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3530:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3555:2:9",
																		"nodeType": "YulLiteral",
																		"src": "3555:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3526:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "3526:3:9"
																},
																"nativeSrc": "3526:32:9",
																"nodeType": "YulFunctionCall",
																"src": "3526:32:9"
															},
															"nativeSrc": "3523:119:9",
															"nodeType": "YulIf",
															"src": "3523:119:9"
														},
														{
															"nativeSrc": "3652:117:9",
															"nodeType": "YulBlock",
															"src": "3652:117:9",
															"statements": [
																{
																	"nativeSrc": "3667:15:9",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3667:15:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3681:1:9",
																		"nodeType": "YulLiteral",
																		"src": "3681:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3671:6:9",
																			"nodeType": "YulTypedName",
																			"src": "3671:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3696:63:9",
																	"nodeType": "YulAssignment",
																	"src": "3696:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3731:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "3731:9:9"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3742:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "3742:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3727:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "3727:3:9"
																				},
																				"nativeSrc": "3727:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "3727:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3751:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "3751:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3706:20:9",
																			"nodeType": "YulIdentifier",
																			"src": "3706:20:9"
																		},
																		"nativeSrc": "3706:53:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3706:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3696:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "3696:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "3447:329:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3483:9:9",
														"nodeType": "YulTypedName",
														"src": "3483:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3494:7:9",
														"nodeType": "YulTypedName",
														"src": "3494:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3506:6:9",
														"nodeType": "YulTypedName",
														"src": "3506:6:9",
														"type": ""
													}
												],
												"src": "3447:329:9"
											},
											{
												"body": {
													"nativeSrc": "3824:48:9",
													"nodeType": "YulBlock",
													"src": "3824:48:9",
													"statements": [
														{
															"nativeSrc": "3834:32:9",
															"nodeType": "YulAssignment",
															"src": "3834:32:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3859:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "3859:5:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "3852:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "3852:6:9"
																		},
																		"nativeSrc": "3852:13:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3852:13:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3845:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3845:6:9"
																},
																"nativeSrc": "3845:21:9",
																"nodeType": "YulFunctionCall",
																"src": "3845:21:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "3834:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "3834:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "3782:90:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3806:5:9",
														"nodeType": "YulTypedName",
														"src": "3806:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "3816:7:9",
														"nodeType": "YulTypedName",
														"src": "3816:7:9",
														"type": ""
													}
												],
												"src": "3782:90:9"
											},
											{
												"body": {
													"nativeSrc": "3937:50:9",
													"nodeType": "YulBlock",
													"src": "3937:50:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3954:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "3954:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3974:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "3974:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3959:14:9",
																			"nodeType": "YulIdentifier",
																			"src": "3959:14:9"
																		},
																		"nativeSrc": "3959:21:9",
																		"nodeType": "YulFunctionCall",
																		"src": "3959:21:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3947:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "3947:6:9"
																},
																"nativeSrc": "3947:34:9",
																"nodeType": "YulFunctionCall",
																"src": "3947:34:9"
															},
															"nativeSrc": "3947:34:9",
															"nodeType": "YulExpressionStatement",
															"src": "3947:34:9"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3878:109:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3925:5:9",
														"nodeType": "YulTypedName",
														"src": "3925:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3932:3:9",
														"nodeType": "YulTypedName",
														"src": "3932:3:9",
														"type": ""
													}
												],
												"src": "3878:109:9"
											},
											{
												"body": {
													"nativeSrc": "4085:118:9",
													"nodeType": "YulBlock",
													"src": "4085:118:9",
													"statements": [
														{
															"nativeSrc": "4095:26:9",
															"nodeType": "YulAssignment",
															"src": "4095:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4107:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "4107:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4118:2:9",
																		"nodeType": "YulLiteral",
																		"src": "4118:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4103:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4103:3:9"
																},
																"nativeSrc": "4103:18:9",
																"nodeType": "YulFunctionCall",
																"src": "4103:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4095:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "4095:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4169:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "4169:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4182:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "4182:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4193:1:9",
																				"nodeType": "YulLiteral",
																				"src": "4193:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4178:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "4178:3:9"
																		},
																		"nativeSrc": "4178:17:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4178:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "4131:37:9",
																	"nodeType": "YulIdentifier",
																	"src": "4131:37:9"
																},
																"nativeSrc": "4131:65:9",
																"nodeType": "YulFunctionCall",
																"src": "4131:65:9"
															},
															"nativeSrc": "4131:65:9",
															"nodeType": "YulExpressionStatement",
															"src": "4131:65:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3993:210:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4057:9:9",
														"nodeType": "YulTypedName",
														"src": "4057:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4069:6:9",
														"nodeType": "YulTypedName",
														"src": "4069:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4080:4:9",
														"nodeType": "YulTypedName",
														"src": "4080:4:9",
														"type": ""
													}
												],
												"src": "3993:210:9"
											},
											{
												"body": {
													"nativeSrc": "4241:28:9",
													"nodeType": "YulBlock",
													"src": "4241:28:9",
													"statements": [
														{
															"nativeSrc": "4251:12:9",
															"nodeType": "YulAssignment",
															"src": "4251:12:9",
															"value": {
																"name": "value",
																"nativeSrc": "4258:5:9",
																"nodeType": "YulIdentifier",
																"src": "4258:5:9"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "4251:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4251:3:9"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "4209:60:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4227:5:9",
														"nodeType": "YulTypedName",
														"src": "4227:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "4237:3:9",
														"nodeType": "YulTypedName",
														"src": "4237:3:9",
														"type": ""
													}
												],
												"src": "4209:60:9"
											},
											{
												"body": {
													"nativeSrc": "4335:82:9",
													"nodeType": "YulBlock",
													"src": "4335:82:9",
													"statements": [
														{
															"nativeSrc": "4345:66:9",
															"nodeType": "YulAssignment",
															"src": "4345:66:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "4403:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "4403:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nativeSrc": "4385:17:9",
																					"nodeType": "YulIdentifier",
																					"src": "4385:17:9"
																				},
																				"nativeSrc": "4385:24:9",
																				"nodeType": "YulFunctionCall",
																				"src": "4385:24:9"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "4376:8:9",
																			"nodeType": "YulIdentifier",
																			"src": "4376:8:9"
																		},
																		"nativeSrc": "4376:34:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4376:34:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "4358:17:9",
																	"nodeType": "YulIdentifier",
																	"src": "4358:17:9"
																},
																"nativeSrc": "4358:53:9",
																"nodeType": "YulFunctionCall",
																"src": "4358:53:9"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "4345:9:9",
																	"nodeType": "YulIdentifier",
																	"src": "4345:9:9"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nativeSrc": "4275:142:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4315:5:9",
														"nodeType": "YulTypedName",
														"src": "4315:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "4325:9:9",
														"nodeType": "YulTypedName",
														"src": "4325:9:9",
														"type": ""
													}
												],
												"src": "4275:142:9"
											},
											{
												"body": {
													"nativeSrc": "4483:66:9",
													"nodeType": "YulBlock",
													"src": "4483:66:9",
													"statements": [
														{
															"nativeSrc": "4493:50:9",
															"nodeType": "YulAssignment",
															"src": "4493:50:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4537:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "4537:5:9"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nativeSrc": "4506:30:9",
																	"nodeType": "YulIdentifier",
																	"src": "4506:30:9"
																},
																"nativeSrc": "4506:37:9",
																"nodeType": "YulFunctionCall",
																"src": "4506:37:9"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "4493:9:9",
																	"nodeType": "YulIdentifier",
																	"src": "4493:9:9"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nativeSrc": "4423:126:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4463:5:9",
														"nodeType": "YulTypedName",
														"src": "4463:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "4473:9:9",
														"nodeType": "YulTypedName",
														"src": "4473:9:9",
														"type": ""
													}
												],
												"src": "4423:126:9"
											},
											{
												"body": {
													"nativeSrc": "4629:66:9",
													"nodeType": "YulBlock",
													"src": "4629:66:9",
													"statements": [
														{
															"nativeSrc": "4639:50:9",
															"nodeType": "YulAssignment",
															"src": "4639:50:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4683:5:9",
																		"nodeType": "YulIdentifier",
																		"src": "4683:5:9"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nativeSrc": "4652:30:9",
																	"nodeType": "YulIdentifier",
																	"src": "4652:30:9"
																},
																"nativeSrc": "4652:37:9",
																"nodeType": "YulFunctionCall",
																"src": "4652:37:9"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "4639:9:9",
																	"nodeType": "YulIdentifier",
																	"src": "4639:9:9"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$167_to_t_address",
												"nativeSrc": "4555:140:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4609:5:9",
														"nodeType": "YulTypedName",
														"src": "4609:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "4619:9:9",
														"nodeType": "YulTypedName",
														"src": "4619:9:9",
														"type": ""
													}
												],
												"src": "4555:140:9"
											},
											{
												"body": {
													"nativeSrc": "4780:80:9",
													"nodeType": "YulBlock",
													"src": "4780:80:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4797:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "4797:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4847:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "4847:5:9"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC20_$167_to_t_address",
																			"nativeSrc": "4802:44:9",
																			"nodeType": "YulIdentifier",
																			"src": "4802:44:9"
																		},
																		"nativeSrc": "4802:51:9",
																		"nodeType": "YulFunctionCall",
																		"src": "4802:51:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4790:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "4790:6:9"
																},
																"nativeSrc": "4790:64:9",
																"nodeType": "YulFunctionCall",
																"src": "4790:64:9"
															},
															"nativeSrc": "4790:64:9",
															"nodeType": "YulExpressionStatement",
															"src": "4790:64:9"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC20_$167_to_t_address_fromStack",
												"nativeSrc": "4701:159:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4768:5:9",
														"nodeType": "YulTypedName",
														"src": "4768:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4775:3:9",
														"nodeType": "YulTypedName",
														"src": "4775:3:9",
														"type": ""
													}
												],
												"src": "4701:159:9"
											},
											{
												"body": {
													"nativeSrc": "4978:138:9",
													"nodeType": "YulBlock",
													"src": "4978:138:9",
													"statements": [
														{
															"nativeSrc": "4988:26:9",
															"nodeType": "YulAssignment",
															"src": "4988:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5000:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5000:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5011:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5011:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4996:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "4996:3:9"
																},
																"nativeSrc": "4996:18:9",
																"nodeType": "YulFunctionCall",
																"src": "4996:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4988:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "4988:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5082:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5082:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5095:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5095:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5106:1:9",
																				"nodeType": "YulLiteral",
																				"src": "5106:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5091:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5091:3:9"
																		},
																		"nativeSrc": "5091:17:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5091:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$167_to_t_address_fromStack",
																	"nativeSrc": "5024:57:9",
																	"nodeType": "YulIdentifier",
																	"src": "5024:57:9"
																},
																"nativeSrc": "5024:85:9",
																"nodeType": "YulFunctionCall",
																"src": "5024:85:9"
															},
															"nativeSrc": "5024:85:9",
															"nodeType": "YulExpressionStatement",
															"src": "5024:85:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$167__to_t_address__fromStack_reversed",
												"nativeSrc": "4866:250:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4950:9:9",
														"nodeType": "YulTypedName",
														"src": "4950:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4962:6:9",
														"nodeType": "YulTypedName",
														"src": "4962:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4973:4:9",
														"nodeType": "YulTypedName",
														"src": "4973:4:9",
														"type": ""
													}
												],
												"src": "4866:250:9"
											},
											{
												"body": {
													"nativeSrc": "5188:263:9",
													"nodeType": "YulBlock",
													"src": "5188:263:9",
													"statements": [
														{
															"body": {
																"nativeSrc": "5234:83:9",
																"nodeType": "YulBlock",
																"src": "5234:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5236:77:9",
																				"nodeType": "YulIdentifier",
																				"src": "5236:77:9"
																			},
																			"nativeSrc": "5236:79:9",
																			"nodeType": "YulFunctionCall",
																			"src": "5236:79:9"
																		},
																		"nativeSrc": "5236:79:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "5236:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5209:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "5209:7:9"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5218:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5218:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5205:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5205:3:9"
																		},
																		"nativeSrc": "5205:23:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5205:23:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5230:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5230:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5201:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5201:3:9"
																},
																"nativeSrc": "5201:32:9",
																"nodeType": "YulFunctionCall",
																"src": "5201:32:9"
															},
															"nativeSrc": "5198:119:9",
															"nodeType": "YulIf",
															"src": "5198:119:9"
														},
														{
															"nativeSrc": "5327:117:9",
															"nodeType": "YulBlock",
															"src": "5327:117:9",
															"statements": [
																{
																	"nativeSrc": "5342:15:9",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5342:15:9",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5356:1:9",
																		"nodeType": "YulLiteral",
																		"src": "5356:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5346:6:9",
																			"nodeType": "YulTypedName",
																			"src": "5346:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5371:63:9",
																	"nodeType": "YulAssignment",
																	"src": "5371:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5406:9:9",
																						"nodeType": "YulIdentifier",
																						"src": "5406:9:9"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5417:6:9",
																						"nodeType": "YulIdentifier",
																						"src": "5417:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5402:3:9",
																					"nodeType": "YulIdentifier",
																					"src": "5402:3:9"
																				},
																				"nativeSrc": "5402:22:9",
																				"nodeType": "YulFunctionCall",
																				"src": "5402:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5426:7:9",
																				"nodeType": "YulIdentifier",
																				"src": "5426:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "5381:20:9",
																			"nodeType": "YulIdentifier",
																			"src": "5381:20:9"
																		},
																		"nativeSrc": "5381:53:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5381:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5371:6:9",
																			"nodeType": "YulIdentifier",
																			"src": "5371:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "5122:329:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5158:9:9",
														"nodeType": "YulTypedName",
														"src": "5158:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5169:7:9",
														"nodeType": "YulTypedName",
														"src": "5169:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5181:6:9",
														"nodeType": "YulTypedName",
														"src": "5181:6:9",
														"type": ""
													}
												],
												"src": "5122:329:9"
											},
											{
												"body": {
													"nativeSrc": "5522:53:9",
													"nodeType": "YulBlock",
													"src": "5522:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5539:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "5539:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5562:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "5562:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "5544:17:9",
																			"nodeType": "YulIdentifier",
																			"src": "5544:17:9"
																		},
																		"nativeSrc": "5544:24:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5544:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5532:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5532:6:9"
																},
																"nativeSrc": "5532:37:9",
																"nodeType": "YulFunctionCall",
																"src": "5532:37:9"
															},
															"nativeSrc": "5532:37:9",
															"nodeType": "YulExpressionStatement",
															"src": "5532:37:9"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5457:118:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5510:5:9",
														"nodeType": "YulTypedName",
														"src": "5510:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5517:3:9",
														"nodeType": "YulTypedName",
														"src": "5517:3:9",
														"type": ""
													}
												],
												"src": "5457:118:9"
											},
											{
												"body": {
													"nativeSrc": "5679:124:9",
													"nodeType": "YulBlock",
													"src": "5679:124:9",
													"statements": [
														{
															"nativeSrc": "5689:26:9",
															"nodeType": "YulAssignment",
															"src": "5689:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5701:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "5701:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5712:2:9",
																		"nodeType": "YulLiteral",
																		"src": "5712:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5697:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "5697:3:9"
																},
																"nativeSrc": "5697:18:9",
																"nodeType": "YulFunctionCall",
																"src": "5697:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5689:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "5689:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5769:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "5769:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5782:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "5782:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5793:1:9",
																				"nodeType": "YulLiteral",
																				"src": "5793:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5778:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "5778:3:9"
																		},
																		"nativeSrc": "5778:17:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5778:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5725:43:9",
																	"nodeType": "YulIdentifier",
																	"src": "5725:43:9"
																},
																"nativeSrc": "5725:71:9",
																"nodeType": "YulFunctionCall",
																"src": "5725:71:9"
															},
															"nativeSrc": "5725:71:9",
															"nodeType": "YulExpressionStatement",
															"src": "5725:71:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "5581:222:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5651:9:9",
														"nodeType": "YulTypedName",
														"src": "5651:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5663:6:9",
														"nodeType": "YulTypedName",
														"src": "5663:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5674:4:9",
														"nodeType": "YulTypedName",
														"src": "5674:4:9",
														"type": ""
													}
												],
												"src": "5581:222:9"
											},
											{
												"body": {
													"nativeSrc": "5874:53:9",
													"nodeType": "YulBlock",
													"src": "5874:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5891:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "5891:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5914:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "5914:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "5896:17:9",
																			"nodeType": "YulIdentifier",
																			"src": "5896:17:9"
																		},
																		"nativeSrc": "5896:24:9",
																		"nodeType": "YulFunctionCall",
																		"src": "5896:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5884:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "5884:6:9"
																},
																"nativeSrc": "5884:37:9",
																"nodeType": "YulFunctionCall",
																"src": "5884:37:9"
															},
															"nativeSrc": "5884:37:9",
															"nodeType": "YulExpressionStatement",
															"src": "5884:37:9"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "5809:118:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5862:5:9",
														"nodeType": "YulTypedName",
														"src": "5862:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5869:3:9",
														"nodeType": "YulTypedName",
														"src": "5869:3:9",
														"type": ""
													}
												],
												"src": "5809:118:9"
											},
											{
												"body": {
													"nativeSrc": "6059:206:9",
													"nodeType": "YulBlock",
													"src": "6059:206:9",
													"statements": [
														{
															"nativeSrc": "6069:26:9",
															"nodeType": "YulAssignment",
															"src": "6069:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6081:9:9",
																		"nodeType": "YulIdentifier",
																		"src": "6081:9:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6092:2:9",
																		"nodeType": "YulLiteral",
																		"src": "6092:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6077:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "6077:3:9"
																},
																"nativeSrc": "6077:18:9",
																"nodeType": "YulFunctionCall",
																"src": "6077:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6069:4:9",
																	"nodeType": "YulIdentifier",
																	"src": "6069:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "6149:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "6149:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6162:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "6162:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6173:1:9",
																				"nodeType": "YulLiteral",
																				"src": "6173:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6158:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "6158:3:9"
																		},
																		"nativeSrc": "6158:17:9",
																		"nodeType": "YulFunctionCall",
																		"src": "6158:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "6105:43:9",
																	"nodeType": "YulIdentifier",
																	"src": "6105:43:9"
																},
																"nativeSrc": "6105:71:9",
																"nodeType": "YulFunctionCall",
																"src": "6105:71:9"
															},
															"nativeSrc": "6105:71:9",
															"nodeType": "YulExpressionStatement",
															"src": "6105:71:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "6230:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "6230:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6243:9:9",
																				"nodeType": "YulIdentifier",
																				"src": "6243:9:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6254:2:9",
																				"nodeType": "YulLiteral",
																				"src": "6254:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6239:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "6239:3:9"
																		},
																		"nativeSrc": "6239:18:9",
																		"nodeType": "YulFunctionCall",
																		"src": "6239:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "6186:43:9",
																	"nodeType": "YulIdentifier",
																	"src": "6186:43:9"
																},
																"nativeSrc": "6186:72:9",
																"nodeType": "YulFunctionCall",
																"src": "6186:72:9"
															},
															"nativeSrc": "6186:72:9",
															"nodeType": "YulExpressionStatement",
															"src": "6186:72:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "5933:332:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6023:9:9",
														"nodeType": "YulTypedName",
														"src": "6023:9:9",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6035:6:9",
														"nodeType": "YulTypedName",
														"src": "6035:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6043:6:9",
														"nodeType": "YulTypedName",
														"src": "6043:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6054:4:9",
														"nodeType": "YulTypedName",
														"src": "6054:4:9",
														"type": ""
													}
												],
												"src": "5933:332:9"
											},
											{
												"body": {
													"nativeSrc": "6318:32:9",
													"nodeType": "YulBlock",
													"src": "6318:32:9",
													"statements": [
														{
															"nativeSrc": "6328:16:9",
															"nodeType": "YulAssignment",
															"src": "6328:16:9",
															"value": {
																"name": "value",
																"nativeSrc": "6339:5:9",
																"nodeType": "YulIdentifier",
																"src": "6339:5:9"
															},
															"variableNames": [
																{
																	"name": "aligned",
																	"nativeSrc": "6328:7:9",
																	"nodeType": "YulIdentifier",
																	"src": "6328:7:9"
																}
															]
														}
													]
												},
												"name": "leftAlign_t_bytes32",
												"nativeSrc": "6271:79:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6300:5:9",
														"nodeType": "YulTypedName",
														"src": "6300:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "aligned",
														"nativeSrc": "6310:7:9",
														"nodeType": "YulTypedName",
														"src": "6310:7:9",
														"type": ""
													}
												],
												"src": "6271:79:9"
											},
											{
												"body": {
													"nativeSrc": "6439:74:9",
													"nodeType": "YulBlock",
													"src": "6439:74:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6456:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "6456:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "6499:5:9",
																						"nodeType": "YulIdentifier",
																						"src": "6499:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nativeSrc": "6481:17:9",
																					"nodeType": "YulIdentifier",
																					"src": "6481:17:9"
																				},
																				"nativeSrc": "6481:24:9",
																				"nodeType": "YulFunctionCall",
																				"src": "6481:24:9"
																			}
																		],
																		"functionName": {
																			"name": "leftAlign_t_bytes32",
																			"nativeSrc": "6461:19:9",
																			"nodeType": "YulIdentifier",
																			"src": "6461:19:9"
																		},
																		"nativeSrc": "6461:45:9",
																		"nodeType": "YulFunctionCall",
																		"src": "6461:45:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6449:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "6449:6:9"
																},
																"nativeSrc": "6449:58:9",
																"nodeType": "YulFunctionCall",
																"src": "6449:58:9"
															},
															"nativeSrc": "6449:58:9",
															"nodeType": "YulExpressionStatement",
															"src": "6449:58:9"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
												"nativeSrc": "6356:157:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6427:5:9",
														"nodeType": "YulTypedName",
														"src": "6427:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6434:3:9",
														"nodeType": "YulTypedName",
														"src": "6434:3:9",
														"type": ""
													}
												],
												"src": "6356:157:9"
											},
											{
												"body": {
													"nativeSrc": "6635:140:9",
													"nodeType": "YulBlock",
													"src": "6635:140:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "6708:6:9",
																		"nodeType": "YulIdentifier",
																		"src": "6708:6:9"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "6717:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "6717:3:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
																	"nativeSrc": "6646:61:9",
																	"nodeType": "YulIdentifier",
																	"src": "6646:61:9"
																},
																"nativeSrc": "6646:75:9",
																"nodeType": "YulFunctionCall",
																"src": "6646:75:9"
															},
															"nativeSrc": "6646:75:9",
															"nodeType": "YulExpressionStatement",
															"src": "6646:75:9"
														},
														{
															"nativeSrc": "6730:19:9",
															"nodeType": "YulAssignment",
															"src": "6730:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6741:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "6741:3:9"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6746:2:9",
																		"nodeType": "YulLiteral",
																		"src": "6746:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6737:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "6737:3:9"
																},
																"nativeSrc": "6737:12:9",
																"nodeType": "YulFunctionCall",
																"src": "6737:12:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "6730:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "6730:3:9"
																}
															]
														},
														{
															"nativeSrc": "6759:10:9",
															"nodeType": "YulAssignment",
															"src": "6759:10:9",
															"value": {
																"name": "pos",
																"nativeSrc": "6766:3:9",
																"nodeType": "YulIdentifier",
																"src": "6766:3:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "6759:3:9",
																	"nodeType": "YulIdentifier",
																	"src": "6759:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "6519:256:9",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6614:3:9",
														"nodeType": "YulTypedName",
														"src": "6614:3:9",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6620:6:9",
														"nodeType": "YulTypedName",
														"src": "6620:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "6631:3:9",
														"nodeType": "YulTypedName",
														"src": "6631:3:9",
														"type": ""
													}
												],
												"src": "6519:256:9"
											},
											{
												"body": {
													"nativeSrc": "6809:152:9",
													"nodeType": "YulBlock",
													"src": "6809:152:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6826:1:9",
																		"nodeType": "YulLiteral",
																		"src": "6826:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6829:77:9",
																		"nodeType": "YulLiteral",
																		"src": "6829:77:9",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6819:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "6819:6:9"
																},
																"nativeSrc": "6819:88:9",
																"nodeType": "YulFunctionCall",
																"src": "6819:88:9"
															},
															"nativeSrc": "6819:88:9",
															"nodeType": "YulExpressionStatement",
															"src": "6819:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6923:1:9",
																		"nodeType": "YulLiteral",
																		"src": "6923:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6926:4:9",
																		"nodeType": "YulLiteral",
																		"src": "6926:4:9",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6916:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "6916:6:9"
																},
																"nativeSrc": "6916:15:9",
																"nodeType": "YulFunctionCall",
																"src": "6916:15:9"
															},
															"nativeSrc": "6916:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "6916:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6947:1:9",
																		"nodeType": "YulLiteral",
																		"src": "6947:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6950:4:9",
																		"nodeType": "YulLiteral",
																		"src": "6950:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "6940:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "6940:6:9"
																},
																"nativeSrc": "6940:15:9",
																"nodeType": "YulFunctionCall",
																"src": "6940:15:9"
															},
															"nativeSrc": "6940:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "6940:15:9"
														}
													]
												},
												"name": "panic_error_0x32",
												"nativeSrc": "6781:180:9",
												"nodeType": "YulFunctionDefinition",
												"src": "6781:180:9"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes32[]\n    function abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$167_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$167_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$167_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$167__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$167_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1782": [
									{
										"length": 32,
										"start": 554
									},
									{
										"length": 32,
										"start": 871
									}
								],
								"1785": [
									{
										"length": 32,
										"start": 793
									},
									{
										"length": 32,
										"start": 939
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b5060043610610055575f3560e01c80633d13f8741461005957806349590657146100755780634a5aae37146100935780635d70fa3c146100c357806399ae559d146100e1575b5f5ffd5b610073600480360381019061006e91906106be565b610111565b005b61007d610364565b60405161008a9190610747565b60405180910390f35b6100ad60048036038101906100a89190610760565b61038b565b6040516100ba91906107a5565b60405180910390f35b6100cb6103a8565b6040516100d89190610819565b60405180910390f35b6100fb60048036038101906100f69190610832565b6103cf565b604051610108919061086c565b60405180910390f35b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610192576040517f1ac2170b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f84846040516020016101a6929190610894565b604051602081830303815290604052805190602001206040516020016101cc91906108db565b60405160208183030381529060405280519060200120905061024f8383808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f820116905080830192505050505050507f000000000000000000000000000000000000000000000000000000000000000083610409565b610285576040517faa894afb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055507f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4858560405161030a929190610894565b60405180910390a161035d85857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661041f9092919063ffffffff16565b5050505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b6001602052805f5260405f205f915054906101000a900460ff1681565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f81815481106103dd575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f82610415858461049e565b1490509392505050565b610499838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610452929190610894565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104ef565b505050565b5f5f8290505f5f90505b84518110156104e4576104d5828683815181106104c8576104c76108f5565b5b602002602001015161058a565b915080806001019150506104a8565b508091505092915050565b5f5f60205f8451602086015f885af18061050e576040513d5f823e3d81fd5b3d92505f519150505f8214610527576001811415610542565b5f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561058457836040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161057b919061086c565b60405180910390fd5b50505050565b5f8183106105a15761059c82846105b4565b6105ac565b6105ab83836105b4565b5b905092915050565b5f825f528160205260405f20905092915050565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105f9826105d0565b9050919050565b610609816105ef565b8114610613575f5ffd5b50565b5f8135905061062481610600565b92915050565b5f819050919050565b61063c8161062a565b8114610646575f5ffd5b50565b5f8135905061065781610633565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261067e5761067d61065d565b5b8235905067ffffffffffffffff81111561069b5761069a610661565b5b6020830191508360208202830111156106b7576106b6610665565b5b9250929050565b5f5f5f5f606085870312156106d6576106d56105c8565b5b5f6106e387828801610616565b94505060206106f487828801610649565b935050604085013567ffffffffffffffff811115610715576107146105cc565b5b61072187828801610669565b925092505092959194509250565b5f819050919050565b6107418161072f565b82525050565b5f60208201905061075a5f830184610738565b92915050565b5f60208284031215610775576107746105c8565b5b5f61078284828501610616565b91505092915050565b5f8115159050919050565b61079f8161078b565b82525050565b5f6020820190506107b85f830184610796565b92915050565b5f819050919050565b5f6107e16107dc6107d7846105d0565b6107be565b6105d0565b9050919050565b5f6107f2826107c7565b9050919050565b5f610803826107e8565b9050919050565b610813816107f9565b82525050565b5f60208201905061082c5f83018461080a565b92915050565b5f60208284031215610847576108466105c8565b5b5f61085484828501610649565b91505092915050565b610866816105ef565b82525050565b5f60208201905061087f5f83018461085d565b92915050565b61088e8161062a565b82525050565b5f6040820190506108a75f83018561085d565b6108b46020830184610885565b9392505050565b5f819050919050565b6108d56108d08261072f565b6108bb565b82525050565b5f6108e682846108c4565b60208201915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212202309e96629ac95efe75618452771002e02ff5bc35dedcdc6591d71e6a34bfd3664736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3D13F874 EQ PUSH2 0x59 JUMPI DUP1 PUSH4 0x49590657 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x4A5AAE37 EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0x5D70FA3C EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x99AE559D EQ PUSH2 0xE1 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x73 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6E SWAP2 SWAP1 PUSH2 0x6BE JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7D PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8A SWAP2 SWAP1 PUSH2 0x747 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x760 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0x7A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCB PUSH2 0x3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0x819 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x832 JUMP JUMPDEST PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108 SWAP2 SWAP1 PUSH2 0x86C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x192 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1AC2170B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A6 SWAP3 SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CC SWAP2 SWAP1 PUSH2 0x8DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x24F DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH32 0x0 DUP4 PUSH2 0x409 JUMP JUMPDEST PUSH2 0x285 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAA894AFB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x30A SWAP3 SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x35D DUP6 DUP6 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x41F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3DD JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x415 DUP6 DUP5 PUSH2 0x49E JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x499 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x452 SWAP3 SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4EF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH0 DUP3 SWAP1 POP PUSH0 PUSH0 SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x4E4 JUMPI PUSH2 0x4D5 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C8 JUMPI PUSH2 0x4C7 PUSH2 0x8F5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x58A JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4A8 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 PUSH0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH0 DUP9 GAS CALL DUP1 PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST RETURNDATASIZE SWAP3 POP PUSH0 MLOAD SWAP2 POP POP PUSH0 DUP3 EQ PUSH2 0x527 JUMPI PUSH1 0x1 DUP2 EQ ISZERO PUSH2 0x542 JUMP JUMPDEST PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x584 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57B SWAP2 SWAP1 PUSH2 0x86C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x5A1 JUMPI PUSH2 0x59C DUP3 DUP5 PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST PUSH2 0x5AB DUP4 DUP4 PUSH2 0x5B4 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x5F9 DUP3 PUSH2 0x5D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x609 DUP2 PUSH2 0x5EF JUMP JUMPDEST DUP2 EQ PUSH2 0x613 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x624 DUP2 PUSH2 0x600 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x63C DUP2 PUSH2 0x62A JUMP JUMPDEST DUP2 EQ PUSH2 0x646 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x657 DUP2 PUSH2 0x633 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x67E JUMPI PUSH2 0x67D PUSH2 0x65D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x69B JUMPI PUSH2 0x69A PUSH2 0x661 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x6B7 JUMPI PUSH2 0x6B6 PUSH2 0x665 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6D6 JUMPI PUSH2 0x6D5 PUSH2 0x5C8 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x6E3 DUP8 DUP3 DUP9 ADD PUSH2 0x616 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x6F4 DUP8 DUP3 DUP9 ADD PUSH2 0x649 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x715 JUMPI PUSH2 0x714 PUSH2 0x5CC JUMP JUMPDEST JUMPDEST PUSH2 0x721 DUP8 DUP3 DUP9 ADD PUSH2 0x669 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x741 DUP2 PUSH2 0x72F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x75A PUSH0 DUP4 ADD DUP5 PUSH2 0x738 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x775 JUMPI PUSH2 0x774 PUSH2 0x5C8 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x782 DUP5 DUP3 DUP6 ADD PUSH2 0x616 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x79F DUP2 PUSH2 0x78B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7B8 PUSH0 DUP4 ADD DUP5 PUSH2 0x796 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x7E1 PUSH2 0x7DC PUSH2 0x7D7 DUP5 PUSH2 0x5D0 JUMP JUMPDEST PUSH2 0x7BE JUMP JUMPDEST PUSH2 0x5D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x7F2 DUP3 PUSH2 0x7C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x803 DUP3 PUSH2 0x7E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x813 DUP2 PUSH2 0x7F9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x82C PUSH0 DUP4 ADD DUP5 PUSH2 0x80A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x847 JUMPI PUSH2 0x846 PUSH2 0x5C8 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x854 DUP5 DUP3 DUP6 ADD PUSH2 0x649 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x866 DUP2 PUSH2 0x5EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x87F PUSH0 DUP4 ADD DUP5 PUSH2 0x85D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x88E DUP2 PUSH2 0x62A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x8A7 PUSH0 DUP4 ADD DUP6 PUSH2 0x85D JUMP JUMPDEST PUSH2 0x8B4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x885 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8D5 PUSH2 0x8D0 DUP3 PUSH2 0x72F JUMP JUMPDEST PUSH2 0x8BB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x8E6 DUP3 DUP5 PUSH2 0x8C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 MULMOD 0xE9 PUSH7 0x29AC95EFE75618 GASLIMIT 0x27 PUSH18 0x2E02FF5BC35DEDCDC6591D71E6A34BFD36 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "242:1342:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;806:566;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1380:94;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;605:44;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1482:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;482:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;806:566;911:12;:22;924:8;911:22;;;;;;;;;;;;;;;;;;;;;;;;;908:92;;;957:31;;;;;;;;;;;;;;908:92;1010:12;1069:8;1079:7;1058:29;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1048:40;;;;;;1035:54;;;;;;;;:::i;:::-;;;;;;;;;;;;;1025:65;;;;;;1010:80;;1105:51;1124:11;;1105:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1137:12;1151:4;1105:18;:51::i;:::-;1101:127;;1180:36;;;;;;;;;;;;;;1101:127;1263:4;1238:12;:22;1251:8;1238:22;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;1283:24;1289:8;1299:7;1283:24;;;;;;;:::i;:::-;;;;;;;;1318:46;1346:8;1356:7;1318:14;:27;;;;:46;;;;;:::i;:::-;897:475;806:566;;;;:::o;1380:94::-;1428:7;1454:12;1447:19;;1380:94;:::o;605:44::-;;;;;;;;;;;;;;;;;;;;;;:::o;1482:97::-;1532:6;1557:14;1550:21;;1482:97;:::o;482:25::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1902:154:6:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;2009:40;;1902:154;;;;;:::o;1219:160:4:-;1301:71;1321:5;1343;:14;;;1360:2;1364:5;1328:43;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1301:19;:71::i;:::-;1219:160;;;:::o;2457:308:6:-;2540:7;2559:20;2582:4;2559:27;;2601:9;2613:1;2601:13;;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;;2668:27;:51::i;:::-;2653:66;;2634:3;;;;;;;2596:134;;;;2746:12;2739:19;;;2457:308;;;;:::o;8370:720:4:-;8450:18;8478:19;8616:4;8613:1;8606:4;8600:11;8593:4;8587;8583:15;8580:1;8573:5;8566;8561:60;8673:7;8663:176;;8717:4;8711:11;8762:16;8759:1;8754:3;8739:40;8808:16;8803:3;8796:29;8663:176;8866:16;8852:30;;8916:1;8910:8;8895:23;;8532:396;8956:1;8942:10;:15;:68;;9009:1;8994:11;:16;;8942:68;;;8990:1;8968:5;8960:26;;;:31;8942:68;8938:146;;;9066:5;9033:40;;;;;;;;;;;:::i;:::-;;;;;;;;8938:146;8440:650;;8370:720;;:::o;504:167:5:-;579:7;609:1;605;:5;:59;;640:24;659:1;662;640:18;:24::i;:::-;605:59;;;613:24;632:1;635;613:18;:24::i;:::-;605:59;598:66;;504:167;;;;:::o;791:239::-;864:13;941:1;935:4;928:15;969:1;963:4;956:15;1009:4;1003;993:21;984:30;;791:239;;;;:::o;88:117:9:-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:117::-;1306:1;1303;1296:12;1320:117;1429:1;1426;1419:12;1443:117;1552:1;1549;1542:12;1583:568;1656:8;1666:6;1716:3;1709:4;1701:6;1697:17;1693:27;1683:122;;1724:79;;:::i;:::-;1683:122;1837:6;1824:20;1814:30;;1867:18;1859:6;1856:30;1853:117;;;1889:79;;:::i;:::-;1853:117;2003:4;1995:6;1991:17;1979:29;;2057:3;2049:4;2041:6;2037:17;2027:8;2023:32;2020:41;2017:128;;;2064:79;;:::i;:::-;2017:128;1583:568;;;;;:::o;2157:849::-;2261:6;2269;2277;2285;2334:2;2322:9;2313:7;2309:23;2305:32;2302:119;;;2340:79;;:::i;:::-;2302:119;2460:1;2485:53;2530:7;2521:6;2510:9;2506:22;2485:53;:::i;:::-;2475:63;;2431:117;2587:2;2613:53;2658:7;2649:6;2638:9;2634:22;2613:53;:::i;:::-;2603:63;;2558:118;2743:2;2732:9;2728:18;2715:32;2774:18;2766:6;2763:30;2760:117;;;2796:79;;:::i;:::-;2760:117;2909:80;2981:7;2972:6;2961:9;2957:22;2909:80;:::i;:::-;2891:98;;;;2686:313;2157:849;;;;;;;:::o;3012:77::-;3049:7;3078:5;3067:16;;3012:77;;;:::o;3095:118::-;3182:24;3200:5;3182:24;:::i;:::-;3177:3;3170:37;3095:118;;:::o;3219:222::-;3312:4;3350:2;3339:9;3335:18;3327:26;;3363:71;3431:1;3420:9;3416:17;3407:6;3363:71;:::i;:::-;3219:222;;;;:::o;3447:329::-;3506:6;3555:2;3543:9;3534:7;3530:23;3526:32;3523:119;;;3561:79;;:::i;:::-;3523:119;3681:1;3706:53;3751:7;3742:6;3731:9;3727:22;3706:53;:::i;:::-;3696:63;;3652:117;3447:329;;;;:::o;3782:90::-;3816:7;3859:5;3852:13;3845:21;3834:32;;3782:90;;;:::o;3878:109::-;3959:21;3974:5;3959:21;:::i;:::-;3954:3;3947:34;3878:109;;:::o;3993:210::-;4080:4;4118:2;4107:9;4103:18;4095:26;;4131:65;4193:1;4182:9;4178:17;4169:6;4131:65;:::i;:::-;3993:210;;;;:::o;4209:60::-;4237:3;4258:5;4251:12;;4209:60;;;:::o;4275:142::-;4325:9;4358:53;4376:34;4385:24;4403:5;4385:24;:::i;:::-;4376:34;:::i;:::-;4358:53;:::i;:::-;4345:66;;4275:142;;;:::o;4423:126::-;4473:9;4506:37;4537:5;4506:37;:::i;:::-;4493:50;;4423:126;;;:::o;4555:140::-;4619:9;4652:37;4683:5;4652:37;:::i;:::-;4639:50;;4555:140;;;:::o;4701:159::-;4802:51;4847:5;4802:51;:::i;:::-;4797:3;4790:64;4701:159;;:::o;4866:250::-;4973:4;5011:2;5000:9;4996:18;4988:26;;5024:85;5106:1;5095:9;5091:17;5082:6;5024:85;:::i;:::-;4866:250;;;;:::o;5122:329::-;5181:6;5230:2;5218:9;5209:7;5205:23;5201:32;5198:119;;;5236:79;;:::i;:::-;5198:119;5356:1;5381:53;5426:7;5417:6;5406:9;5402:22;5381:53;:::i;:::-;5371:63;;5327:117;5122:329;;;;:::o;5457:118::-;5544:24;5562:5;5544:24;:::i;:::-;5539:3;5532:37;5457:118;;:::o;5581:222::-;5674:4;5712:2;5701:9;5697:18;5689:26;;5725:71;5793:1;5782:9;5778:17;5769:6;5725:71;:::i;:::-;5581:222;;;;:::o;5809:118::-;5896:24;5914:5;5896:24;:::i;:::-;5891:3;5884:37;5809:118;;:::o;5933:332::-;6054:4;6092:2;6081:9;6077:18;6069:26;;6105:71;6173:1;6162:9;6158:17;6149:6;6105:71;:::i;:::-;6186:72;6254:2;6243:9;6239:18;6230:6;6186:72;:::i;:::-;5933:332;;;;;:::o;6271:79::-;6310:7;6339:5;6328:16;;6271:79;;;:::o;6356:157::-;6461:45;6481:24;6499:5;6481:24;:::i;:::-;6461:45;:::i;:::-;6456:3;6449:58;6356:157;;:::o;6519:256::-;6631:3;6646:75;6717:3;6708:6;6646:75;:::i;:::-;6746:2;6741:3;6737:12;6730:19;;6766:3;6759:10;;6519:256;;;;:::o;6781:180::-;6829:77;6826:1;6819:88;6926:4;6923:1;6916:15;6950:4;6947:1;6940:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "478400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"claim(address,uint256,bytes32[])": "infinite",
								"claimers(uint256)": "5009",
								"getAirdroptoken()": "infinite",
								"getMerkleRoot()": "infinite",
								"s_hasClaimed(address)": "2855"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "C0"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 658,
									"end": 798,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "tag",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 658,
									"end": 798,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 738,
									"end": 749,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 723,
									"end": 749,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 723,
									"end": 749,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 723,
									"end": 749,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 723,
									"end": 749,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 723,
									"end": 749,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 723,
									"end": 749,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 777,
									"end": 790,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 760,
									"end": 790,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 760,
									"end": 790,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 760,
									"end": 790,
									"name": "PUSH",
									"source": 8,
									"value": "A0"
								},
								{
									"begin": 760,
									"end": 790,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 760,
									"end": 790,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 760,
									"end": 790,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 760,
									"end": 790,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 760,
									"end": 790,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 760,
									"end": 790,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 760,
									"end": 790,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 658,
									"end": 798,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "6"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 334,
									"end": 411,
									"name": "tag",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 411,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 400,
									"end": 405,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 389,
									"end": 405,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 389,
									"end": 405,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 334,
									"end": 411,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 334,
									"end": 411,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 334,
									"end": 411,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 334,
									"end": 411,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 417,
									"end": 539,
									"name": "tag",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 417,
									"end": 539,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 490,
									"end": 514,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 508,
									"end": 513,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 490,
									"end": 514,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 490,
									"end": 514,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 490,
									"end": 514,
									"name": "tag",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 490,
									"end": 514,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 483,
									"end": 488,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 480,
									"end": 515,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 470,
									"end": 533,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 470,
									"end": 533,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 529,
									"end": 530,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 526,
									"end": 527,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 519,
									"end": 531,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 470,
									"end": 533,
									"name": "tag",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 470,
									"end": 533,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 417,
									"end": 539,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 417,
									"end": 539,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 545,
									"end": 688,
									"name": "tag",
									"source": 9,
									"value": "12"
								},
								{
									"begin": 545,
									"end": 688,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 602,
									"end": 607,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 633,
									"end": 639,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 627,
									"end": 640,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 618,
									"end": 640,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 618,
									"end": 640,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 649,
									"end": 682,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "27"
								},
								{
									"begin": 676,
									"end": 681,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 649,
									"end": 682,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 649,
									"end": 682,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 649,
									"end": 682,
									"name": "tag",
									"source": 9,
									"value": "27"
								},
								{
									"begin": 649,
									"end": 682,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 545,
									"end": 688,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 545,
									"end": 688,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 545,
									"end": 688,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 545,
									"end": 688,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 545,
									"end": 688,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 694,
									"end": 820,
									"name": "tag",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 694,
									"end": 820,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 731,
									"end": 738,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 771,
									"end": 813,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 764,
									"end": 769,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 760,
									"end": 814,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 749,
									"end": 814,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 749,
									"end": 814,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 694,
									"end": 820,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 694,
									"end": 820,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 694,
									"end": 820,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 694,
									"end": 820,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 826,
									"end": 922,
									"name": "tag",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 826,
									"end": 922,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 863,
									"end": 870,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 892,
									"end": 916,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 910,
									"end": 915,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 892,
									"end": 916,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 892,
									"end": 916,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 892,
									"end": 916,
									"name": "tag",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 892,
									"end": 916,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 881,
									"end": 916,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 881,
									"end": 916,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 826,
									"end": 922,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 826,
									"end": 922,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 826,
									"end": 922,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 826,
									"end": 922,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 928,
									"end": 1038,
									"name": "tag",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 928,
									"end": 1038,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 979,
									"end": 986,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1008,
									"end": 1032,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 1026,
									"end": 1031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1008,
									"end": 1032,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 1008,
									"end": 1032,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1008,
									"end": 1032,
									"name": "tag",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 1008,
									"end": 1032,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 997,
									"end": 1032,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 997,
									"end": 1032,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 928,
									"end": 1038,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 928,
									"end": 1038,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 928,
									"end": 1038,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 928,
									"end": 1038,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1044,
									"end": 1194,
									"name": "tag",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 1044,
									"end": 1194,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1131,
									"end": 1169,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 1163,
									"end": 1168,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1131,
									"end": 1169,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 1131,
									"end": 1169,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1131,
									"end": 1169,
									"name": "tag",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 1131,
									"end": 1169,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1124,
									"end": 1129,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1121,
									"end": 1170,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 1111,
									"end": 1188,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 1111,
									"end": 1188,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1184,
									"end": 1185,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1181,
									"end": 1182,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1174,
									"end": 1186,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1111,
									"end": 1188,
									"name": "tag",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 1111,
									"end": 1188,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1044,
									"end": 1194,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1044,
									"end": 1194,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1200,
									"end": 1371,
									"name": "tag",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 1200,
									"end": 1371,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1271,
									"end": 1276,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1302,
									"end": 1308,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1296,
									"end": 1309,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1287,
									"end": 1309,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1287,
									"end": 1309,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1318,
									"end": 1365,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "37"
								},
								{
									"begin": 1359,
									"end": 1364,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1318,
									"end": 1365,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 1318,
									"end": 1365,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1318,
									"end": 1365,
									"name": "tag",
									"source": 9,
									"value": "37"
								},
								{
									"begin": 1318,
									"end": 1365,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1200,
									"end": 1371,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1200,
									"end": 1371,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1200,
									"end": 1371,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1200,
									"end": 1371,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1200,
									"end": 1371,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1377,
									"end": 1912,
									"name": "tag",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1377,
									"end": 1912,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1470,
									"end": 1476,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1478,
									"end": 1484,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1527,
									"end": 1529,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1515,
									"end": 1524,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1506,
									"end": 1513,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1502,
									"end": 1525,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1498,
									"end": 1530,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 1495,
									"end": 1614,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1495,
									"end": 1614,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 1495,
									"end": 1614,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1533,
									"end": 1612,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1533,
									"end": 1612,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 1533,
									"end": 1612,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1533,
									"end": 1612,
									"name": "tag",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1533,
									"end": 1612,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1495,
									"end": 1614,
									"name": "tag",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 1495,
									"end": 1614,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1653,
									"end": 1654,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1678,
									"end": 1742,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1734,
									"end": 1741,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1725,
									"end": 1731,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1714,
									"end": 1723,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1710,
									"end": 1732,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1678,
									"end": 1742,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "12"
								},
								{
									"begin": 1678,
									"end": 1742,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1678,
									"end": 1742,
									"name": "tag",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1678,
									"end": 1742,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1668,
									"end": 1742,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1668,
									"end": 1742,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1624,
									"end": 1752,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1791,
									"end": 1793,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1817,
									"end": 1895,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "42"
								},
								{
									"begin": 1887,
									"end": 1894,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1878,
									"end": 1884,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1867,
									"end": 1876,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1863,
									"end": 1885,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1817,
									"end": 1895,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 1817,
									"end": 1895,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1817,
									"end": 1895,
									"name": "tag",
									"source": 9,
									"value": "42"
								},
								{
									"begin": 1817,
									"end": 1895,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1807,
									"end": 1895,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1807,
									"end": 1895,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1762,
									"end": 1905,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1377,
									"end": 1912,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1377,
									"end": 1912,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1377,
									"end": 1912,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1377,
									"end": 1912,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1377,
									"end": 1912,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1377,
									"end": 1912,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "tag",
									"source": 8,
									"value": "6"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "A0"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "1785"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "1782"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 242,
									"end": 1584,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202309e96629ac95efe75618452771002e02ff5bc35dedcdc6591d71e6a34bfd3664736f6c634300081e0033",
									".code": [
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "3D13F874"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "49590657"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "4A5AAE37"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "5D70FA3C"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "99AE559D"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 242,
											"end": 1584,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 806,
											"end": 1372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 806,
											"end": 1372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "tag",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 1380,
											"end": 1474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 1380,
											"end": 1474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 605,
											"end": 649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 605,
											"end": 649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 605,
											"end": 649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "tag",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 1482,
											"end": 1579,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 1482,
											"end": 1579,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 482,
											"end": 507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 482,
											"end": 507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 482,
											"end": 507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "tag",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 911,
											"end": 923,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 924,
											"end": 932,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 911,
											"end": 933,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 908,
											"end": 1000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 908,
											"end": 1000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 908,
											"end": 1000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 957,
											"end": 988,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "PUSH",
											"source": 8,
											"value": "1AC2170B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 957,
											"end": 988,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 957,
											"end": 988,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 957,
											"end": 988,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 957,
											"end": 988,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 908,
											"end": 1000,
											"name": "tag",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 908,
											"end": 1000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1022,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1069,
											"end": 1077,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1079,
											"end": 1086,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 1058,
											"end": 1087,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1088,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1088,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1088,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1088,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1048,
											"end": 1088,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1088,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 1035,
											"end": 1089,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1035,
											"end": 1089,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1090,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1090,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1090,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1090,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1025,
											"end": 1090,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1090,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1090,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1090,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 1124,
											"end": 1135,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1124,
											"end": 1135,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1137,
											"end": 1149,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1782"
										},
										{
											"begin": 1151,
											"end": 1155,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1123,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 1105,
											"end": 1156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 1105,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1101,
											"end": 1228,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1101,
											"end": 1228,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "PUSH",
											"source": 8,
											"value": "AA894AFB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1180,
											"end": 1216,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1101,
											"end": 1228,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1101,
											"end": 1228,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1263,
											"end": 1267,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1238,
											"end": 1250,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1251,
											"end": 1259,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1260,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1238,
											"end": 1267,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "PUSH",
											"source": 8,
											"value": "47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4"
										},
										{
											"begin": 1289,
											"end": 1297,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1299,
											"end": 1306,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 1283,
											"end": 1307,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "tag",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1283,
											"end": 1307,
											"name": "LOG1",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1346,
											"end": 1354,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1356,
											"end": 1363,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1332,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1785"
										},
										{
											"begin": 1318,
											"end": 1345,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1318,
											"end": 1345,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "43"
										},
										{
											"begin": 1318,
											"end": 1345,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1318,
											"end": 1364,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 897,
											"end": 1372,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 1372,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "tag",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1428,
											"end": 1435,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1454,
											"end": 1466,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1782"
										},
										{
											"begin": 1447,
											"end": 1466,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1447,
											"end": 1466,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1380,
											"end": 1474,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 605,
											"end": 649,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 649,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "tag",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1532,
											"end": 1538,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1557,
											"end": 1571,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1785"
										},
										{
											"begin": 1550,
											"end": 1571,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1550,
											"end": 1571,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1579,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "tag",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 482,
											"end": 507,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 482,
											"end": 507,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "tag",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1993,
											"end": 1997,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2045,
											"end": 2049,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 2029,
											"end": 2034,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2036,
											"end": 2040,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2016,
											"end": 2028,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 2016,
											"end": 2041,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "tag",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2016,
											"end": 2049,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2009,
											"end": 2049,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2009,
											"end": 2049,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1902,
											"end": 2056,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1301,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 1321,
											"end": 1326,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1343,
											"end": 1348,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1343,
											"end": 1357,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1343,
											"end": 1357,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1343,
											"end": 1357,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 1360,
											"end": 1362,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1364,
											"end": 1369,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 1328,
											"end": 1371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "tag",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "54"
										},
										{
											"begin": 1301,
											"end": 1372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1301,
											"end": 1372,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 1301,
											"end": 1372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "tag",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2540,
											"end": 2547,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2559,
											"end": 2579,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2582,
											"end": 2586,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2559,
											"end": 2586,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2559,
											"end": 2586,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2601,
											"end": 2610,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2613,
											"end": 2614,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2601,
											"end": 2614,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2601,
											"end": 2614,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2620,
											"end": 2625,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2620,
											"end": 2632,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2616,
											"end": 2617,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 2696,
											"end": 2708,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2715,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2716,
											"end": 2717,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 2710,
											"end": 2718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2668,
											"end": 2695,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 2668,
											"end": 2719,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2653,
											"end": 2719,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2653,
											"end": 2719,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2746,
											"end": 2758,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2739,
											"end": 2758,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2739,
											"end": 2758,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2739,
											"end": 2758,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2765,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "tag",
											"source": 4,
											"value": "54"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8450,
											"end": 8468,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8478,
											"end": 8497,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8616,
											"end": 8620,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8613,
											"end": 8614,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8606,
											"end": 8610,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8600,
											"end": 8611,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8593,
											"end": 8597,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8587,
											"end": 8591,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 8583,
											"end": 8598,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8580,
											"end": 8581,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8573,
											"end": 8578,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 8566,
											"end": 8571,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 8561,
											"end": 8621,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 8673,
											"end": 8680,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8663,
											"end": 8839,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 8663,
											"end": 8839,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8717,
											"end": 8721,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8711,
											"end": 8722,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8762,
											"end": 8778,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8759,
											"end": 8760,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8754,
											"end": 8757,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8739,
											"end": 8779,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 8808,
											"end": 8824,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8803,
											"end": 8806,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8796,
											"end": 8825,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8663,
											"end": 8839,
											"name": "tag",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 8663,
											"end": 8839,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8866,
											"end": 8882,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8852,
											"end": 8882,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8852,
											"end": 8882,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8916,
											"end": 8917,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8910,
											"end": 8918,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 8918,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 8918,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8532,
											"end": 8928,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8956,
											"end": 8957,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8942,
											"end": 8952,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9009,
											"end": 9010,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 8994,
											"end": 9005,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8990,
											"end": 8991,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8968,
											"end": 8973,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8960,
											"end": 8986,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8960,
											"end": 8986,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8960,
											"end": 8986,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 8960,
											"end": 8991,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9066,
											"end": 9071,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 4,
											"value": "5274AFE700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 9033,
											"end": 9073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8440,
											"end": 9090,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8440,
											"end": 9090,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8370,
											"end": 9090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 504,
											"end": 671,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 504,
											"end": 671,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 579,
											"end": 586,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 610,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 605,
											"end": 606,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 605,
											"end": 610,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 605,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 640,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 659,
											"end": 660,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 662,
											"end": 663,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 640,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 640,
											"end": 664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 640,
											"end": 664,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 640,
											"end": 664,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 605,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 605,
											"end": 664,
											"name": "tag",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 613,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 632,
											"end": 633,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 635,
											"end": 636,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 613,
											"end": 631,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 613,
											"end": 637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 613,
											"end": 637,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 613,
											"end": 637,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 605,
											"end": 664,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 598,
											"end": 664,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 598,
											"end": 664,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 504,
											"end": 671,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 504,
											"end": 671,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 504,
											"end": 671,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 504,
											"end": 671,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 504,
											"end": 671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 791,
											"end": 1030,
											"name": "tag",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 791,
											"end": 1030,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 864,
											"end": 877,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 941,
											"end": 942,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 935,
											"end": 939,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 928,
											"end": 943,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 969,
											"end": 970,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 963,
											"end": 967,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 956,
											"end": 971,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1009,
											"end": 1013,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1003,
											"end": 1007,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 984,
											"end": 1014,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 984,
											"end": 1014,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 791,
											"end": 1030,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 791,
											"end": 1030,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 791,
											"end": 1030,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 791,
											"end": 1030,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 791,
											"end": 1030,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 841,
											"end": 918,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 912,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 896,
											"end": 912,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 896,
											"end": 912,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "tag",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 1015,
											"end": 1020,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 997,
											"end": 1021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 990,
											"end": 995,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 987,
											"end": 1022,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1026,
											"end": 1038,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 924,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1098,
											"end": 1103,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 1152,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "tag",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1314,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 1197,
											"end": 1314,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1306,
											"end": 1307,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1303,
											"end": 1304,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1296,
											"end": 1308,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1320,
											"end": 1437,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 1320,
											"end": 1437,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1429,
											"end": 1430,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1427,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1419,
											"end": 1431,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1443,
											"end": 1560,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 1443,
											"end": 1560,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1552,
											"end": 1553,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1549,
											"end": 1550,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1542,
											"end": 1554,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1583,
											"end": 2151,
											"name": "tag",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 1583,
											"end": 2151,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1656,
											"end": 1664,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1666,
											"end": 1672,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1716,
											"end": 1719,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1709,
											"end": 1713,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1701,
											"end": 1707,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1697,
											"end": 1714,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1693,
											"end": 1720,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1683,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 1683,
											"end": 1805,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1724,
											"end": 1803,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 1724,
											"end": 1803,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 1724,
											"end": 1803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1724,
											"end": 1803,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 1724,
											"end": 1803,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1683,
											"end": 1805,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 1683,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1837,
											"end": 1843,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1824,
											"end": 1844,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1867,
											"end": 1885,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1859,
											"end": 1865,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1856,
											"end": 1886,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1970,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 1853,
											"end": 1970,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1889,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 1889,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 1889,
											"end": 1968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1889,
											"end": 1968,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 1889,
											"end": 1968,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1970,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 1853,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2003,
											"end": 2007,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1995,
											"end": 2001,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1991,
											"end": 2008,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1979,
											"end": 2008,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1979,
											"end": 2008,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2057,
											"end": 2060,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2049,
											"end": 2053,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2041,
											"end": 2047,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2037,
											"end": 2054,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2027,
											"end": 2035,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2023,
											"end": 2055,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2020,
											"end": 2061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2145,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2145,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 2017,
											"end": 2145,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2064,
											"end": 2143,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 2064,
											"end": 2143,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 2064,
											"end": 2143,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2064,
											"end": 2143,
											"name": "tag",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 2064,
											"end": 2143,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2145,
											"name": "tag",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 2017,
											"end": 2145,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1583,
											"end": 2151,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1583,
											"end": 2151,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1583,
											"end": 2151,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1583,
											"end": 2151,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1583,
											"end": 2151,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1583,
											"end": 2151,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2261,
											"end": 2267,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2269,
											"end": 2275,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2277,
											"end": 2283,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2285,
											"end": 2291,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2334,
											"end": 2336,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2322,
											"end": 2331,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2313,
											"end": 2320,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2309,
											"end": 2332,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2305,
											"end": 2337,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2302,
											"end": 2421,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2302,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 2302,
											"end": 2421,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2340,
											"end": 2419,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2340,
											"end": 2419,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 2340,
											"end": 2419,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2340,
											"end": 2419,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2340,
											"end": 2419,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2302,
											"end": 2421,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 2302,
											"end": 2421,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2460,
											"end": 2461,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2485,
											"end": 2538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 2530,
											"end": 2537,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2521,
											"end": 2527,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2510,
											"end": 2519,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2506,
											"end": 2528,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2485,
											"end": 2538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 2485,
											"end": 2538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2485,
											"end": 2538,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 2485,
											"end": 2538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2475,
											"end": 2538,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2475,
											"end": 2538,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2548,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2587,
											"end": 2589,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 2658,
											"end": 2665,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2649,
											"end": 2655,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2638,
											"end": 2647,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2634,
											"end": 2656,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 2613,
											"end": 2666,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "tag",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 2613,
											"end": 2666,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2603,
											"end": 2666,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2603,
											"end": 2666,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2558,
											"end": 2676,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2743,
											"end": 2745,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2732,
											"end": 2741,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2746,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2715,
											"end": 2747,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2792,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2766,
											"end": 2772,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2763,
											"end": 2793,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2760,
											"end": 2877,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2760,
											"end": 2877,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 2760,
											"end": 2877,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2796,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2796,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 2796,
											"end": 2875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2796,
											"end": 2875,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2796,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2760,
											"end": 2877,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 2760,
											"end": 2877,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2909,
											"end": 2989,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2981,
											"end": 2988,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2972,
											"end": 2978,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2961,
											"end": 2970,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2957,
											"end": 2979,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2909,
											"end": 2989,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 2909,
											"end": 2989,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2909,
											"end": 2989,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2909,
											"end": 2989,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2891,
											"end": 2989,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2891,
											"end": 2989,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2891,
											"end": 2989,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2891,
											"end": 2989,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2686,
											"end": 2999,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2157,
											"end": 3006,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3089,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3012,
											"end": 3089,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3049,
											"end": 3056,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3078,
											"end": 3083,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3067,
											"end": 3083,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3067,
											"end": 3083,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3089,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3089,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3089,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3089,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3095,
											"end": 3213,
											"name": "tag",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3095,
											"end": 3213,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3182,
											"end": 3206,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 3200,
											"end": 3205,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3182,
											"end": 3206,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3182,
											"end": 3206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3182,
											"end": 3206,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 3182,
											"end": 3206,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3177,
											"end": 3180,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3170,
											"end": 3207,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3095,
											"end": 3213,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3095,
											"end": 3213,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3095,
											"end": 3213,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3441,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 3219,
											"end": 3441,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3312,
											"end": 3316,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3350,
											"end": 3352,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3339,
											"end": 3348,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3335,
											"end": 3353,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3327,
											"end": 3353,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3327,
											"end": 3353,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3363,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3431,
											"end": 3432,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3420,
											"end": 3429,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3416,
											"end": 3433,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3407,
											"end": 3413,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3363,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3363,
											"end": 3434,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3363,
											"end": 3434,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3363,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3441,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3441,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3441,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3441,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3441,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3776,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 3447,
											"end": 3776,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3512,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3555,
											"end": 3557,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3543,
											"end": 3552,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3534,
											"end": 3541,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3530,
											"end": 3553,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3526,
											"end": 3558,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 3523,
											"end": 3642,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3523,
											"end": 3642,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 3523,
											"end": 3642,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3561,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 3561,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 3561,
											"end": 3640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3561,
											"end": 3640,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 3561,
											"end": 3640,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3523,
											"end": 3642,
											"name": "tag",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 3523,
											"end": 3642,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3681,
											"end": 3682,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3706,
											"end": 3759,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 3751,
											"end": 3758,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3742,
											"end": 3748,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3740,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3749,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3706,
											"end": 3759,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 3706,
											"end": 3759,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3706,
											"end": 3759,
											"name": "tag",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 3706,
											"end": 3759,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3696,
											"end": 3759,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3696,
											"end": 3759,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3652,
											"end": 3769,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3776,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3776,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3776,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3776,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3447,
											"end": 3776,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3872,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 3782,
											"end": 3872,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3816,
											"end": 3823,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3859,
											"end": 3864,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3852,
											"end": 3865,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3845,
											"end": 3866,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3834,
											"end": 3866,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3834,
											"end": 3866,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3872,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3872,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3872,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3872,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3878,
											"end": 3987,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 3878,
											"end": 3987,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3959,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 3974,
											"end": 3979,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3959,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 3959,
											"end": 3980,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3959,
											"end": 3980,
											"name": "tag",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 3959,
											"end": 3980,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3954,
											"end": 3957,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3947,
											"end": 3981,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3878,
											"end": 3987,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3878,
											"end": 3987,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3878,
											"end": 3987,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4203,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 3993,
											"end": 4203,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4080,
											"end": 4084,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4118,
											"end": 4120,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4107,
											"end": 4116,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4103,
											"end": 4121,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4095,
											"end": 4121,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4095,
											"end": 4121,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4131,
											"end": 4196,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 4193,
											"end": 4194,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4182,
											"end": 4191,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4178,
											"end": 4195,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4169,
											"end": 4175,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4131,
											"end": 4196,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 4131,
											"end": 4196,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4131,
											"end": 4196,
											"name": "tag",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 4131,
											"end": 4196,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4203,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4203,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4203,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4203,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4203,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4209,
											"end": 4269,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 4209,
											"end": 4269,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4237,
											"end": 4240,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4258,
											"end": 4263,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4251,
											"end": 4263,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4251,
											"end": 4263,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4209,
											"end": 4269,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4209,
											"end": 4269,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4209,
											"end": 4269,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4209,
											"end": 4269,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4275,
											"end": 4417,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 4275,
											"end": 4417,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4325,
											"end": 4334,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4358,
											"end": 4411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 4376,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 4385,
											"end": 4409,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 4403,
											"end": 4408,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4385,
											"end": 4409,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 4385,
											"end": 4409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4385,
											"end": 4409,
											"name": "tag",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 4385,
											"end": 4409,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4376,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 4376,
											"end": 4410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4376,
											"end": 4410,
											"name": "tag",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 4376,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4358,
											"end": 4411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 4358,
											"end": 4411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4358,
											"end": 4411,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 4358,
											"end": 4411,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4345,
											"end": 4411,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4345,
											"end": 4411,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4275,
											"end": 4417,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4275,
											"end": 4417,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4275,
											"end": 4417,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4275,
											"end": 4417,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4423,
											"end": 4549,
											"name": "tag",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 4423,
											"end": 4549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4473,
											"end": 4482,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4506,
											"end": 4543,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 4537,
											"end": 4542,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4506,
											"end": 4543,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 4506,
											"end": 4543,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4506,
											"end": 4543,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 4506,
											"end": 4543,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4493,
											"end": 4543,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4493,
											"end": 4543,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4423,
											"end": 4549,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4423,
											"end": 4549,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4423,
											"end": 4549,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4423,
											"end": 4549,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4555,
											"end": 4695,
											"name": "tag",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 4555,
											"end": 4695,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4619,
											"end": 4628,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4652,
											"end": 4689,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 4683,
											"end": 4688,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4652,
											"end": 4689,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 4652,
											"end": 4689,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4652,
											"end": 4689,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 4652,
											"end": 4689,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4639,
											"end": 4689,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4639,
											"end": 4689,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4555,
											"end": 4695,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4555,
											"end": 4695,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4555,
											"end": 4695,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4555,
											"end": 4695,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4701,
											"end": 4860,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 4701,
											"end": 4860,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4802,
											"end": 4853,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 4847,
											"end": 4852,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4802,
											"end": 4853,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 4802,
											"end": 4853,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4802,
											"end": 4853,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 4802,
											"end": 4853,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4800,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4790,
											"end": 4854,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4701,
											"end": 4860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4701,
											"end": 4860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4701,
											"end": 4860,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4866,
											"end": 5116,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 4866,
											"end": 5116,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4973,
											"end": 4977,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5011,
											"end": 5013,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5000,
											"end": 5009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4996,
											"end": 5014,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4988,
											"end": 5014,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4988,
											"end": 5014,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5024,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 5106,
											"end": 5107,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5095,
											"end": 5104,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5091,
											"end": 5108,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5082,
											"end": 5088,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5024,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 5024,
											"end": 5109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5024,
											"end": 5109,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 5024,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4866,
											"end": 5116,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4866,
											"end": 5116,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4866,
											"end": 5116,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4866,
											"end": 5116,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4866,
											"end": 5116,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5122,
											"end": 5451,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 5122,
											"end": 5451,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5181,
											"end": 5187,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5230,
											"end": 5232,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5218,
											"end": 5227,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5209,
											"end": 5216,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5205,
											"end": 5228,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5201,
											"end": 5233,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 5198,
											"end": 5317,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5198,
											"end": 5317,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 5198,
											"end": 5317,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5315,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 5236,
											"end": 5315,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 5236,
											"end": 5315,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5315,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 5236,
											"end": 5315,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5198,
											"end": 5317,
											"name": "tag",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 5198,
											"end": 5317,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5356,
											"end": 5357,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5381,
											"end": 5434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 5426,
											"end": 5433,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5417,
											"end": 5423,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5406,
											"end": 5415,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5402,
											"end": 5424,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5381,
											"end": 5434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 5381,
											"end": 5434,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5381,
											"end": 5434,
											"name": "tag",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 5381,
											"end": 5434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5371,
											"end": 5434,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5371,
											"end": 5434,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5327,
											"end": 5444,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5122,
											"end": 5451,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5122,
											"end": 5451,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5122,
											"end": 5451,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5122,
											"end": 5451,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5122,
											"end": 5451,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5457,
											"end": 5575,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 5457,
											"end": 5575,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5544,
											"end": 5568,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 5562,
											"end": 5567,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5544,
											"end": 5568,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 5544,
											"end": 5568,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5544,
											"end": 5568,
											"name": "tag",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 5544,
											"end": 5568,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5539,
											"end": 5542,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5532,
											"end": 5569,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5457,
											"end": 5575,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5457,
											"end": 5575,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5457,
											"end": 5575,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5581,
											"end": 5803,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 5581,
											"end": 5803,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5674,
											"end": 5678,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5712,
											"end": 5714,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5701,
											"end": 5710,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5697,
											"end": 5715,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5689,
											"end": 5715,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5689,
											"end": 5715,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5725,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 5793,
											"end": 5794,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5791,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5778,
											"end": 5795,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5769,
											"end": 5775,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5725,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 5725,
											"end": 5796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5725,
											"end": 5796,
											"name": "tag",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 5725,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5581,
											"end": 5803,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5581,
											"end": 5803,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5581,
											"end": 5803,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5581,
											"end": 5803,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5581,
											"end": 5803,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5809,
											"end": 5927,
											"name": "tag",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 5809,
											"end": 5927,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5896,
											"end": 5920,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 5914,
											"end": 5919,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5896,
											"end": 5920,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5896,
											"end": 5920,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5896,
											"end": 5920,
											"name": "tag",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 5896,
											"end": 5920,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5891,
											"end": 5894,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5884,
											"end": 5921,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5809,
											"end": 5927,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5809,
											"end": 5927,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5809,
											"end": 5927,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5933,
											"end": 6265,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 5933,
											"end": 6265,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6054,
											"end": 6058,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6092,
											"end": 6094,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6081,
											"end": 6090,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6077,
											"end": 6095,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6069,
											"end": 6095,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6069,
											"end": 6095,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6105,
											"end": 6176,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 6173,
											"end": 6174,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6162,
											"end": 6171,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6158,
											"end": 6175,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6149,
											"end": 6155,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6105,
											"end": 6176,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 6105,
											"end": 6176,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6105,
											"end": 6176,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 6105,
											"end": 6176,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6186,
											"end": 6258,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 6254,
											"end": 6256,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6243,
											"end": 6252,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6239,
											"end": 6257,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6230,
											"end": 6236,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6186,
											"end": 6258,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 6186,
											"end": 6258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6186,
											"end": 6258,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 6186,
											"end": 6258,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5933,
											"end": 6265,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5933,
											"end": 6265,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5933,
											"end": 6265,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5933,
											"end": 6265,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5933,
											"end": 6265,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5933,
											"end": 6265,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6271,
											"end": 6350,
											"name": "tag",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 6271,
											"end": 6350,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6310,
											"end": 6317,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6339,
											"end": 6344,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6328,
											"end": 6344,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6328,
											"end": 6344,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6271,
											"end": 6350,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6271,
											"end": 6350,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6271,
											"end": 6350,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6271,
											"end": 6350,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6356,
											"end": 6513,
											"name": "tag",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 6356,
											"end": 6513,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6461,
											"end": 6506,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 6481,
											"end": 6505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 6499,
											"end": 6504,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6481,
											"end": 6505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 6481,
											"end": 6505,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6481,
											"end": 6505,
											"name": "tag",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 6481,
											"end": 6505,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6461,
											"end": 6506,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 6461,
											"end": 6506,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6461,
											"end": 6506,
											"name": "tag",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 6461,
											"end": 6506,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6456,
											"end": 6459,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6449,
											"end": 6507,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6356,
											"end": 6513,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6356,
											"end": 6513,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6356,
											"end": 6513,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6519,
											"end": 6775,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 6519,
											"end": 6775,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6631,
											"end": 6634,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6646,
											"end": 6721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 6717,
											"end": 6720,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6708,
											"end": 6714,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6646,
											"end": 6721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 6646,
											"end": 6721,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6646,
											"end": 6721,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 6646,
											"end": 6721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6746,
											"end": 6748,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6741,
											"end": 6744,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6737,
											"end": 6749,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6730,
											"end": 6749,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6730,
											"end": 6749,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6766,
											"end": 6769,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6759,
											"end": 6769,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6759,
											"end": 6769,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6519,
											"end": 6775,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6519,
											"end": 6775,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6519,
											"end": 6775,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6519,
											"end": 6775,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6519,
											"end": 6775,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6781,
											"end": 6961,
											"name": "tag",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 6781,
											"end": 6961,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6829,
											"end": 6906,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6826,
											"end": 6827,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6819,
											"end": 6907,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6926,
											"end": 6930,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 6923,
											"end": 6924,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6916,
											"end": 6931,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6950,
											"end": 6954,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 6947,
											"end": 6948,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6940,
											"end": 6955,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/cryptography/Hashes.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/MerkleAirdrop.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"claim(address,uint256,bytes32[])": "3d13f874",
							"claimers(uint256)": "99ae559d",
							"getAirdroptoken()": "5d70fa3c",
							"getMerkleRoot()": "49590657",
							"s_hasClaimed(address)": "4a5aae37"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_markleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_airdropToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MerkleAirdrop__AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleAirdrop__MerkleProofNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"markleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirdroptoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MerkleAirdrop.sol\":\"MerkleAirdrop\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xa2d847c6ad19f5b8ac7c6f4c462bb4c1fd76307cb17478c49743354cf122f77f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb88894b8d6c2967694114eceba85a4dd40d7adea390e20e766657cb6d5d4be\",\"dweb:/ipfs/QmQQVNAzL8PnhUCYzSvSoiEzuqNtEroBmyBgqCJ9hbKJ5B\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]},\"src/MerkleAirdrop.sol\":{\"keccak256\":\"0xb15bef06ee41365b5951397b1e9633465c816511eed30d4e3b9ad460fe780b08\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548816bf17df57bc3b43241a680fd4ebd337823f1609a9a34bd217d24a3c953b\",\"dweb:/ipfs/QmTN7g79SwnVYqvJN8M6JcG91GuWNt3yhmDS45a3sJN1VA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1780,
								"contract": "src/MerkleAirdrop.sol:MerkleAirdrop",
								"label": "claimers",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 1789,
								"contract": "src/MerkleAirdrop.sol:MerkleAirdrop",
								"label": "s_hasClaimed",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
					"exportedSymbols": {
						"IERC1363": [
							81
						],
						"IERC165": [
							1756
						],
						"IERC20": [
							167
						]
					},
					"id": 82,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 90,
							"src": "133:36:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "141:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 86,
							"src": "170:38:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1756,
										"src": "178:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "IERC20",
										"nameLocations": [
											"590:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 167,
										"src": "590:6:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "590:6:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC165",
										"nameLocations": [
											"598:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1756,
										"src": "598:7:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "598:7:0"
								}
							],
							"canonicalName": "IERC1363",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "210:357:0",
								"text": " @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."
							},
							"fullyImplemented": false,
							"id": 81,
							"linearizedBaseContracts": [
								81,
								1756,
								167
							],
							"name": "IERC1363",
							"nameLocation": "578:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "1148:370:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "1296ee62",
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "1532:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1556:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1548:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1548:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1568:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1560:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1560:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:27:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1593:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 17,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1593:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:6:0"
									},
									"scope": 81,
									"src": "1523:76:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1605:453:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "4000aea0",
									"id": 32,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "2072:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2096:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2088:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2088:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2108:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2100:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2100:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2130:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2115:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 26,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2115:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2087:48:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2154:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2154:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2153:6:0"
									},
									"scope": 81,
									"src": "2063:97:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "2166:453:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "d8fbe994",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "2633:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2661:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2653:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2675:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2667:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2667:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2687:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2679:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2652:41:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2712:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2712:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:6:0"
									},
									"scope": 81,
									"src": "2624:94:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2724:536:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "c1d34b89",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "3274:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3302:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3294:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3316:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3308:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3328:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3320:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3350:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3335:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 52,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3335:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3293:62:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3374:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 55,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3374:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3373:6:0"
									},
									"scope": 81,
									"src": "3265:115:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "3386:390:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "3177029f",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "3790:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3813:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3805:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3805:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3830:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3822:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 62,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3822:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3804:32:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3855:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 65,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3855:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3854:6:0"
									},
									"scope": 81,
									"src": "3781:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3867:478:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "cae9ca51",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "4359:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4382:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4374:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4374:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4399:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4391:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4391:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4421:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4406:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 74,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4406:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4373:53:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4445:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 77,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4445:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4444:6:0"
									},
									"scope": 81,
									"src": "4350:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 82,
							"src": "568:3885:0",
							"usedErrors": [],
							"usedEvents": [
								101,
								110
							]
						}
					],
					"src": "107:4347:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1756
						]
					},
					"id": 86,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 83,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 85,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 86,
							"sourceUnit": 1757,
							"src": "133:59:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 84,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1756,
										"src": "141:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "106:87:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							167
						]
					},
					"id": 90,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 87,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "105:25:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 89,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 90,
							"sourceUnit": 168,
							"src": "132:49:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 88,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "140:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "105:77:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							167
						]
					},
					"id": 168,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 91,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "109:25:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 92,
								"nodeType": "StructuredDocumentation",
								"src": "138:73:3",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 167,
							"linearizedBaseContracts": [
								167
							],
							"name": "IERC20",
							"nameLocation": "223:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "237:163:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 101,
									"name": "Transfer",
									"nameLocation": "412:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "437:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "421:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "421:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "459:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "443:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "443:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "471:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "463:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "463:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "420:57:3"
									},
									"src": "406:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "486:151:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 110,
									"name": "Approval",
									"nameLocation": "649:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "674:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "658:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "697:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "681:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "681:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "714:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "706:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "706:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "657:63:3"
									},
									"src": "643:78:3"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "729:67:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 116,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "811:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "822:2:3"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "848:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "848:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "847:9:3"
									},
									"scope": 167,
									"src": "802:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 117,
										"nodeType": "StructuredDocumentation",
										"src": "865:73:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 124,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "953:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "971:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "963:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "963:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "962:17:3"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "1003:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1003:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:9:3"
									},
									"scope": 167,
									"src": "944:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "1020:219:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1254:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1271:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1263:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1283:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1275:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1275:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1262:27:3"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1308:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 131,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1308:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1307:6:3"
									},
									"scope": 167,
									"src": "1245:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "1322:270:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1607:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1625:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1617:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1617:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1640:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1632:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1632:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1616:32:3"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1672:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1671:9:3"
									},
									"scope": 167,
									"src": "1598:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "1689:681:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2385:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2401:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2393:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2418:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2410:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2410:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2392:32:3"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2443:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 151,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2443:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2442:6:3"
									},
									"scope": 167,
									"src": "2376:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "2457:305:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2777:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2798:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2790:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2790:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2812:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2804:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2804:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2824:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2816:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2816:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2789:41:3"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2849:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 163,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2849:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2848:6:3"
									},
									"scope": 167,
									"src": "2768:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 168,
							"src": "213:2645:3",
							"usedErrors": [],
							"usedEvents": [
								101,
								110
							]
						}
					],
					"src": "109:2751:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"IERC1363": [
							81
						],
						"IERC20": [
							167
						],
						"SafeERC20": [
							631
						]
					},
					"id": 632,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 169,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 632,
							"sourceUnit": 168,
							"src": "141:37:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 170,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "149:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
							"file": "../../../interfaces/IERC1363.sol",
							"id": 173,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 632,
							"sourceUnit": 82,
							"src": "179:58:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 172,
										"name": "IERC1363",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 81,
										"src": "187:8:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 174,
								"nodeType": "StructuredDocumentation",
								"src": "239:458:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 631,
							"linearizedBaseContracts": [
								631
							],
							"name": "SafeERC20",
							"nameLocation": "706:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "722:65:4",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 179,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "798:24:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "831:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "823:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:15:4"
									},
									"src": "792:46:4"
								},
								{
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "844:71:4",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 188,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "926:32:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "967:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "959:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "984:16:4",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "976:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1010:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1002:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:70:4"
									},
									"src": "920:109:4"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "1291:88:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 200,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 192,
															"src": "1321:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 203,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 192,
																		"src": "1343:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 204,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1349:8:4",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 134,
																	"src": "1343:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 205,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 194,
																			"src": "1360:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 206,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 196,
																			"src": "1364:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 207,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1359:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 201,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1328:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1332:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1328:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1328:43:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 199,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 589,
														"src": "1301:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1301:71:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 210,
												"nodeType": "ExpressionStatement",
												"src": "1301:71:4"
											}
										]
									},
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1035:179:4",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1228:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1248:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "1241:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 191,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 190,
														"name": "IERC20",
														"nameLocations": [
															"1241:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1241:6:4"
													},
													"referencedDeclaration": 167,
													"src": "1241:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1263:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "1255:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1275:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "1267:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:41:4"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1291:0:4"
									},
									"scope": 631,
									"src": "1219:160:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 238,
										"nodeType": "Block",
										"src": "1708:98:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 226,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "1738:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 229,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 216,
																		"src": "1760:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1766:12:4",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 166,
																	"src": "1760:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 231,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 218,
																			"src": "1781:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 232,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 220,
																			"src": "1787:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 233,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "1791:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 234,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1780:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 227,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1745:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 228,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1749:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1745:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1745:53:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 225,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 589,
														"src": "1718:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1718:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 237,
												"nodeType": "ExpressionStatement",
												"src": "1718:81:4"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "1385:228:4",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1627:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1644:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 215,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 214,
														"name": "IERC20",
														"nameLocations": [
															"1644:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1644:6:4"
													},
													"referencedDeclaration": 167,
													"src": "1644:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1666:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1658:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1680:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1672:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1692:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1684:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1643:55:4"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:0:4"
									},
									"scope": 631,
									"src": "1618:188:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 264,
										"nodeType": "Block",
										"src": "2033:99:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "2074:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 256,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 243,
																		"src": "2096:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2102:8:4",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 134,
																	"src": "2096:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 258,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 245,
																			"src": "2113:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 259,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 247,
																			"src": "2117:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 260,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2112:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 254,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2081:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2085:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2081:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 261,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2081:43:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 252,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 630,
														"src": "2050:23:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2050:75:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 251,
												"id": 263,
												"nodeType": "Return",
												"src": "2043:82:4"
											}
										]
									},
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "1812:126:4",
										"text": " @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 265,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransfer",
									"nameLocation": "1952:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1975:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1968:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 242,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 241,
														"name": "IERC20",
														"nameLocations": [
															"1968:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1968:6:4"
													},
													"referencedDeclaration": 167,
													"src": "1968:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1990:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1982:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1982:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2002:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1994:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:41:4"
									},
									"returnParameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "2027:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 249,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2027:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2026:6:4"
									},
									"scope": 631,
									"src": "1943:189:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 293,
										"nodeType": "Block",
										"src": "2381:109:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 281,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 269,
															"src": "2422:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 284,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 269,
																		"src": "2444:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2450:12:4",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 166,
																	"src": "2444:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 286,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 271,
																			"src": "2465:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 287,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 273,
																			"src": "2471:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 288,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 275,
																			"src": "2475:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 289,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2464:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 282,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2429:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 283,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2433:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2429:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2429:53:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 280,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 630,
														"src": "2398:23:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2398:85:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 279,
												"id": 292,
												"nodeType": "Return",
												"src": "2391:92:4"
											}
										]
									},
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "2138:130:4",
										"text": " @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 294,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransferFrom",
									"nameLocation": "2282:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2309:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2302:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 268,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 267,
														"name": "IERC20",
														"nameLocations": [
															"2302:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "2302:6:4"
													},
													"referencedDeclaration": 167,
													"src": "2302:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2324:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2316:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 270,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2316:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2338:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2330:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 274,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:55:4"
									},
									"returnParameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 277,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 631,
									"src": "2273:217:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 324,
										"nodeType": "Block",
										"src": "3232:139:4",
										"statements": [
											{
												"assignments": [
													306
												],
												"declarations": [
													{
														"constant": false,
														"id": 306,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "3250:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 324,
														"src": "3242:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 305,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3242:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 315,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 311,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3289:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$631",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$631",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 310,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3281:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 309,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3281:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3281:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 313,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 300,
															"src": "3296:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 307,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "3265:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3271:9:4",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 144,
														"src": "3265:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3265:39:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3242:62:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 317,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "3327:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 318,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 300,
															"src": "3334:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 321,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 319,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 306,
																"src": "3343:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 320,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 302,
																"src": "3358:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3343:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 316,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 415,
														"src": "3314:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:50:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "3314:50:4"
											}
										]
									},
									"documentation": {
										"id": 295,
										"nodeType": "StructuredDocumentation",
										"src": "2496:645:4",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "3155:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3184:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "3177:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 297,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 296,
														"name": "IERC20",
														"nameLocations": [
															"3177:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "3177:6:4"
													},
													"referencedDeclaration": 167,
													"src": "3177:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3199:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "3191:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3191:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3216:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "3208:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3208:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3176:46:4"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3232:0:4"
									},
									"scope": 631,
									"src": "3146:225:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 367,
										"nodeType": "Block",
										"src": "4137:370:4",
										"statements": [
											{
												"id": 366,
												"nodeType": "UncheckedBlock",
												"src": "4147:354:4",
												"statements": [
													{
														"assignments": [
															337
														],
														"declarations": [
															{
																"constant": false,
																"id": 337,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "4179:16:4",
																"nodeType": "VariableDeclaration",
																"scope": 366,
																"src": "4171:24:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 336,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4171:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 346,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 342,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4222:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$631",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$631",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 341,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4214:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 340,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4214:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4214:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 344,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 331,
																	"src": "4229:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 338,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 329,
																	"src": "4198:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4204:9:4",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 144,
																"src": "4198:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4198:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4171:66:4"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 347,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 337,
																"src": "4255:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 348,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 333,
																"src": "4274:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4255:36:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 357,
														"nodeType": "IfStatement",
														"src": "4251:160:4",
														"trueBody": {
															"id": 356,
															"nodeType": "Block",
															"src": "4293:118:4",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 351,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 331,
																				"src": "4351:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 352,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 337,
																				"src": "4360:16:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 353,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 333,
																				"src": "4378:17:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 350,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 188,
																			"src": "4318:32:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (address,uint256,uint256) pure returns (error)"
																			}
																		},
																		"id": 354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4318:78:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 355,
																	"nodeType": "RevertStatement",
																	"src": "4311:85:4"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 359,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 329,
																	"src": "4437:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 360,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 331,
																	"src": "4444:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 361,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 337,
																		"src": "4453:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 362,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 333,
																		"src": "4472:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4453:36:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 358,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 415,
																"src": "4424:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 364,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4424:66:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 365,
														"nodeType": "ExpressionStatement",
														"src": "4424:66:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "3377:657:4",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 368,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "4048:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 329,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4077:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "4070:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 328,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 327,
														"name": "IERC20",
														"nameLocations": [
															"4070:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "4070:6:4"
													},
													"referencedDeclaration": 167,
													"src": "4070:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4092:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "4084:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "4109:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "4101:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4101:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4069:58:4"
									},
									"returnParameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4137:0:4"
									},
									"scope": 631,
									"src": "4039:468:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 414,
										"nodeType": "Block",
										"src": "5161:303:4",
										"statements": [
											{
												"assignments": [
													380
												],
												"declarations": [
													{
														"constant": false,
														"id": 380,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "5184:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 414,
														"src": "5171:25:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 379,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5171:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 389,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 383,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 372,
																"src": "5214:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																}
															},
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5220:7:4",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 154,
															"src": "5214:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 385,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "5230:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 386,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 376,
																	"src": "5239:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 387,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5229:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 381,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5199:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 382,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5203:10:4",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "5199:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5199:47:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5171:75:4"
											},
											{
												"condition": {
													"id": 394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5261:45:4",
													"subExpression": {
														"arguments": [
															{
																"id": 391,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 372,
																"src": "5286:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 392,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "5293:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 390,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 630,
															"src": "5262:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5262:44:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 413,
												"nodeType": "IfStatement",
												"src": "5257:201:4",
												"trueBody": {
													"id": 412,
													"nodeType": "Block",
													"src": "5308:150:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 396,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 372,
																		"src": "5342:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 399,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 372,
																					"src": "5364:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$167",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5370:7:4",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 154,
																				"src": "5364:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 401,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 374,
																						"src": "5380:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 402,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5389:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 403,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5379:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 397,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5349:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 398,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5353:10:4",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "5349:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 404,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5349:43:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 395,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 589,
																	"src": "5322:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 405,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5322:71:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 406,
															"nodeType": "ExpressionStatement",
															"src": "5322:71:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 408,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 372,
																		"src": "5427:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 409,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 380,
																		"src": "5434:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 407,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 589,
																	"src": "5407:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5407:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 411,
															"nodeType": "ExpressionStatement",
															"src": "5407:40:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 369,
										"nodeType": "StructuredDocumentation",
										"src": "4513:566:4",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."
									},
									"id": 415,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "5093:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5113:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "5106:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 371,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 370,
														"name": "IERC20",
														"nameLocations": [
															"5106:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "5106:6:4"
													},
													"referencedDeclaration": 167,
													"src": "5106:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5128:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "5120:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5120:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5145:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "5137:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5137:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5105:46:4"
									},
									"returnParameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5161:0:4"
									},
									"scope": 631,
									"src": "5084:380:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "5911:219:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 428,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 421,
																"src": "5925:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5928:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5925:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 430,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5933:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5925:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 431,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5943:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5925:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 446,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6011:39:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 442,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "6034:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 443,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 423,
																	"src": "6038:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 444,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 425,
																	"src": "6045:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 440,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 419,
																	"src": "6012:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 441,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6018:15:4",
																"memberName": "transferAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 32,
																"src": "6012:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 445,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6012:38:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 455,
													"nodeType": "IfStatement",
													"src": "6007:117:4",
													"trueBody": {
														"id": 454,
														"nodeType": "Block",
														"src": "6052:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 450,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 419,
																					"src": "6106:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 449,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6098:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 448,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6098:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 451,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6098:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 447,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "6073:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6073:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 453,
																"nodeType": "RevertStatement",
																"src": "6066:47:4"
															}
														]
													}
												},
												"id": 456,
												"nodeType": "IfStatement",
												"src": "5921:203:4",
												"trueBody": {
													"id": 439,
													"nodeType": "Block",
													"src": "5946:55:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 434,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 419,
																		"src": "5973:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 435,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 421,
																		"src": "5980:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 436,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 423,
																		"src": "5984:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 433,
																	"name": "safeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 212,
																	"src": "5960:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5960:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 438,
															"nodeType": "ExpressionStatement",
															"src": "5960:30:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 416,
										"nodeType": "StructuredDocumentation",
										"src": "5470:333:4",
										"text": " @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCallRelaxed",
									"nameLocation": "5817:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5849:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "5840:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 418,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 417,
														"name": "IERC1363",
														"nameLocations": [
															"5840:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "5840:8:4"
													},
													"referencedDeclaration": 81,
													"src": "5840:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5864:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "5856:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 420,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5856:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5876:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "5868:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5868:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5896:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "5883:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 424,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5883:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5839:62:4"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5911:0:4"
									},
									"scope": 631,
									"src": "5808:322:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 504,
										"nodeType": "Block",
										"src": "6649:239:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 473,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 466,
																"src": "6663:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6666:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "6663:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 475,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6671:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6663:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 476,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6681:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6663:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 493,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6759:49:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 488,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 464,
																	"src": "6786:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 489,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 466,
																	"src": "6792:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 490,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 468,
																	"src": "6796:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 491,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 470,
																	"src": "6803:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 486,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 462,
																	"src": "6760:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6766:19:4",
																"memberName": "transferFromAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 58,
																"src": "6760:25:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6760:48:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 502,
													"nodeType": "IfStatement",
													"src": "6755:127:4",
													"trueBody": {
														"id": 501,
														"nodeType": "Block",
														"src": "6810:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 497,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 462,
																					"src": "6864:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 496,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6856:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 495,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6856:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 498,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6856:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 494,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "6831:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 499,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6831:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 500,
																"nodeType": "RevertStatement",
																"src": "6824:47:4"
															}
														]
													}
												},
												"id": 503,
												"nodeType": "IfStatement",
												"src": "6659:223:4",
												"trueBody": {
													"id": 485,
													"nodeType": "Block",
													"src": "6684:65:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 479,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 462,
																		"src": "6715:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 480,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 464,
																		"src": "6722:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 481,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 466,
																		"src": "6728:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 482,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 468,
																		"src": "6732:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 478,
																	"name": "safeTransferFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 239,
																	"src": "6698:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6698:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 484,
															"nodeType": "ExpressionStatement",
															"src": "6698:40:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "6136:341:4",
										"text": " @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 505,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCallRelaxed",
									"nameLocation": "6491:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6536:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "6527:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 461,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 460,
														"name": "IERC1363",
														"nameLocations": [
															"6527:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "6527:8:4"
													},
													"referencedDeclaration": 81,
													"src": "6527:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6559:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "6551:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 463,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6551:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6581:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "6573:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6573:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6601:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "6593:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6593:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 469,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6517:122:4"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6649:0:4"
									},
									"scope": 631,
									"src": "6482:406:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 547,
										"nodeType": "Block",
										"src": "7655:218:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 518,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 511,
																"src": "7669:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7672:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "7669:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7677:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7669:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7687:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7669:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 536,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7755:38:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 532,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 511,
																	"src": "7777:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 533,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 513,
																	"src": "7781:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 534,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 515,
																	"src": "7788:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 530,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 509,
																	"src": "7756:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 531,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7762:14:4",
																"memberName": "approveAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 80,
																"src": "7756:20:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 535,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7756:37:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 545,
													"nodeType": "IfStatement",
													"src": "7751:116:4",
													"trueBody": {
														"id": 544,
														"nodeType": "Block",
														"src": "7795:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 540,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 509,
																					"src": "7849:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 539,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7841:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 538,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7841:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 541,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7841:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 537,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "7816:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7816:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 543,
																"nodeType": "RevertStatement",
																"src": "7809:47:4"
															}
														]
													}
												},
												"id": 546,
												"nodeType": "IfStatement",
												"src": "7665:202:4",
												"trueBody": {
													"id": 529,
													"nodeType": "Block",
													"src": "7690:55:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 524,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 509,
																		"src": "7717:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 525,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 511,
																		"src": "7724:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 526,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 513,
																		"src": "7728:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 523,
																	"name": "forceApprove",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 415,
																	"src": "7704:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 527,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7704:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 528,
															"nodeType": "ExpressionStatement",
															"src": "7704:30:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 506,
										"nodeType": "StructuredDocumentation",
										"src": "6894:654:4",
										"text": " @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."
									},
									"id": 548,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCallRelaxed",
									"nameLocation": "7562:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7593:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "7584:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 508,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 507,
														"name": "IERC1363",
														"nameLocations": [
															"7584:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "7584:8:4"
													},
													"referencedDeclaration": 81,
													"src": "7584:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7608:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "7600:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7620:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "7612:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7612:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7640:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "7627:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 514,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7627:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:62:4"
									},
									"returnParameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7655:0:4"
									},
									"scope": 631,
									"src": "7553:320:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 588,
										"nodeType": "Block",
										"src": "8440:650:4",
										"statements": [
											{
												"assignments": [
													558
												],
												"declarations": [
													{
														"constant": false,
														"id": 558,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "8458:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 588,
														"src": "8450:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 557,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8450:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 559,
												"nodeType": "VariableDeclarationStatement",
												"src": "8450:18:4"
											},
											{
												"assignments": [
													561
												],
												"declarations": [
													{
														"constant": false,
														"id": 561,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "8486:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 588,
														"src": "8478:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 560,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8478:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 562,
												"nodeType": "VariableDeclarationStatement",
												"src": "8478:19:4"
											},
											{
												"AST": {
													"nativeSrc": "8532:396:4",
													"nodeType": "YulBlock",
													"src": "8532:396:4",
													"statements": [
														{
															"nativeSrc": "8546:75:4",
															"nodeType": "YulVariableDeclaration",
															"src": "8546:75:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "8566:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "8566:3:4"
																		},
																		"nativeSrc": "8566:5:4",
																		"nodeType": "YulFunctionCall",
																		"src": "8566:5:4"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "8573:5:4",
																		"nodeType": "YulIdentifier",
																		"src": "8573:5:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8580:1:4",
																		"nodeType": "YulLiteral",
																		"src": "8580:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8587:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "8587:4:4"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8593:4:4",
																				"nodeType": "YulLiteral",
																				"src": "8593:4:4",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8583:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "8583:3:4"
																		},
																		"nativeSrc": "8583:15:4",
																		"nodeType": "YulFunctionCall",
																		"src": "8583:15:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8606:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "8606:4:4"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "8600:5:4",
																			"nodeType": "YulIdentifier",
																			"src": "8600:5:4"
																		},
																		"nativeSrc": "8600:11:4",
																		"nodeType": "YulFunctionCall",
																		"src": "8600:11:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8613:1:4",
																		"nodeType": "YulLiteral",
																		"src": "8613:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8616:4:4",
																		"nodeType": "YulLiteral",
																		"src": "8616:4:4",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "8561:4:4",
																	"nodeType": "YulIdentifier",
																	"src": "8561:4:4"
																},
																"nativeSrc": "8561:60:4",
																"nodeType": "YulFunctionCall",
																"src": "8561:60:4"
															},
															"variables": [
																{
																	"name": "success",
																	"nativeSrc": "8550:7:4",
																	"nodeType": "YulTypedName",
																	"src": "8550:7:4",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8682:157:4",
																"nodeType": "YulBlock",
																"src": "8682:157:4",
																"statements": [
																	{
																		"nativeSrc": "8700:22:4",
																		"nodeType": "YulVariableDeclaration",
																		"src": "8700:22:4",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8717:4:4",
																					"nodeType": "YulLiteral",
																					"src": "8717:4:4",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "8711:5:4",
																				"nodeType": "YulIdentifier",
																				"src": "8711:5:4"
																			},
																			"nativeSrc": "8711:11:4",
																			"nodeType": "YulFunctionCall",
																			"src": "8711:11:4"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nativeSrc": "8704:3:4",
																				"nodeType": "YulTypedName",
																				"src": "8704:3:4",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8754:3:4",
																					"nodeType": "YulIdentifier",
																					"src": "8754:3:4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8759:1:4",
																					"nodeType": "YulLiteral",
																					"src": "8759:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8762:14:4",
																						"nodeType": "YulIdentifier",
																						"src": "8762:14:4"
																					},
																					"nativeSrc": "8762:16:4",
																					"nodeType": "YulFunctionCall",
																					"src": "8762:16:4"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "8739:14:4",
																				"nodeType": "YulIdentifier",
																				"src": "8739:14:4"
																			},
																			"nativeSrc": "8739:40:4",
																			"nodeType": "YulFunctionCall",
																			"src": "8739:40:4"
																		},
																		"nativeSrc": "8739:40:4",
																		"nodeType": "YulExpressionStatement",
																		"src": "8739:40:4"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8803:3:4",
																					"nodeType": "YulIdentifier",
																					"src": "8803:3:4"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8808:14:4",
																						"nodeType": "YulIdentifier",
																						"src": "8808:14:4"
																					},
																					"nativeSrc": "8808:16:4",
																					"nodeType": "YulFunctionCall",
																					"src": "8808:16:4"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8796:6:4",
																				"nodeType": "YulIdentifier",
																				"src": "8796:6:4"
																			},
																			"nativeSrc": "8796:29:4",
																			"nodeType": "YulFunctionCall",
																			"src": "8796:29:4"
																		},
																		"nativeSrc": "8796:29:4",
																		"nodeType": "YulExpressionStatement",
																		"src": "8796:29:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nativeSrc": "8673:7:4",
																		"nodeType": "YulIdentifier",
																		"src": "8673:7:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8666:6:4",
																	"nodeType": "YulIdentifier",
																	"src": "8666:6:4"
																},
																"nativeSrc": "8666:15:4",
																"nodeType": "YulFunctionCall",
																"src": "8666:15:4"
															},
															"nativeSrc": "8663:176:4",
															"nodeType": "YulIf",
															"src": "8663:176:4"
														},
														{
															"nativeSrc": "8852:30:4",
															"nodeType": "YulAssignment",
															"src": "8852:30:4",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "8866:14:4",
																	"nodeType": "YulIdentifier",
																	"src": "8866:14:4"
																},
																"nativeSrc": "8866:16:4",
																"nodeType": "YulFunctionCall",
																"src": "8866:16:4"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "8852:10:4",
																	"nodeType": "YulIdentifier",
																	"src": "8852:10:4"
																}
															]
														},
														{
															"nativeSrc": "8895:23:4",
															"nodeType": "YulAssignment",
															"src": "8895:23:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8916:1:4",
																		"nodeType": "YulLiteral",
																		"src": "8916:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8910:5:4",
																	"nodeType": "YulIdentifier",
																	"src": "8910:5:4"
																},
																"nativeSrc": "8910:8:4",
																"nodeType": "YulFunctionCall",
																"src": "8910:8:4"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "8895:11:4",
																	"nodeType": "YulIdentifier",
																	"src": "8895:11:4"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 554,
														"isOffset": false,
														"isSlot": false,
														"src": "8587:4:4",
														"valueSize": 1
													},
													{
														"declaration": 554,
														"isOffset": false,
														"isSlot": false,
														"src": "8606:4:4",
														"valueSize": 1
													},
													{
														"declaration": 558,
														"isOffset": false,
														"isSlot": false,
														"src": "8852:10:4",
														"valueSize": 1
													},
													{
														"declaration": 561,
														"isOffset": false,
														"isSlot": false,
														"src": "8895:11:4",
														"valueSize": 1
													},
													{
														"declaration": 552,
														"isOffset": false,
														"isSlot": false,
														"src": "8573:5:4",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 563,
												"nodeType": "InlineAssembly",
												"src": "8507:421:4"
											},
											{
												"condition": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 566,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 564,
															"name": "returnSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "8942:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 565,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8956:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8942:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 577,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 575,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "8994:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "31",
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9009:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8994:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8942:68:4",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 569,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 552,
																			"src": "8968:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$167",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$167",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8960:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 567,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8960:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8960:14:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 571,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8975:4:4",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "8960:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8980:6:4",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8960:26:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8990:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8960:31:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 587,
												"nodeType": "IfStatement",
												"src": "8938:146:4",
												"trueBody": {
													"id": 586,
													"nodeType": "Block",
													"src": "9012:72:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 582,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 552,
																				"src": "9066:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$167",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$167",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 581,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9058:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 580,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9058:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 583,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9058:14:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 579,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "9033:24:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 584,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9033:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 585,
															"nodeType": "RevertStatement",
															"src": "9026:47:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "7879:486:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."
									},
									"id": 589,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "8379:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8406:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 589,
												"src": "8399:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 551,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 550,
														"name": "IERC20",
														"nameLocations": [
															"8399:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "8399:6:4"
													},
													"referencedDeclaration": 167,
													"src": "8399:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8426:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 589,
												"src": "8413:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 553,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8413:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8398:33:4"
									},
									"returnParameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8440:0:4"
									},
									"scope": 631,
									"src": "8370:720:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 629,
										"nodeType": "Block",
										"src": "9681:391:4",
										"statements": [
											{
												"assignments": [
													601
												],
												"declarations": [
													{
														"constant": false,
														"id": 601,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9696:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 629,
														"src": "9691:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 600,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9691:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 602,
												"nodeType": "VariableDeclarationStatement",
												"src": "9691:12:4"
											},
											{
												"assignments": [
													604
												],
												"declarations": [
													{
														"constant": false,
														"id": 604,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "9721:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 629,
														"src": "9713:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 603,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9713:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 605,
												"nodeType": "VariableDeclarationStatement",
												"src": "9713:18:4"
											},
											{
												"assignments": [
													607
												],
												"declarations": [
													{
														"constant": false,
														"id": 607,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "9749:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 629,
														"src": "9741:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 606,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9741:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 608,
												"nodeType": "VariableDeclarationStatement",
												"src": "9741:19:4"
											},
											{
												"AST": {
													"nativeSrc": "9795:174:4",
													"nodeType": "YulBlock",
													"src": "9795:174:4",
													"statements": [
														{
															"nativeSrc": "9809:71:4",
															"nodeType": "YulAssignment",
															"src": "9809:71:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "9825:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "9825:3:4"
																		},
																		"nativeSrc": "9825:5:4",
																		"nodeType": "YulFunctionCall",
																		"src": "9825:5:4"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "9832:5:4",
																		"nodeType": "YulIdentifier",
																		"src": "9832:5:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9839:1:4",
																		"nodeType": "YulLiteral",
																		"src": "9839:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9846:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "9846:4:4"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9852:4:4",
																				"nodeType": "YulLiteral",
																				"src": "9852:4:4",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9842:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "9842:3:4"
																		},
																		"nativeSrc": "9842:15:4",
																		"nodeType": "YulFunctionCall",
																		"src": "9842:15:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9865:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "9865:4:4"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9859:5:4",
																			"nodeType": "YulIdentifier",
																			"src": "9859:5:4"
																		},
																		"nativeSrc": "9859:11:4",
																		"nodeType": "YulFunctionCall",
																		"src": "9859:11:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9872:1:4",
																		"nodeType": "YulLiteral",
																		"src": "9872:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9875:4:4",
																		"nodeType": "YulLiteral",
																		"src": "9875:4:4",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "9820:4:4",
																	"nodeType": "YulIdentifier",
																	"src": "9820:4:4"
																},
																"nativeSrc": "9820:60:4",
																"nodeType": "YulFunctionCall",
																"src": "9820:60:4"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nativeSrc": "9809:7:4",
																	"nodeType": "YulIdentifier",
																	"src": "9809:7:4"
																}
															]
														},
														{
															"nativeSrc": "9893:30:4",
															"nodeType": "YulAssignment",
															"src": "9893:30:4",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "9907:14:4",
																	"nodeType": "YulIdentifier",
																	"src": "9907:14:4"
																},
																"nativeSrc": "9907:16:4",
																"nodeType": "YulFunctionCall",
																"src": "9907:16:4"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "9893:10:4",
																	"nodeType": "YulIdentifier",
																	"src": "9893:10:4"
																}
															]
														},
														{
															"nativeSrc": "9936:23:4",
															"nodeType": "YulAssignment",
															"src": "9936:23:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9957:1:4",
																		"nodeType": "YulLiteral",
																		"src": "9957:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "9951:5:4",
																	"nodeType": "YulIdentifier",
																	"src": "9951:5:4"
																},
																"nativeSrc": "9951:8:4",
																"nodeType": "YulFunctionCall",
																"src": "9951:8:4"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "9936:11:4",
																	"nodeType": "YulIdentifier",
																	"src": "9936:11:4"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 595,
														"isOffset": false,
														"isSlot": false,
														"src": "9846:4:4",
														"valueSize": 1
													},
													{
														"declaration": 595,
														"isOffset": false,
														"isSlot": false,
														"src": "9865:4:4",
														"valueSize": 1
													},
													{
														"declaration": 604,
														"isOffset": false,
														"isSlot": false,
														"src": "9893:10:4",
														"valueSize": 1
													},
													{
														"declaration": 607,
														"isOffset": false,
														"isSlot": false,
														"src": "9936:11:4",
														"valueSize": 1
													},
													{
														"declaration": 601,
														"isOffset": false,
														"isSlot": false,
														"src": "9809:7:4",
														"valueSize": 1
													},
													{
														"declaration": 593,
														"isOffset": false,
														"isSlot": false,
														"src": "9832:5:4",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 609,
												"nodeType": "InlineAssembly",
												"src": "9770:199:4"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 610,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 601,
														"src": "9985:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 611,
																		"name": "returnSize",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 604,
																		"src": "9997:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 612,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10011:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9997:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 624,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 622,
																		"name": "returnValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 607,
																		"src": "10048:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 623,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10063:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "10048:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9997:67:4",
																"trueExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 621,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 616,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 593,
																						"src": "10023:5:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$167",
																							"typeString": "contract IERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_IERC20_$167",
																							"typeString": "contract IERC20"
																						}
																					],
																					"id": 615,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "10015:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 614,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "10015:7:4",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 617,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10015:14:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 618,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "10030:4:4",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "10015:19:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10035:6:4",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "10015:26:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 620,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10044:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "10015:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 626,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9996:69:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9985:80:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 599,
												"id": 628,
												"nodeType": "Return",
												"src": "9978:87:4"
											}
										]
									},
									"documentation": {
										"id": 590,
										"nodeType": "StructuredDocumentation",
										"src": "9096:491:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."
									},
									"id": 630,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "9601:23:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9632:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "9625:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 592,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 591,
														"name": "IERC20",
														"nameLocations": [
															"9625:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "9625:6:4"
													},
													"referencedDeclaration": 167,
													"src": "9625:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9652:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "9639:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 594,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9639:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9624:33:4"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "9675:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 597,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9675:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9674:6:4"
									},
									"scope": 631,
									"src": "9592:480:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 632,
							"src": "698:9376:4",
							"usedErrors": [
								179,
								188
							],
							"usedEvents": []
						}
					],
					"src": "115:9960:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/cryptography/Hashes.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/Hashes.sol",
					"exportedSymbols": {
						"Hashes": [
							671
						]
					},
					"id": 672,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 633,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Hashes",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 634,
								"nodeType": "StructuredDocumentation",
								"src": "139:81:5",
								"text": " @dev Library of standard hash functions.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 671,
							"linearizedBaseContracts": [
								671
							],
							"name": "Hashes",
							"nameLocation": "229:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 657,
										"nodeType": "Block",
										"src": "588:83:5",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 644,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 637,
															"src": "605:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 645,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "609:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "605:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 652,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 639,
																"src": "659:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 653,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 637,
																"src": "662:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 651,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "640:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 654,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "640:24:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "605:59:5",
													"trueExpression": {
														"arguments": [
															{
																"id": 648,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 637,
																"src": "632:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 649,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 639,
																"src": "635:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 647,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "613:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "613:24:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 643,
												"id": 656,
												"nodeType": "Return",
												"src": "598:66:5"
											}
										]
									},
									"documentation": {
										"id": 635,
										"nodeType": "StructuredDocumentation",
										"src": "242:257:5",
										"text": " @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."
									},
									"id": 658,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "commutativeKeccak256",
									"nameLocation": "513:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "542:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "534:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 636,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "534:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "553:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "545:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 638,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "545:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "533:22:5"
									},
									"returnParameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "579:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 641,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "579:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "578:9:5"
									},
									"scope": 671,
									"src": "504:167:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 669,
										"nodeType": "Block",
										"src": "879:151:5",
										"statements": [
											{
												"AST": {
													"nativeSrc": "914:110:5",
													"nodeType": "YulBlock",
													"src": "914:110:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "935:4:5",
																		"nodeType": "YulLiteral",
																		"src": "935:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nativeSrc": "941:1:5",
																		"nodeType": "YulIdentifier",
																		"src": "941:1:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "928:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "928:6:5"
																},
																"nativeSrc": "928:15:5",
																"nodeType": "YulFunctionCall",
																"src": "928:15:5"
															},
															"nativeSrc": "928:15:5",
															"nodeType": "YulExpressionStatement",
															"src": "928:15:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "963:4:5",
																		"nodeType": "YulLiteral",
																		"src": "963:4:5",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nativeSrc": "969:1:5",
																		"nodeType": "YulIdentifier",
																		"src": "969:1:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "956:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "956:6:5"
																},
																"nativeSrc": "956:15:5",
																"nodeType": "YulFunctionCall",
																"src": "956:15:5"
															},
															"nativeSrc": "956:15:5",
															"nodeType": "YulExpressionStatement",
															"src": "956:15:5"
														},
														{
															"nativeSrc": "984:30:5",
															"nodeType": "YulAssignment",
															"src": "984:30:5",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1003:4:5",
																		"nodeType": "YulLiteral",
																		"src": "1003:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1009:4:5",
																		"nodeType": "YulLiteral",
																		"src": "1009:4:5",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "993:9:5",
																	"nodeType": "YulIdentifier",
																	"src": "993:9:5"
																},
																"nativeSrc": "993:21:5",
																"nodeType": "YulFunctionCall",
																"src": "993:21:5"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "984:5:5",
																	"nodeType": "YulIdentifier",
																	"src": "984:5:5"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 661,
														"isOffset": false,
														"isSlot": false,
														"src": "941:1:5",
														"valueSize": 1
													},
													{
														"declaration": 663,
														"isOffset": false,
														"isSlot": false,
														"src": "969:1:5",
														"valueSize": 1
													},
													{
														"declaration": 666,
														"isOffset": false,
														"isSlot": false,
														"src": "984:5:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 668,
												"nodeType": "InlineAssembly",
												"src": "889:135:5"
											}
										]
									},
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "677:109:5",
										"text": " @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."
									},
									"id": 670,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "efficientKeccak256",
									"nameLocation": "800:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "827:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 670,
												"src": "819:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 660,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "838:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 670,
												"src": "830:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 662,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "830:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:22:5"
									},
									"returnParameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "872:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 670,
												"src": "864:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 665,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "864:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "863:15:5"
									},
									"scope": 671,
									"src": "791:239:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 672,
							"src": "221:811:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "113:920:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"Hashes": [
							671
						],
						"MerkleProof": [
							1744
						]
					},
					"id": 1745,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 673,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "206:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/Hashes.sol",
							"file": "./Hashes.sol",
							"id": 675,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1745,
							"sourceUnit": 672,
							"src": "232:36:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 674,
										"name": "Hashes",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 671,
										"src": "240:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 676,
								"nodeType": "StructuredDocumentation",
								"src": "270:1082:6",
								"text": " @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."
							},
							"fullyImplemented": true,
							"id": 1744,
							"linearizedBaseContracts": [
								1744
							],
							"name": "MerkleProof",
							"nameLocation": "1361:11:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 677,
										"nodeType": "StructuredDocumentation",
										"src": "1379:60:6",
										"text": "@dev The multiproof provided is not valid."
									},
									"errorSelector": "35140492",
									"id": 679,
									"name": "MerkleProofInvalidMultiproof",
									"nameLocation": "1450:28:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1478:2:6"
									},
									"src": "1444:37:6"
								},
								{
									"body": {
										"id": 699,
										"nodeType": "Block",
										"src": "1999:57:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 693,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 683,
																"src": "2029:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 694,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 687,
																"src": "2036:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 692,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																741,
																823
															],
															"referencedDeclaration": 741,
															"src": "2016:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2016:25:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 696,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 685,
														"src": "2045:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2016:33:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 691,
												"id": 698,
												"nodeType": "Return",
												"src": "2009:40:6"
											}
										]
									},
									"documentation": {
										"id": 680,
										"nodeType": "StructuredDocumentation",
										"src": "1487:410:6",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 700,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1911:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1935:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "1918:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 681,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1918:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 682,
													"nodeType": "ArrayTypeName",
													"src": "1918:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1950:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "1942:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 684,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1942:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1964:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "1956:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 686,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1917:52:6"
									},
									"returnParameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 700,
												"src": "1993:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 689,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1993:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1992:6:6"
									},
									"scope": 1744,
									"src": "1902:154:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 740,
										"nodeType": "Block",
										"src": "2549:216:6",
										"statements": [
											{
												"assignments": [
													712
												],
												"declarations": [
													{
														"constant": false,
														"id": 712,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "2567:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 740,
														"src": "2559:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 711,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2559:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 714,
												"initialValue": {
													"id": 713,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 706,
													"src": "2582:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2559:27:6"
											},
											{
												"body": {
													"id": 736,
													"nodeType": "Block",
													"src": "2639:91:6",
													"statements": [
														{
															"expression": {
																"id": 734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 726,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 712,
																	"src": "2653:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 729,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 712,
																			"src": "2696:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 730,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 704,
																				"src": "2710:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 732,
																			"indexExpression": {
																				"id": 731,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 716,
																				"src": "2716:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2710:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 727,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 671,
																			"src": "2668:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$671_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 728,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2675:20:6",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 658,
																		"src": "2668:27:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 733,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2668:51:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "2653:66:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 735,
															"nodeType": "ExpressionStatement",
															"src": "2653:66:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 719,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "2616:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 720,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "2620:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 721,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2626:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2620:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2616:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 737,
												"initializationExpression": {
													"assignments": [
														716
													],
													"declarations": [
														{
															"constant": false,
															"id": 716,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2609:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 737,
															"src": "2601:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 715,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2601:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 718,
													"initialValue": {
														"hexValue": "30",
														"id": 717,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2613:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2601:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 724,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2634:3:6",
														"subExpression": {
															"id": 723,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "2634:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 725,
													"nodeType": "ExpressionStatement",
													"src": "2634:3:6"
												},
												"nodeType": "ForStatement",
												"src": "2596:134:6"
											},
											{
												"expression": {
													"id": 738,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "2746:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 710,
												"id": 739,
												"nodeType": "Return",
												"src": "2739:19:6"
											}
										]
									},
									"documentation": {
										"id": 701,
										"nodeType": "StructuredDocumentation",
										"src": "2062:390:6",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "2466:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2496:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "2479:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 702,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2479:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 703,
													"nodeType": "ArrayTypeName",
													"src": "2479:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "2511:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "2503:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 705,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2503:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2478:38:6"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "2540:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 708,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2540:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:9:6"
									},
									"scope": 1744,
									"src": "2457:308:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 772,
										"nodeType": "Block",
										"src": "3376:65:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 765,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 745,
																"src": "3406:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 766,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 749,
																"src": "3413:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 767,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 759,
																"src": "3419:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 764,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																741,
																823
															],
															"referencedDeclaration": 823,
															"src": "3393:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 768,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3393:33:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 769,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 747,
														"src": "3430:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3393:41:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 763,
												"id": 771,
												"nodeType": "Return",
												"src": "3386:48:6"
											}
										]
									},
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "2771:407:6",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 773,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "3192:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3225:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "3208:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 743,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3208:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 744,
													"nodeType": "ArrayTypeName",
													"src": "3208:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "3248:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "3240:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 746,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3240:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3270:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "3262:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 748,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3262:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3334:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "3284:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 758,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 754,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 751,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 758,
																"src": "3293:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 750,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3293:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 753,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 758,
																"src": "3302:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 752,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3292:18:6"
													},
													"returnParameterTypes": {
														"id": 757,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 756,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 758,
																"src": "3325:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 755,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3325:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3324:9:6"
													},
													"src": "3284:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3198:148:6"
									},
									"returnParameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "3370:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 761,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3370:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3369:6:6"
									},
									"scope": 1744,
									"src": "3183:258:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 822,
										"nodeType": "Block",
										"src": "4019:195:6",
										"statements": [
											{
												"assignments": [
													795
												],
												"declarations": [
													{
														"constant": false,
														"id": 795,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "4037:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 822,
														"src": "4029:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 794,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4029:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 797,
												"initialValue": {
													"id": 796,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 779,
													"src": "4052:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4029:27:6"
											},
											{
												"body": {
													"id": 818,
													"nodeType": "Block",
													"src": "4109:70:6",
													"statements": [
														{
															"expression": {
																"id": 816,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 809,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 795,
																	"src": "4123:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 811,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 795,
																			"src": "4145:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 812,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 777,
																				"src": "4159:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 814,
																			"indexExpression": {
																				"id": 813,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 799,
																				"src": "4165:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4159:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 810,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 789,
																		"src": "4138:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 815,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4138:30:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "4123:45:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 817,
															"nodeType": "ExpressionStatement",
															"src": "4123:45:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 802,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 799,
														"src": "4086:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 803,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "4090:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 804,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4096:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4090:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4086:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 819,
												"initializationExpression": {
													"assignments": [
														799
													],
													"declarations": [
														{
															"constant": false,
															"id": 799,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4079:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 819,
															"src": "4071:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 798,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4071:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 801,
													"initialValue": {
														"hexValue": "30",
														"id": 800,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4083:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4071:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 807,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4104:3:6",
														"subExpression": {
															"id": 806,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "4104:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 808,
													"nodeType": "ExpressionStatement",
													"src": "4104:3:6"
												},
												"nodeType": "ForStatement",
												"src": "4066:113:6"
											},
											{
												"expression": {
													"id": 820,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 795,
													"src": "4195:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 793,
												"id": 821,
												"nodeType": "Return",
												"src": "4188:19:6"
											}
										]
									},
									"documentation": {
										"id": 774,
										"nodeType": "StructuredDocumentation",
										"src": "3447:387:6",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "3848:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3887:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "3870:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 775,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3870:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 776,
													"nodeType": "ArrayTypeName",
													"src": "3870:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3910:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "3902:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 778,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3902:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3974:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "3924:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 788,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 784,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 781,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 788,
																"src": "3933:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 780,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3933:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 783,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 788,
																"src": "3942:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 782,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3942:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3932:18:6"
													},
													"returnParameterTypes": {
														"id": 787,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 786,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 788,
																"src": "3965:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 785,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3965:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3964:9:6"
													},
													"src": "3924:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3860:126:6"
									},
									"returnParameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "4010:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 791,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4009:9:6"
									},
									"scope": 1744,
									"src": "3839:375:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 843,
										"nodeType": "Block",
										"src": "4744:65:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 837,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "4782:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 838,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 831,
																"src": "4789:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 836,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																885,
																967
															],
															"referencedDeclaration": 885,
															"src": "4761:20:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32) pure returns (bytes32)"
															}
														},
														"id": 839,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4761:33:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 840,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 829,
														"src": "4798:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4761:41:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 835,
												"id": 842,
												"nodeType": "Return",
												"src": "4754:48:6"
											}
										]
									},
									"documentation": {
										"id": 824,
										"nodeType": "StructuredDocumentation",
										"src": "4220:412:6",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 844,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "4646:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "4680:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "4661:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 825,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4661:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 826,
													"nodeType": "ArrayTypeName",
													"src": "4661:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "4695:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "4687:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 828,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "4709:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "4701:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 830,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:54:6"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "4738:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 833,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4738:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4737:6:6"
									},
									"scope": 1744,
									"src": "4637:172:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 884,
										"nodeType": "Block",
										"src": "5314:216:6",
										"statements": [
											{
												"assignments": [
													856
												],
												"declarations": [
													{
														"constant": false,
														"id": 856,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "5332:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 884,
														"src": "5324:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 855,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5324:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 858,
												"initialValue": {
													"id": 857,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 850,
													"src": "5347:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5324:27:6"
											},
											{
												"body": {
													"id": 880,
													"nodeType": "Block",
													"src": "5404:91:6",
													"statements": [
														{
															"expression": {
																"id": 878,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 870,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 856,
																	"src": "5418:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 873,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 856,
																			"src": "5461:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 874,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 848,
																				"src": "5475:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 876,
																			"indexExpression": {
																				"id": 875,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 860,
																				"src": "5481:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5475:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 871,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 671,
																			"src": "5433:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$671_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 872,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5440:20:6",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 658,
																		"src": "5433:27:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 877,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5433:51:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "5418:66:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 879,
															"nodeType": "ExpressionStatement",
															"src": "5418:66:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 863,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 860,
														"src": "5381:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 864,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 848,
															"src": "5385:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 865,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5391:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5385:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5381:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 881,
												"initializationExpression": {
													"assignments": [
														860
													],
													"declarations": [
														{
															"constant": false,
															"id": 860,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5374:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 881,
															"src": "5366:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 859,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5366:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 862,
													"initialValue": {
														"hexValue": "30",
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5378:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5366:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 868,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5399:3:6",
														"subExpression": {
															"id": 867,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 860,
															"src": "5399:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 869,
													"nodeType": "ExpressionStatement",
													"src": "5399:3:6"
												},
												"nodeType": "ForStatement",
												"src": "5361:134:6"
											},
											{
												"expression": {
													"id": 882,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 856,
													"src": "5511:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 854,
												"id": 883,
												"nodeType": "Return",
												"src": "5504:19:6"
											}
										]
									},
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "4815:392:6",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 885,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "5221:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "5261:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "5242:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 846,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5242:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 847,
													"nodeType": "ArrayTypeName",
													"src": "5242:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "5276:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "5268:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 849,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5268:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5241:40:6"
									},
									"returnParameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "5305:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 852,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5305:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5304:9:6"
									},
									"scope": 1744,
									"src": "5212:318:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 916,
										"nodeType": "Block",
										"src": "6153:73:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 909,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 889,
																"src": "6191:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 910,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 893,
																"src": "6198:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 911,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 903,
																"src": "6204:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 908,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																885,
																967
															],
															"referencedDeclaration": 967,
															"src": "6170:20:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 912,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6170:41:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 913,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 891,
														"src": "6215:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "6170:49:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 907,
												"id": 915,
												"nodeType": "Return",
												"src": "6163:56:6"
											}
										]
									},
									"documentation": {
										"id": 886,
										"nodeType": "StructuredDocumentation",
										"src": "5536:409:6",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "5959:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6002:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "5983:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 887,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5983:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 888,
													"nodeType": "ArrayTypeName",
													"src": "5983:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "6025:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "6017:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 890,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6017:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6047:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "6039:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 892,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6111:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "6061:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 902,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 898,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 895,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 902,
																"src": "6070:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 894,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6070:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 897,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 902,
																"src": "6079:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 896,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6079:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6069:18:6"
													},
													"returnParameterTypes": {
														"id": 901,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 900,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 902,
																"src": "6102:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 899,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6102:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6101:9:6"
													},
													"src": "6061:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "5973:150:6"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "6147:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 905,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6147:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:6:6"
									},
									"scope": 1744,
									"src": "5950:276:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 966,
										"nodeType": "Block",
										"src": "6816:195:6",
										"statements": [
											{
												"assignments": [
													939
												],
												"declarations": [
													{
														"constant": false,
														"id": 939,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "6834:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 966,
														"src": "6826:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 938,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6826:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 941,
												"initialValue": {
													"id": 940,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 923,
													"src": "6849:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6826:27:6"
											},
											{
												"body": {
													"id": 962,
													"nodeType": "Block",
													"src": "6906:70:6",
													"statements": [
														{
															"expression": {
																"id": 960,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 953,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 939,
																	"src": "6920:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 955,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 939,
																			"src": "6942:12:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 956,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 921,
																				"src": "6956:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 958,
																			"indexExpression": {
																				"id": 957,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 943,
																				"src": "6962:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6956:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 954,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 933,
																		"src": "6935:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 959,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6935:30:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "6920:45:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 961,
															"nodeType": "ExpressionStatement",
															"src": "6920:45:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 946,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 943,
														"src": "6883:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 947,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 921,
															"src": "6887:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 948,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6893:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6887:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6883:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 963,
												"initializationExpression": {
													"assignments": [
														943
													],
													"declarations": [
														{
															"constant": false,
															"id": 943,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6876:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 963,
															"src": "6868:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 942,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6868:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 945,
													"initialValue": {
														"hexValue": "30",
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6880:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6868:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6901:3:6",
														"subExpression": {
															"id": 950,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 943,
															"src": "6901:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 952,
													"nodeType": "ExpressionStatement",
													"src": "6901:3:6"
												},
												"nodeType": "ForStatement",
												"src": "6863:113:6"
											},
											{
												"expression": {
													"id": 964,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 939,
													"src": "6992:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 937,
												"id": 965,
												"nodeType": "Return",
												"src": "6985:19:6"
											}
										]
									},
									"documentation": {
										"id": 918,
										"nodeType": "StructuredDocumentation",
										"src": "6232:389:6",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "6635:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6684:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "6665:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 919,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6665:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 920,
													"nodeType": "ArrayTypeName",
													"src": "6665:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6707:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "6699:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 922,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6699:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6771:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "6721:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 932,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 928,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 925,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 932,
																"src": "6730:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 924,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6730:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 927,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 932,
																"src": "6739:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 926,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6739:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6729:18:6"
													},
													"returnParameterTypes": {
														"id": 931,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 930,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 932,
																"src": "6762:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 929,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6762:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6761:9:6"
													},
													"src": "6721:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "6655:128:6"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "6807:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 935,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6807:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6806:9:6"
									},
									"scope": 1744,
									"src": "6626:385:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "7797:76:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 985,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 971,
																"src": "7832:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 986,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 974,
																"src": "7839:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 987,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 979,
																"src": "7851:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 984,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1151,
																1355
															],
															"referencedDeclaration": 1151,
															"src": "7814:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7814:44:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 989,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "7862:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7814:52:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 983,
												"id": 991,
												"nodeType": "Return",
												"src": "7807:59:6"
											}
										]
									},
									"documentation": {
										"id": 968,
										"nodeType": "StructuredDocumentation",
										"src": "7017:593:6",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "7624:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "7667:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "7650:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 969,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7650:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 970,
													"nodeType": "ArrayTypeName",
													"src": "7650:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "7696:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "7682:24:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 972,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "7682:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 973,
													"nodeType": "ArrayTypeName",
													"src": "7682:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "7724:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "7716:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 975,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 979,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "7755:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "7738:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 977,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7738:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 978,
													"nodeType": "ArrayTypeName",
													"src": "7738:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7640:127:6"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "7791:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 981,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7791:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7790:6:6"
									},
									"scope": 1744,
									"src": "7615:258:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1150,
										"nodeType": "Block",
										"src": "9159:2104:6",
										"statements": [
											{
												"assignments": [
													1009
												],
												"declarations": [
													{
														"constant": false,
														"id": 1009,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "9551:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "9543:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1008,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9543:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1012,
												"initialValue": {
													"expression": {
														"id": 1010,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1003,
														"src": "9563:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9570:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9563:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9543:33:6"
											},
											{
												"assignments": [
													1014
												],
												"declarations": [
													{
														"constant": false,
														"id": 1014,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "9594:13:6",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "9586:21:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1013,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9586:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1017,
												"initialValue": {
													"expression": {
														"id": 1015,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1000,
														"src": "9610:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 1016,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9621:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9610:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9586:41:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1021,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1018,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1009,
															"src": "9675:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1019,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 997,
																"src": "9687:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 1020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9693:6:6",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "9687:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "9675:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1024,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1022,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1014,
															"src": "9703:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1023,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9719:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "9703:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9675:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1030,
												"nodeType": "IfStatement",
												"src": "9671:113:6",
												"trueBody": {
													"id": 1029,
													"nodeType": "Block",
													"src": "9722:62:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1026,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 679,
																	"src": "9743:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9743:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1028,
															"nodeType": "RevertStatement",
															"src": "9736:37:6"
														}
													]
												}
											},
											{
												"assignments": [
													1035
												],
												"declarations": [
													{
														"constant": false,
														"id": 1035,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "10045:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "10028:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1033,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10028:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1034,
															"nodeType": "ArrayTypeName",
															"src": "10028:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1041,
												"initialValue": {
													"arguments": [
														{
															"id": 1039,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1014,
															"src": "10068:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1038,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "10054:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1036,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10058:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1037,
															"nodeType": "ArrayTypeName",
															"src": "10058:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10054:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10028:54:6"
											},
											{
												"assignments": [
													1043
												],
												"declarations": [
													{
														"constant": false,
														"id": 1043,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "10100:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "10092:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1042,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10092:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1045,
												"initialValue": {
													"hexValue": "30",
													"id": 1044,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10110:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10092:19:6"
											},
											{
												"assignments": [
													1047
												],
												"declarations": [
													{
														"constant": false,
														"id": 1047,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "10129:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "10121:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1046,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10121:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1049,
												"initialValue": {
													"hexValue": "30",
													"id": 1048,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10139:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10121:19:6"
											},
											{
												"assignments": [
													1051
												],
												"declarations": [
													{
														"constant": false,
														"id": 1051,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "10158:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "10150:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1050,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10150:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1053,
												"initialValue": {
													"hexValue": "30",
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10169:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10150:20:6"
											},
											{
												"body": {
													"id": 1113,
													"nodeType": "Block",
													"src": "10590:310:6",
													"statements": [
														{
															"assignments": [
																1065
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1065,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "10612:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1113,
																	"src": "10604:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1064,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10604:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1078,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1066,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1043,
																		"src": "10616:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1067,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1009,
																		"src": "10626:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10616:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1073,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1035,
																		"src": "10658:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1076,
																	"indexExpression": {
																		"id": 1075,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10665:9:6",
																		"subExpression": {
																			"id": 1074,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1047,
																			"src": "10665:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10658:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1077,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10616:59:6",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1069,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1003,
																		"src": "10638:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1072,
																	"indexExpression": {
																		"id": 1071,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10645:9:6",
																		"subExpression": {
																			"id": 1070,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1043,
																			"src": "10645:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10638:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10604:71:6"
														},
														{
															"assignments": [
																1080
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1080,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "10697:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1113,
																	"src": "10689:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1079,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10689:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1102,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1081,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1000,
																		"src": "10701:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1083,
																	"indexExpression": {
																		"id": 1082,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1055,
																		"src": "10712:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10701:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1097,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 997,
																		"src": "10813:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1100,
																	"indexExpression": {
																		"id": 1099,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10819:10:6",
																		"subExpression": {
																			"id": 1098,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1051,
																			"src": "10819:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10813:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1101,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10701:129:6",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1086,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1084,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1043,
																					"src": "10734:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1085,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1009,
																					"src": "10744:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10734:19:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1091,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1035,
																					"src": "10776:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1094,
																				"indexExpression": {
																					"id": 1093,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10783:9:6",
																					"subExpression": {
																						"id": 1092,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1047,
																						"src": "10783:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10776:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1095,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "10734:59:6",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1087,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1003,
																					"src": "10756:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1090,
																				"indexExpression": {
																					"id": 1089,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10763:9:6",
																					"subExpression": {
																						"id": 1088,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1043,
																						"src": "10763:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10756:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1096,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10733:61:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10689:141:6"
														},
														{
															"expression": {
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1103,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1035,
																		"src": "10844:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1105,
																	"indexExpression": {
																		"id": 1104,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1055,
																		"src": "10851:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "10844:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1108,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1065,
																			"src": "10884:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1109,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1080,
																			"src": "10887:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1106,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 671,
																			"src": "10856:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$671_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1107,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10863:20:6",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 658,
																		"src": "10856:27:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10856:33:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "10844:45:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1112,
															"nodeType": "ExpressionStatement",
															"src": "10844:45:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1060,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1058,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1055,
														"src": "10566:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1059,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1014,
														"src": "10570:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10566:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1114,
												"initializationExpression": {
													"assignments": [
														1055
													],
													"declarations": [
														{
															"constant": false,
															"id": 1055,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "10559:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 1114,
															"src": "10551:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1054,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "10551:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1057,
													"initialValue": {
														"hexValue": "30",
														"id": 1056,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10563:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10551:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1062,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10585:3:6",
														"subExpression": {
															"id": 1061,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "10585:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1063,
													"nodeType": "ExpressionStatement",
													"src": "10585:3:6"
												},
												"nodeType": "ForStatement",
												"src": "10546:354:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1115,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1014,
														"src": "10914:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1116,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10930:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10914:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1135,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1009,
															"src": "11155:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11167:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "11155:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1147,
														"nodeType": "Block",
														"src": "11217:40:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1143,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 997,
																		"src": "11238:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1145,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1144,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11244:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11238:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1007,
																"id": 1146,
																"nodeType": "Return",
																"src": "11231:15:6"
															}
														]
													},
													"id": 1148,
													"nodeType": "IfStatement",
													"src": "11151:106:6",
													"trueBody": {
														"id": 1142,
														"nodeType": "Block",
														"src": "11170:41:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1138,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1003,
																		"src": "11191:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1140,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11198:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11191:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1007,
																"id": 1141,
																"nodeType": "Return",
																"src": "11184:16:6"
															}
														]
													}
												},
												"id": 1149,
												"nodeType": "IfStatement",
												"src": "10910:347:6",
												"trueBody": {
													"id": 1134,
													"nodeType": "Block",
													"src": "10933:212:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1118,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1051,
																	"src": "10951:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1119,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 997,
																		"src": "10963:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10969:6:6",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "10963:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10951:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1126,
															"nodeType": "IfStatement",
															"src": "10947:100:6",
															"trueBody": {
																"id": 1125,
																"nodeType": "Block",
																"src": "10977:70:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1122,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 679,
																				"src": "11002:28:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1123,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11002:30:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1124,
																		"nodeType": "RevertStatement",
																		"src": "10995:37:6"
																	}
																]
															}
														},
														{
															"id": 1133,
															"nodeType": "UncheckedBlock",
															"src": "11060:75:6",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1127,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1035,
																			"src": "11095:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1131,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1130,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1128,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1014,
																				"src": "11102:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1129,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11118:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "11102:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "11095:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1007,
																	"id": 1132,
																	"nodeType": "Return",
																	"src": "11088:32:6"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 994,
										"nodeType": "StructuredDocumentation",
										"src": "7879:1100:6",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "8993:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "9037:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "9020:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 995,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9020:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 996,
													"nodeType": "ArrayTypeName",
													"src": "9020:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "9066:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "9052:24:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 998,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "9052:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 999,
													"nodeType": "ArrayTypeName",
													"src": "9052:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "9103:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "9086:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1001,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9086:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1002,
													"nodeType": "ArrayTypeName",
													"src": "9086:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9010:105:6"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "9147:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "9139:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1005,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9139:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9138:20:6"
									},
									"scope": 1744,
									"src": "8984:2279:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1187,
										"nodeType": "Block",
										"src": "12112:84:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1179,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1155,
																"src": "12147:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1180,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1158,
																"src": "12154:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 1181,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1163,
																"src": "12166:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1182,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1173,
																"src": "12174:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1178,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1151,
																1355
															],
															"referencedDeclaration": 1355,
															"src": "12129:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1183,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12129:52:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1184,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1160,
														"src": "12185:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "12129:60:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1177,
												"id": 1186,
												"nodeType": "Return",
												"src": "12122:67:6"
											}
										]
									},
									"documentation": {
										"id": 1152,
										"nodeType": "StructuredDocumentation",
										"src": "11269:590:6",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 1188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "11873:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "11916:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "11899:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1153,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11899:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1154,
													"nodeType": "ArrayTypeName",
													"src": "11899:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "11945:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "11931:24:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1156,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "11931:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1157,
													"nodeType": "ArrayTypeName",
													"src": "11931:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "11973:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "11965:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1159,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11965:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1163,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "12004:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "11987:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1161,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11987:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1162,
													"nodeType": "ArrayTypeName",
													"src": "11987:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "12070:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "12020:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1172,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1168,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1165,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1172,
																"src": "12029:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1164,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12029:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1167,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1172,
																"src": "12038:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1166,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12038:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12028:18:6"
													},
													"returnParameterTypes": {
														"id": 1171,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1170,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1172,
																"src": "12061:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1169,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12061:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12060:9:6"
													},
													"src": "12020:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "11889:193:6"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "12106:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1175,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12106:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12105:6:6"
									},
									"scope": 1744,
									"src": "11864:332:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1354,
										"nodeType": "Block",
										"src": "13545:2083:6",
										"statements": [
											{
												"assignments": [
													1214
												],
												"declarations": [
													{
														"constant": false,
														"id": 1214,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "13937:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1354,
														"src": "13929:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1213,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13929:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1217,
												"initialValue": {
													"expression": {
														"id": 1215,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1198,
														"src": "13949:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "13956:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13949:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13929:33:6"
											},
											{
												"assignments": [
													1219
												],
												"declarations": [
													{
														"constant": false,
														"id": 1219,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "13980:13:6",
														"nodeType": "VariableDeclaration",
														"scope": 1354,
														"src": "13972:21:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1218,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13972:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1222,
												"initialValue": {
													"expression": {
														"id": 1220,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1195,
														"src": "13996:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "14007:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13996:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13972:41:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1226,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1223,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1214,
															"src": "14061:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1224,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1192,
																"src": "14073:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14079:6:6",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "14073:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "14061:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1229,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1227,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "14089:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14105:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "14089:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14061:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1235,
												"nodeType": "IfStatement",
												"src": "14057:113:6",
												"trueBody": {
													"id": 1234,
													"nodeType": "Block",
													"src": "14108:62:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1231,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 679,
																	"src": "14129:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1232,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14129:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1233,
															"nodeType": "RevertStatement",
															"src": "14122:37:6"
														}
													]
												}
											},
											{
												"assignments": [
													1240
												],
												"declarations": [
													{
														"constant": false,
														"id": 1240,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "14431:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1354,
														"src": "14414:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1238,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14414:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1239,
															"nodeType": "ArrayTypeName",
															"src": "14414:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1246,
												"initialValue": {
													"arguments": [
														{
															"id": 1244,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "14454:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1243,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "14440:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1241,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14444:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1242,
															"nodeType": "ArrayTypeName",
															"src": "14444:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14440:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14414:54:6"
											},
											{
												"assignments": [
													1248
												],
												"declarations": [
													{
														"constant": false,
														"id": 1248,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "14486:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1354,
														"src": "14478:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1247,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14478:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1250,
												"initialValue": {
													"hexValue": "30",
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14496:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14478:19:6"
											},
											{
												"assignments": [
													1252
												],
												"declarations": [
													{
														"constant": false,
														"id": 1252,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "14515:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1354,
														"src": "14507:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1251,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14507:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1254,
												"initialValue": {
													"hexValue": "30",
													"id": 1253,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14525:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14507:19:6"
											},
											{
												"assignments": [
													1256
												],
												"declarations": [
													{
														"constant": false,
														"id": 1256,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "14544:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 1354,
														"src": "14536:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1255,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14536:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1258,
												"initialValue": {
													"hexValue": "30",
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14555:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14536:20:6"
											},
											{
												"body": {
													"id": 1317,
													"nodeType": "Block",
													"src": "14976:289:6",
													"statements": [
														{
															"assignments": [
																1270
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1270,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "14998:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1317,
																	"src": "14990:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1269,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "14990:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1283,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1271,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1248,
																		"src": "15002:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1272,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1214,
																		"src": "15012:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "15002:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1278,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1240,
																		"src": "15044:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1281,
																	"indexExpression": {
																		"id": 1280,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15051:9:6",
																		"subExpression": {
																			"id": 1279,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1252,
																			"src": "15051:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15044:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15002:59:6",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1274,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1198,
																		"src": "15024:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1277,
																	"indexExpression": {
																		"id": 1276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15031:9:6",
																		"subExpression": {
																			"id": 1275,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1248,
																			"src": "15031:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15024:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "14990:71:6"
														},
														{
															"assignments": [
																1285
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1285,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "15083:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1317,
																	"src": "15075:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1284,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "15075:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1307,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1286,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1195,
																		"src": "15087:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1288,
																	"indexExpression": {
																		"id": 1287,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1260,
																		"src": "15098:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15087:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1302,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1192,
																		"src": "15199:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1305,
																	"indexExpression": {
																		"id": 1304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15205:10:6",
																		"subExpression": {
																			"id": 1303,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1256,
																			"src": "15205:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15199:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15087:129:6",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1291,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1289,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1248,
																					"src": "15120:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1290,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1214,
																					"src": "15130:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "15120:19:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1296,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1240,
																					"src": "15162:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1299,
																				"indexExpression": {
																					"id": 1298,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15169:9:6",
																					"subExpression": {
																						"id": 1297,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1252,
																						"src": "15169:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15162:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1300,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "15120:59:6",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1292,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1198,
																					"src": "15142:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1295,
																				"indexExpression": {
																					"id": 1294,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15149:9:6",
																					"subExpression": {
																						"id": 1293,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1248,
																						"src": "15149:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15142:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1301,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "15119:61:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "15075:141:6"
														},
														{
															"expression": {
																"id": 1315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1308,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1240,
																		"src": "15230:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1310,
																	"indexExpression": {
																		"id": 1309,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1260,
																		"src": "15237:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "15230:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1312,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1270,
																			"src": "15249:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1313,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1285,
																			"src": "15252:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1311,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1208,
																		"src": "15242:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1314,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15242:12:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "15230:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1316,
															"nodeType": "ExpressionStatement",
															"src": "15230:24:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1263,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1260,
														"src": "14952:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1264,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1219,
														"src": "14956:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14952:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1318,
												"initializationExpression": {
													"assignments": [
														1260
													],
													"declarations": [
														{
															"constant": false,
															"id": 1260,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "14945:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 1318,
															"src": "14937:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1259,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "14937:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1262,
													"initialValue": {
														"hexValue": "30",
														"id": 1261,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14949:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "14937:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1267,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "14971:3:6",
														"subExpression": {
															"id": 1266,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1260,
															"src": "14971:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1268,
													"nodeType": "ExpressionStatement",
													"src": "14971:3:6"
												},
												"nodeType": "ForStatement",
												"src": "14932:333:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1319,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1219,
														"src": "15279:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1320,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15295:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "15279:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1339,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1214,
															"src": "15520:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1340,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15532:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "15520:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1351,
														"nodeType": "Block",
														"src": "15582:40:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1347,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1192,
																		"src": "15603:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1349,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15609:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15603:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1212,
																"id": 1350,
																"nodeType": "Return",
																"src": "15596:15:6"
															}
														]
													},
													"id": 1352,
													"nodeType": "IfStatement",
													"src": "15516:106:6",
													"trueBody": {
														"id": 1346,
														"nodeType": "Block",
														"src": "15535:41:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1342,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1198,
																		"src": "15556:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1344,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1343,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15563:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15556:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1212,
																"id": 1345,
																"nodeType": "Return",
																"src": "15549:16:6"
															}
														]
													}
												},
												"id": 1353,
												"nodeType": "IfStatement",
												"src": "15275:347:6",
												"trueBody": {
													"id": 1338,
													"nodeType": "Block",
													"src": "15298:212:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1325,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1322,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1256,
																	"src": "15316:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1323,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1192,
																		"src": "15328:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15334:6:6",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "15328:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15316:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1330,
															"nodeType": "IfStatement",
															"src": "15312:100:6",
															"trueBody": {
																"id": 1329,
																"nodeType": "Block",
																"src": "15342:70:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1326,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 679,
																				"src": "15367:28:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1327,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15367:30:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1328,
																		"nodeType": "RevertStatement",
																		"src": "15360:37:6"
																	}
																]
															}
														},
														{
															"id": 1337,
															"nodeType": "UncheckedBlock",
															"src": "15425:75:6",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1331,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1240,
																			"src": "15460:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1335,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1332,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1219,
																				"src": "15467:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1333,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "15483:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "15467:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "15460:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1212,
																	"id": 1336,
																	"nodeType": "Return",
																	"src": "15453:32:6"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1189,
										"nodeType": "StructuredDocumentation",
										"src": "12202:1097:6",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "13313:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "13357:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1355,
												"src": "13340:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1190,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13340:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1191,
													"nodeType": "ArrayTypeName",
													"src": "13340:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "13386:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1355,
												"src": "13372:24:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1193,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "13372:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1194,
													"nodeType": "ArrayTypeName",
													"src": "13372:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "13423:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1355,
												"src": "13406:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1196,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13406:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1197,
													"nodeType": "ArrayTypeName",
													"src": "13406:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "13489:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1355,
												"src": "13439:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1207,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1203,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1200,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1207,
																"src": "13448:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1199,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13448:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1202,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1207,
																"src": "13457:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1201,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13457:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13447:18:6"
													},
													"returnParameterTypes": {
														"id": 1206,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1205,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1207,
																"src": "13480:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1204,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13480:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13479:9:6"
													},
													"src": "13439:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "13330:171:6"
									},
									"returnParameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "13533:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1355,
												"src": "13525:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1210,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13525:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13524:20:6"
									},
									"scope": 1744,
									"src": "13304:2324:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1380,
										"nodeType": "Block",
										"src": "16436:84:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1373,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1359,
																"src": "16479:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1374,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1362,
																"src": "16486:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 1375,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1367,
																"src": "16498:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 1372,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1539,
																1743
															],
															"referencedDeclaration": 1539,
															"src": "16453:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 1376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16453:52:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1377,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1364,
														"src": "16509:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "16453:60:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1371,
												"id": 1379,
												"nodeType": "Return",
												"src": "16446:67:6"
											}
										]
									},
									"documentation": {
										"id": 1356,
										"nodeType": "StructuredDocumentation",
										"src": "15634:603:6",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 1381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "16251:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "16304:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1381,
												"src": "16285:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1357,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16285:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1358,
													"nodeType": "ArrayTypeName",
													"src": "16285:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "16335:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1381,
												"src": "16319:26:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1360,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "16319:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1361,
													"nodeType": "ArrayTypeName",
													"src": "16319:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "16363:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1381,
												"src": "16355:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1363,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16355:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "16394:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1381,
												"src": "16377:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1365,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16377:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1366,
													"nodeType": "ArrayTypeName",
													"src": "16377:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16275:131:6"
									},
									"returnParameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1381,
												"src": "16430:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1369,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16430:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16429:6:6"
									},
									"scope": 1744,
									"src": "16242:278:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1538,
										"nodeType": "Block",
										"src": "17820:2104:6",
										"statements": [
											{
												"assignments": [
													1397
												],
												"declarations": [
													{
														"constant": false,
														"id": 1397,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "18212:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1538,
														"src": "18204:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1396,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18204:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1400,
												"initialValue": {
													"expression": {
														"id": 1398,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1391,
														"src": "18224:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18231:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18224:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18204:33:6"
											},
											{
												"assignments": [
													1402
												],
												"declarations": [
													{
														"constant": false,
														"id": 1402,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "18255:13:6",
														"nodeType": "VariableDeclaration",
														"scope": 1538,
														"src": "18247:21:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1401,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18247:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1405,
												"initialValue": {
													"expression": {
														"id": 1403,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1388,
														"src": "18271:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18282:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18271:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18247:41:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1409,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1406,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1397,
															"src": "18336:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1407,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1385,
																"src": "18348:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 1408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "18354:6:6",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "18348:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "18336:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1412,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1410,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1402,
															"src": "18364:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1411,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18380:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "18364:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18336:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1418,
												"nodeType": "IfStatement",
												"src": "18332:113:6",
												"trueBody": {
													"id": 1417,
													"nodeType": "Block",
													"src": "18383:62:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1414,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 679,
																	"src": "18404:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18404:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1416,
															"nodeType": "RevertStatement",
															"src": "18397:37:6"
														}
													]
												}
											},
											{
												"assignments": [
													1423
												],
												"declarations": [
													{
														"constant": false,
														"id": 1423,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "18706:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1538,
														"src": "18689:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1421,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18689:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1422,
															"nodeType": "ArrayTypeName",
															"src": "18689:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1429,
												"initialValue": {
													"arguments": [
														{
															"id": 1427,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1402,
															"src": "18729:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1426,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "18715:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1424,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18719:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1425,
															"nodeType": "ArrayTypeName",
															"src": "18719:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18715:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18689:54:6"
											},
											{
												"assignments": [
													1431
												],
												"declarations": [
													{
														"constant": false,
														"id": 1431,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "18761:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1538,
														"src": "18753:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1430,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18753:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1433,
												"initialValue": {
													"hexValue": "30",
													"id": 1432,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18771:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18753:19:6"
											},
											{
												"assignments": [
													1435
												],
												"declarations": [
													{
														"constant": false,
														"id": 1435,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "18790:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1538,
														"src": "18782:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1434,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18782:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1437,
												"initialValue": {
													"hexValue": "30",
													"id": 1436,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18800:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18782:19:6"
											},
											{
												"assignments": [
													1439
												],
												"declarations": [
													{
														"constant": false,
														"id": 1439,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "18819:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 1538,
														"src": "18811:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1438,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18811:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1441,
												"initialValue": {
													"hexValue": "30",
													"id": 1440,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18830:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18811:20:6"
											},
											{
												"body": {
													"id": 1501,
													"nodeType": "Block",
													"src": "19251:310:6",
													"statements": [
														{
															"assignments": [
																1453
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1453,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "19273:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1501,
																	"src": "19265:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1452,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19265:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1466,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1454,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1431,
																		"src": "19277:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1455,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1397,
																		"src": "19287:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "19277:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1461,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1423,
																		"src": "19319:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1464,
																	"indexExpression": {
																		"id": 1463,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19326:9:6",
																		"subExpression": {
																			"id": 1462,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1435,
																			"src": "19326:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19319:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19277:59:6",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1457,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1391,
																		"src": "19299:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1460,
																	"indexExpression": {
																		"id": 1459,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19306:9:6",
																		"subExpression": {
																			"id": 1458,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1431,
																			"src": "19306:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19299:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19265:71:6"
														},
														{
															"assignments": [
																1468
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1468,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "19358:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1501,
																	"src": "19350:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1467,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19350:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1490,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1469,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1388,
																		"src": "19362:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 1471,
																	"indexExpression": {
																		"id": 1470,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1443,
																		"src": "19373:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19362:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1485,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1385,
																		"src": "19474:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1488,
																	"indexExpression": {
																		"id": 1487,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19480:10:6",
																		"subExpression": {
																			"id": 1486,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1439,
																			"src": "19480:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19474:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1489,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19362:129:6",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1474,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1472,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1431,
																					"src": "19395:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1473,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1397,
																					"src": "19405:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "19395:19:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1479,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1423,
																					"src": "19437:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1482,
																				"indexExpression": {
																					"id": 1481,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19444:9:6",
																					"subExpression": {
																						"id": 1480,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1435,
																						"src": "19444:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19437:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1483,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "19395:59:6",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1475,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1391,
																					"src": "19417:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1478,
																				"indexExpression": {
																					"id": 1477,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19424:9:6",
																					"subExpression": {
																						"id": 1476,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1431,
																						"src": "19424:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19417:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1484,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "19394:61:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19350:141:6"
														},
														{
															"expression": {
																"id": 1499,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1491,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1423,
																		"src": "19505:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1493,
																	"indexExpression": {
																		"id": 1492,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1443,
																		"src": "19512:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "19505:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1496,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1453,
																			"src": "19545:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1497,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1468,
																			"src": "19548:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1494,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 671,
																			"src": "19517:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$671_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1495,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "19524:20:6",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 658,
																		"src": "19517:27:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "19517:33:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "19505:45:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1500,
															"nodeType": "ExpressionStatement",
															"src": "19505:45:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1446,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1443,
														"src": "19227:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1447,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1402,
														"src": "19231:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "19227:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1502,
												"initializationExpression": {
													"assignments": [
														1443
													],
													"declarations": [
														{
															"constant": false,
															"id": 1443,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "19220:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 1502,
															"src": "19212:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1442,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "19212:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1445,
													"initialValue": {
														"hexValue": "30",
														"id": 1444,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19224:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "19212:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "19246:3:6",
														"subExpression": {
															"id": 1449,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1443,
															"src": "19246:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1451,
													"nodeType": "ExpressionStatement",
													"src": "19246:3:6"
												},
												"nodeType": "ForStatement",
												"src": "19207:354:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1503,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1402,
														"src": "19575:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1504,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19591:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "19575:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1525,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1523,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1397,
															"src": "19816:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1524,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19828:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "19816:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1535,
														"nodeType": "Block",
														"src": "19878:40:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1531,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1385,
																		"src": "19899:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1533,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1532,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19905:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19899:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1395,
																"id": 1534,
																"nodeType": "Return",
																"src": "19892:15:6"
															}
														]
													},
													"id": 1536,
													"nodeType": "IfStatement",
													"src": "19812:106:6",
													"trueBody": {
														"id": 1530,
														"nodeType": "Block",
														"src": "19831:41:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1526,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1391,
																		"src": "19852:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1528,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1527,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19859:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19852:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1395,
																"id": 1529,
																"nodeType": "Return",
																"src": "19845:16:6"
															}
														]
													}
												},
												"id": 1537,
												"nodeType": "IfStatement",
												"src": "19571:347:6",
												"trueBody": {
													"id": 1522,
													"nodeType": "Block",
													"src": "19594:212:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1509,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1506,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1439,
																	"src": "19612:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1507,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1385,
																		"src": "19624:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "19630:6:6",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "19624:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "19612:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1514,
															"nodeType": "IfStatement",
															"src": "19608:100:6",
															"trueBody": {
																"id": 1513,
																"nodeType": "Block",
																"src": "19638:70:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1510,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 679,
																				"src": "19663:28:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1511,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "19663:30:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1512,
																		"nodeType": "RevertStatement",
																		"src": "19656:37:6"
																	}
																]
															}
														},
														{
															"id": 1521,
															"nodeType": "UncheckedBlock",
															"src": "19721:75:6",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1515,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1423,
																			"src": "19756:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1519,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1516,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1402,
																				"src": "19763:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1517,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "19779:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "19763:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "19756:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1395,
																	"id": 1520,
																	"nodeType": "Return",
																	"src": "19749:32:6"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1382,
										"nodeType": "StructuredDocumentation",
										"src": "16526:1102:6",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1539,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "17642:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "17696:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "17677:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1383,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17677:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1384,
													"nodeType": "ArrayTypeName",
													"src": "17677:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1388,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "17727:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "17711:26:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1386,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "17711:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1387,
													"nodeType": "ArrayTypeName",
													"src": "17711:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "17764:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "17747:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1389,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17747:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1390,
													"nodeType": "ArrayTypeName",
													"src": "17747:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17667:109:6"
									},
									"returnParameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "17808:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "17800:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1393,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17800:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17799:20:6"
									},
									"scope": 1744,
									"src": "17633:2291:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1575,
										"nodeType": "Block",
										"src": "20795:92:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1567,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1543,
																"src": "20838:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1568,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1546,
																"src": "20845:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 1569,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1551,
																"src": "20857:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1570,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1561,
																"src": "20865:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1566,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1539,
																1743
															],
															"referencedDeclaration": 1743,
															"src": "20812:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20812:60:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1572,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1548,
														"src": "20876:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "20812:68:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1565,
												"id": 1574,
												"nodeType": "Return",
												"src": "20805:75:6"
											}
										]
									},
									"documentation": {
										"id": 1540,
										"nodeType": "StructuredDocumentation",
										"src": "19930:600:6",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 1576,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "20544:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1543,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "20597:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "20578:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1541,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20578:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1542,
													"nodeType": "ArrayTypeName",
													"src": "20578:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1546,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "20628:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "20612:26:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1544,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "20612:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1545,
													"nodeType": "ArrayTypeName",
													"src": "20612:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "20656:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "20648:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1547,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "20648:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "20687:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "20670:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1549,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20670:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1550,
													"nodeType": "ArrayTypeName",
													"src": "20670:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1561,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "20753:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "20703:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1560,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1556,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1553,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1560,
																"src": "20712:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1552,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20712:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1555,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1560,
																"src": "20721:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1554,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20721:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20711:18:6"
													},
													"returnParameterTypes": {
														"id": 1559,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1558,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1560,
																"src": "20744:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1557,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20744:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20743:9:6"
													},
													"src": "20703:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "20568:197:6"
									},
									"returnParameters": {
										"id": 1565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1564,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "20789:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1563,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "20789:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20788:6:6"
									},
									"scope": 1744,
									"src": "20535:352:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1742,
										"nodeType": "Block",
										"src": "22250:2083:6",
										"statements": [
											{
												"assignments": [
													1602
												],
												"declarations": [
													{
														"constant": false,
														"id": 1602,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "22642:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1742,
														"src": "22634:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1601,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22634:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1605,
												"initialValue": {
													"expression": {
														"id": 1603,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1586,
														"src": "22654:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22661:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22654:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22634:33:6"
											},
											{
												"assignments": [
													1607
												],
												"declarations": [
													{
														"constant": false,
														"id": 1607,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "22685:13:6",
														"nodeType": "VariableDeclaration",
														"scope": 1742,
														"src": "22677:21:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1606,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22677:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1610,
												"initialValue": {
													"expression": {
														"id": 1608,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1583,
														"src": "22701:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 1609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22712:6:6",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22701:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22677:41:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1614,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1611,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1602,
															"src": "22766:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1612,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1580,
																"src": "22778:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 1613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "22784:6:6",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "22778:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "22766:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1615,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1607,
															"src": "22794:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "22810:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "22794:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "22766:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1623,
												"nodeType": "IfStatement",
												"src": "22762:113:6",
												"trueBody": {
													"id": 1622,
													"nodeType": "Block",
													"src": "22813:62:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1619,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 679,
																	"src": "22834:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1620,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "22834:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1621,
															"nodeType": "RevertStatement",
															"src": "22827:37:6"
														}
													]
												}
											},
											{
												"assignments": [
													1628
												],
												"declarations": [
													{
														"constant": false,
														"id": 1628,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "23136:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1742,
														"src": "23119:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1626,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23119:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1627,
															"nodeType": "ArrayTypeName",
															"src": "23119:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1634,
												"initialValue": {
													"arguments": [
														{
															"id": 1632,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1607,
															"src": "23159:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1631,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "23145:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1629,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23149:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1630,
															"nodeType": "ArrayTypeName",
															"src": "23149:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23145:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23119:54:6"
											},
											{
												"assignments": [
													1636
												],
												"declarations": [
													{
														"constant": false,
														"id": 1636,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "23191:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1742,
														"src": "23183:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1635,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23183:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1638,
												"initialValue": {
													"hexValue": "30",
													"id": 1637,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23201:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23183:19:6"
											},
											{
												"assignments": [
													1640
												],
												"declarations": [
													{
														"constant": false,
														"id": 1640,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "23220:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1742,
														"src": "23212:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1639,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23212:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1642,
												"initialValue": {
													"hexValue": "30",
													"id": 1641,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23230:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23212:19:6"
											},
											{
												"assignments": [
													1644
												],
												"declarations": [
													{
														"constant": false,
														"id": 1644,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "23249:8:6",
														"nodeType": "VariableDeclaration",
														"scope": 1742,
														"src": "23241:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1643,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23241:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1646,
												"initialValue": {
													"hexValue": "30",
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23260:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23241:20:6"
											},
											{
												"body": {
													"id": 1705,
													"nodeType": "Block",
													"src": "23681:289:6",
													"statements": [
														{
															"assignments": [
																1658
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1658,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "23703:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1705,
																	"src": "23695:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1657,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23695:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1671,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1661,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1659,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1636,
																		"src": "23707:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1660,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1602,
																		"src": "23717:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "23707:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1666,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1628,
																		"src": "23749:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1669,
																	"indexExpression": {
																		"id": 1668,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23756:9:6",
																		"subExpression": {
																			"id": 1667,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1640,
																			"src": "23756:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23749:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23707:59:6",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1662,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1586,
																		"src": "23729:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1665,
																	"indexExpression": {
																		"id": 1664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23736:9:6",
																		"subExpression": {
																			"id": 1663,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1636,
																			"src": "23736:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23729:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23695:71:6"
														},
														{
															"assignments": [
																1673
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1673,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "23788:1:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1705,
																	"src": "23780:9:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1672,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23780:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1695,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1674,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "23792:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 1676,
																	"indexExpression": {
																		"id": 1675,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1648,
																		"src": "23803:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23792:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1690,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1580,
																		"src": "23904:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1693,
																	"indexExpression": {
																		"id": 1692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23910:10:6",
																		"subExpression": {
																			"id": 1691,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1644,
																			"src": "23910:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23904:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1694,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23792:129:6",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1679,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1677,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1636,
																					"src": "23825:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1678,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1602,
																					"src": "23835:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "23825:19:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1684,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1628,
																					"src": "23867:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1687,
																				"indexExpression": {
																					"id": 1686,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23874:9:6",
																					"subExpression": {
																						"id": 1685,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1640,
																						"src": "23874:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23867:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1688,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "23825:59:6",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1680,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1586,
																					"src": "23847:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1683,
																				"indexExpression": {
																					"id": 1682,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23854:9:6",
																					"subExpression": {
																						"id": 1681,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1636,
																						"src": "23854:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23847:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1689,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "23824:61:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23780:141:6"
														},
														{
															"expression": {
																"id": 1703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1696,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1628,
																		"src": "23935:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1698,
																	"indexExpression": {
																		"id": 1697,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1648,
																		"src": "23942:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "23935:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1700,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1658,
																			"src": "23954:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1701,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1673,
																			"src": "23957:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1699,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1596,
																		"src": "23947:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "23947:12:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "23935:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1704,
															"nodeType": "ExpressionStatement",
															"src": "23935:24:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1651,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1648,
														"src": "23657:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1652,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1607,
														"src": "23661:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "23657:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1706,
												"initializationExpression": {
													"assignments": [
														1648
													],
													"declarations": [
														{
															"constant": false,
															"id": 1648,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "23650:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 1706,
															"src": "23642:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1647,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "23642:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1650,
													"initialValue": {
														"hexValue": "30",
														"id": 1649,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "23654:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "23642:13:6"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1655,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "23676:3:6",
														"subExpression": {
															"id": 1654,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "23676:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1656,
													"nodeType": "ExpressionStatement",
													"src": "23676:3:6"
												},
												"nodeType": "ForStatement",
												"src": "23637:333:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1707,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1607,
														"src": "23984:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1708,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "24000:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "23984:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1729,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1727,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1602,
															"src": "24225:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1728,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "24237:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "24225:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1739,
														"nodeType": "Block",
														"src": "24287:40:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1735,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1580,
																		"src": "24308:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1737,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1736,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24314:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24308:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1600,
																"id": 1738,
																"nodeType": "Return",
																"src": "24301:15:6"
															}
														]
													},
													"id": 1740,
													"nodeType": "IfStatement",
													"src": "24221:106:6",
													"trueBody": {
														"id": 1734,
														"nodeType": "Block",
														"src": "24240:41:6",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1730,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1586,
																		"src": "24261:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1732,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24268:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24261:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1600,
																"id": 1733,
																"nodeType": "Return",
																"src": "24254:16:6"
															}
														]
													}
												},
												"id": 1741,
												"nodeType": "IfStatement",
												"src": "23980:347:6",
												"trueBody": {
													"id": 1726,
													"nodeType": "Block",
													"src": "24003:212:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1710,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1644,
																	"src": "24021:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1711,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1580,
																		"src": "24033:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1712,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "24039:6:6",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "24033:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "24021:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1718,
															"nodeType": "IfStatement",
															"src": "24017:100:6",
															"trueBody": {
																"id": 1717,
																"nodeType": "Block",
																"src": "24047:70:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1714,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 679,
																				"src": "24072:28:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1715,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "24072:30:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1716,
																		"nodeType": "RevertStatement",
																		"src": "24065:37:6"
																	}
																]
															}
														},
														{
															"id": 1725,
															"nodeType": "UncheckedBlock",
															"src": "24130:75:6",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1719,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1628,
																			"src": "24165:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1723,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1722,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1720,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1607,
																				"src": "24172:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1721,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "24188:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "24172:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "24165:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1600,
																	"id": 1724,
																	"nodeType": "Return",
																	"src": "24158:32:6"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1577,
										"nodeType": "StructuredDocumentation",
										"src": "20893:1099:6",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1743,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "22006:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "22060:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "22041:24:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1578,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22041:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1579,
													"nodeType": "ArrayTypeName",
													"src": "22041:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "22091:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "22075:26:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1581,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "22075:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1582,
													"nodeType": "ArrayTypeName",
													"src": "22075:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "22128:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "22111:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1584,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22111:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1585,
													"nodeType": "ArrayTypeName",
													"src": "22111:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1596,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "22194:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "22144:56:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1595,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1591,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1588,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1595,
																"src": "22153:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1587,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22153:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1590,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1595,
																"src": "22162:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1589,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22162:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22152:18:6"
													},
													"returnParameterTypes": {
														"id": 1594,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1593,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1595,
																"src": "22185:7:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1592,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22185:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22184:9:6"
													},
													"src": "22144:56:6",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "22031:175:6"
									},
									"returnParameters": {
										"id": 1600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1599,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "22238:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "22230:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1598,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "22230:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22229:20:6"
									},
									"scope": 1744,
									"src": "21997:2336:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1745,
							"src": "1353:22982:6",
							"usedErrors": [
								679
							],
							"usedEvents": []
						}
					],
					"src": "206:24130:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1756
						]
					},
					"id": 1757,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1746,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "115:25:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1747,
								"nodeType": "StructuredDocumentation",
								"src": "142:280:7",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1756,
							"linearizedBaseContracts": [
								1756
							],
							"name": "IERC165",
							"nameLocation": "433:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1748,
										"nodeType": "StructuredDocumentation",
										"src": "447:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1755,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "801:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1750,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "826:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "819:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1749,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "819:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:20:7"
									},
									"returnParameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "862:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1752,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "862:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "861:6:7"
									},
									"scope": 1756,
									"src": "792:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1757,
							"src": "423:447:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:756:7"
				},
				"id": 7
			},
			"src/MerkleAirdrop.sol": {
				"ast": {
					"absolutePath": "src/MerkleAirdrop.sol",
					"exportedSymbols": {
						"IERC20": [
							167
						],
						"MerkleAirdrop": [
							1889
						],
						"MerkleProof": [
							1744
						],
						"SafeERC20": [
							631
						]
					},
					"id": 1890,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1758,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1761,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1890,
							"sourceUnit": 632,
							"src": "59:90:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1759,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "67:6:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 1760,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 631,
										"src": "75:9:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 1763,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1890,
							"sourceUnit": 1745,
							"src": "151:87:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1762,
										"name": "MerkleProof",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1744,
										"src": "159:11:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleAirdrop",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1889,
							"linearizedBaseContracts": [
								1889
							],
							"name": "MerkleAirdrop",
							"nameLocation": "251:13:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1767,
									"libraryName": {
										"id": 1764,
										"name": "SafeERC20",
										"nameLocations": [
											"278:9:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 631,
										"src": "278:9:8"
									},
									"nodeType": "UsingForDirective",
									"src": "272:27:8",
									"typeName": {
										"id": 1766,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1765,
											"name": "IERC20",
											"nameLocations": [
												"292:6:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 167,
											"src": "292:6:8"
										},
										"referencedDeclaration": 167,
										"src": "292:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$167",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"errorSelector": "aa894afb",
									"id": 1769,
									"name": "MerkleAirdrop__MerkleProofNotValid",
									"nameLocation": "311:34:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "345:2:8"
									},
									"src": "305:43:8"
								},
								{
									"errorSelector": "1ac2170b",
									"id": 1771,
									"name": "MerkleAirdrop__AlreadyClaimed",
									"nameLocation": "360:29:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "389:2:8"
									},
									"src": "354:38:8"
								},
								{
									"anonymous": false,
									"eventSelector": "47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4",
									"id": 1777,
									"name": "Claim",
									"nameLocation": "406:5:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1773,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "420:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "412:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1772,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "412:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1775,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "437:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "429:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1774,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "429:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "411:33:8"
									},
									"src": "400:45:8"
								},
								{
									"constant": false,
									"functionSelector": "99ae559d",
									"id": 1780,
									"mutability": "mutable",
									"name": "claimers",
									"nameLocation": "499:8:8",
									"nodeType": "VariableDeclaration",
									"scope": 1889,
									"src": "482:25:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 1778,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "482:7:8",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 1779,
										"nodeType": "ArrayTypeName",
										"src": "482:9:8",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1782,
									"mutability": "immutable",
									"name": "i_markleRoot",
									"nameLocation": "540:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 1889,
									"src": "514:38:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1781,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "514:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1785,
									"mutability": "immutable",
									"name": "i_airdropToken",
									"nameLocation": "584:14:8",
									"nodeType": "VariableDeclaration",
									"scope": 1889,
									"src": "559:39:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$167",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1784,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1783,
											"name": "IERC20",
											"nameLocations": [
												"559:6:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 167,
											"src": "559:6:8"
										},
										"referencedDeclaration": 167,
										"src": "559:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$167",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "4a5aae37",
									"id": 1789,
									"mutability": "mutable",
									"name": "s_hasClaimed",
									"nameLocation": "637:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 1889,
									"src": "605:44:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1788,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1786,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "613:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "605:24:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1787,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "624:4:8",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1805,
										"nodeType": "Block",
										"src": "712:86:8",
										"statements": [
											{
												"expression": {
													"id": 1799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1797,
														"name": "i_markleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1782,
														"src": "723:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1798,
														"name": "_markleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1791,
														"src": "738:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "723:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1800,
												"nodeType": "ExpressionStatement",
												"src": "723:26:8"
											},
											{
												"expression": {
													"id": 1803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1801,
														"name": "i_airdropToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1785,
														"src": "760:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$167",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1802,
														"name": "_airdropToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1794,
														"src": "777:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$167",
															"typeString": "contract IERC20"
														}
													},
													"src": "760:30:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"id": 1804,
												"nodeType": "ExpressionStatement",
												"src": "760:30:8"
											}
										]
									},
									"id": 1806,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "_markleRoot",
												"nameLocation": "678:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1806,
												"src": "670:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1790,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "_airdropToken",
												"nameLocation": "698:13:8",
												"nodeType": "VariableDeclaration",
												"scope": 1806,
												"src": "691:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1793,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1792,
														"name": "IERC20",
														"nameLocations": [
															"691:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "691:6:8"
													},
													"referencedDeclaration": 167,
													"src": "691:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:43:8"
									},
									"returnParameters": {
										"id": 1796,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "712:0:8"
									},
									"scope": 1889,
									"src": "658:140:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1870,
										"nodeType": "Block",
										"src": "897:475:8",
										"statements": [
											{
												"condition": {
													"baseExpression": {
														"id": 1816,
														"name": "s_hasClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1789,
														"src": "911:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 1818,
													"indexExpression": {
														"id": 1817,
														"name": "_account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1808,
														"src": "924:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "911:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1823,
												"nodeType": "IfStatement",
												"src": "908:92:8",
												"trueBody": {
													"id": 1822,
													"nodeType": "Block",
													"src": "934:66:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1819,
																	"name": "MerkleAirdrop__AlreadyClaimed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1771,
																	"src": "957:29:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "957:31:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1821,
															"nodeType": "RevertStatement",
															"src": "950:38:8"
														}
													]
												}
											},
											{
												"assignments": [
													1825
												],
												"declarations": [
													{
														"constant": false,
														"id": 1825,
														"mutability": "mutable",
														"name": "leaf",
														"nameLocation": "1018:4:8",
														"nodeType": "VariableDeclaration",
														"scope": 1870,
														"src": "1010:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1824,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1010:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1839,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1833,
																					"name": "_account",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1808,
																					"src": "1069:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1834,
																					"name": "_amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1810,
																					"src": "1079:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1831,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1058:3:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1832,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "1062:6:8",
																				"memberName": "encode",
																				"nodeType": "MemberAccess",
																				"src": "1058:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 1835,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1058:29:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1830,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "1048:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1836,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1048:40:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1828,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1035:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1827,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "1035:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1829,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1041:6:8",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "1035:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1837,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1035:54:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1826,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "1025:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1025:65:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1010:80:8"
											},
											{
												"condition": {
													"id": 1846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1104:52:8",
													"subExpression": {
														"arguments": [
															{
																"id": 1842,
																"name": "markleProof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1813,
																"src": "1124:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1843,
																"name": "i_markleRoot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1782,
																"src": "1137:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1844,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1825,
																"src": "1151:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 1840,
																"name": "MerkleProof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1744,
																"src": "1105:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_MerkleProof_$1744_$",
																	"typeString": "type(library MerkleProof)"
																}
															},
															"id": 1841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1117:6:8",
															"memberName": "verify",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 700,
															"src": "1105:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
															}
														},
														"id": 1845,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1105:51:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1851,
												"nodeType": "IfStatement",
												"src": "1101:127:8",
												"trueBody": {
													"id": 1850,
													"nodeType": "Block",
													"src": "1158:70:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1847,
																	"name": "MerkleAirdrop__MerkleProofNotValid",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1769,
																	"src": "1180:34:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1180:36:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1849,
															"nodeType": "RevertStatement",
															"src": "1173:43:8"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1852,
															"name": "s_hasClaimed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1789,
															"src": "1238:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1854,
														"indexExpression": {
															"id": 1853,
															"name": "_account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1808,
															"src": "1251:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1238:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1855,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1263:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1238:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1857,
												"nodeType": "ExpressionStatement",
												"src": "1238:29:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1859,
															"name": "_account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1808,
															"src": "1289:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1860,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1810,
															"src": "1299:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1858,
														"name": "Claim",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1777,
														"src": "1283:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1283:24:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1862,
												"nodeType": "EmitStatement",
												"src": "1278:29:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1866,
															"name": "_account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1808,
															"src": "1346:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1867,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1810,
															"src": "1356:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1863,
															"name": "i_airdropToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "1318:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														"id": 1865,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1333:12:8",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 212,
														"src": "1318:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$167_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1318:46:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1869,
												"nodeType": "ExpressionStatement",
												"src": "1318:46:8"
											}
										]
									},
									"functionSelector": "3d13f874",
									"id": 1871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claim",
									"nameLocation": "815:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1808,
												"mutability": "mutable",
												"name": "_account",
												"nameLocation": "829:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "821:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1807,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1810,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "847:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "839:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "839:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1813,
												"mutability": "mutable",
												"name": "markleProof",
												"nameLocation": "875:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "856:30:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1811,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "856:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1812,
													"nodeType": "ArrayTypeName",
													"src": "856:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:67:8"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "897:0:8"
									},
									"scope": 1889,
									"src": "806:566:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1878,
										"nodeType": "Block",
										"src": "1436:38:8",
										"statements": [
											{
												"expression": {
													"id": 1876,
													"name": "i_markleRoot",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1782,
													"src": "1454:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1875,
												"id": 1877,
												"nodeType": "Return",
												"src": "1447:19:8"
											}
										]
									},
									"functionSelector": "49590657",
									"id": 1879,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMerkleRoot",
									"nameLocation": "1389:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1872,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1402:2:8"
									},
									"returnParameters": {
										"id": 1875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1879,
												"src": "1428:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1873,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1428:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1427:9:8"
									},
									"scope": 1889,
									"src": "1380:94:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1887,
										"nodeType": "Block",
										"src": "1539:40:8",
										"statements": [
											{
												"expression": {
													"id": 1885,
													"name": "i_airdropToken",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1785,
													"src": "1557:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"functionReturnParameters": 1884,
												"id": 1886,
												"nodeType": "Return",
												"src": "1550:21:8"
											}
										]
									},
									"functionSelector": "5d70fa3c",
									"id": 1888,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAirdroptoken",
									"nameLocation": "1491:15:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1880,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1506:2:8"
									},
									"returnParameters": {
										"id": 1884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "1532:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1882,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1881,
														"name": "IERC20",
														"nameLocations": [
															"1532:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1532:6:8"
													},
													"referencedDeclaration": 167,
													"src": "1532:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1531:8:8"
									},
									"scope": 1889,
									"src": "1482:97:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1890,
							"src": "242:1342:8",
							"usedErrors": [
								179,
								1769,
								1771
							],
							"usedEvents": [
								1777
							]
						}
					],
					"src": "33:1551:8"
				},
				"id": 8
			}
		}
	}
}